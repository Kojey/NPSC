
C:\Users\user\Desktop\NPC\NeoPixelClock_Software\Code\Debug\NeoPixelClock_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003880  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08003a08  08003a08  00013a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003ba4  08003ba4  00013ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000000  08003bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  7 .bss          000003d8  20000028  20000028  00020028  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000400  20000400  00020028  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000cb45  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000023a7  00000000  00000000  0002cb9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001178  00000000  00000000  0002ef48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000fd0  00000000  00000000  000300c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000062be  00000000  00000000  00031090  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004e2b  00000000  00000000  0003734e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0003c179  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004968  00000000  00000000  0003c1f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00040b60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080039f0 	.word	0x080039f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	080039f0 	.word	0x080039f0

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032a:	f1a4 0401 	sub.w	r4, r4, #1
 800032e:	d1e9      	bne.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f092 0f00 	teq	r2, #0
 80004d6:	bf14      	ite	ne
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e720      	b.n	8000330 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aedc 	beq.w	80002de <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6c1      	b.n	80002de <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__aeabi_d2iz>:
 8000980:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000984:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000988:	d215      	bcs.n	80009b6 <__aeabi_d2iz+0x36>
 800098a:	d511      	bpl.n	80009b0 <__aeabi_d2iz+0x30>
 800098c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000990:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000994:	d912      	bls.n	80009bc <__aeabi_d2iz+0x3c>
 8000996:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009a6:	fa23 f002 	lsr.w	r0, r3, r2
 80009aa:	bf18      	it	ne
 80009ac:	4240      	negne	r0, r0
 80009ae:	4770      	bx	lr
 80009b0:	f04f 0000 	mov.w	r0, #0
 80009b4:	4770      	bx	lr
 80009b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ba:	d105      	bne.n	80009c8 <__aeabi_d2iz+0x48>
 80009bc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	bf08      	it	eq
 80009c2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009c6:	4770      	bx	lr
 80009c8:	f04f 0000 	mov.w	r0, #0
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <ClockManagement_saveAlarm>:
 * @note	Save in this order: Name, DateWeekDat, DateWeekDaySel, Mask
 * 				H12, Hours, Minutes, Seconds
 * @param 	Alarm_Def: the alarm setitngs
 * @retval	ErrorStatus
 */
ErrorStatus ClockManagement_saveAlarm(Alarm_Definition * Alarm_Def, uint16_t address){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	807b      	strh	r3, [r7, #2]
	return (ErrorStatus) (eeprom_writeNBytes(address+OFFSET_NAME,(uint8_t *)(Alarm_Def->alarmName),NAME_SIZE) \
 80009dc:	6879      	ldr	r1, [r7, #4]
 80009de:	887b      	ldrh	r3, [r7, #2]
 80009e0:	221f      	movs	r2, #31
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fd54 	bl	8001490 <eeprom_writeNBytes>
 80009e8:	4603      	mov	r3, r0
			&& eeprom_write4Bytes(address+OFFSET_DATEWEEKDAY_SEL,(uint8_t *)(& Alarm_Def->alarmParameters.RTC_AlarmDateWeekDaySel))\
			&& eeprom_write4Bytes(address+OFFSET_MASK,(uint8_t *)(& Alarm_Def->alarmParameters.RTC_AlarmMask))\
			&& eeprom_write(address+OFFSET_H12,Alarm_Def->alarmParameters.RTC_AlarmTime.RTC_H12)\
			&& eeprom_write(address+OFFSET_HOURS,Alarm_Def->alarmParameters.RTC_AlarmTime.RTC_Hours)\
			&& eeprom_write(address+OFFSET_MINUTES,Alarm_Def->alarmParameters.RTC_AlarmTime.RTC_Minutes)\
			&& eeprom_write(address+OFFSET_SECONDS,Alarm_Def->alarmParameters.RTC_AlarmTime.RTC_Seconds));
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d05a      	beq.n	8000aa4 <ClockManagement_saveAlarm+0xd4>
 * @param 	Alarm_Def: the alarm setitngs
 * @retval	ErrorStatus
 */
ErrorStatus ClockManagement_saveAlarm(Alarm_Definition * Alarm_Def, uint16_t address){
	return (ErrorStatus) (eeprom_writeNBytes(address+OFFSET_NAME,(uint8_t *)(Alarm_Def->alarmName),NAME_SIZE) \
			&& eeprom_write(address+OFFSET_DATEWEEKDAY,Alarm_Def->alarmParameters.RTC_AlarmDateWeekDay)\
 80009ee:	887b      	ldrh	r3, [r7, #2]
 80009f0:	331f      	adds	r3, #31
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80009fa:	4619      	mov	r1, r3
 80009fc:	4610      	mov	r0, r2
 80009fe:	f000 fb63 	bl	80010c8 <eeprom_write>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d04d      	beq.n	8000aa4 <ClockManagement_saveAlarm+0xd4>
			&& eeprom_write4Bytes(address+OFFSET_DATEWEEKDAY_SEL,(uint8_t *)(& Alarm_Def->alarmParameters.RTC_AlarmDateWeekDaySel))\
 8000a08:	887b      	ldrh	r3, [r7, #2]
 8000a0a:	3320      	adds	r3, #32
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3328      	adds	r3, #40	; 0x28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4610      	mov	r0, r2
 8000a16:	f000 fd95 	bl	8001544 <eeprom_write4Bytes>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d041      	beq.n	8000aa4 <ClockManagement_saveAlarm+0xd4>
			&& eeprom_write4Bytes(address+OFFSET_MASK,(uint8_t *)(& Alarm_Def->alarmParameters.RTC_AlarmMask))\
 8000a20:	887b      	ldrh	r3, [r7, #2]
 8000a22:	3324      	adds	r3, #36	; 0x24
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3324      	adds	r3, #36	; 0x24
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4610      	mov	r0, r2
 8000a2e:	f000 fd89 	bl	8001544 <eeprom_write4Bytes>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d035      	beq.n	8000aa4 <ClockManagement_saveAlarm+0xd4>
			&& eeprom_write(address+OFFSET_H12,Alarm_Def->alarmParameters.RTC_AlarmTime.RTC_H12)\
 8000a38:	887b      	ldrh	r3, [r7, #2]
 8000a3a:	3328      	adds	r3, #40	; 0x28
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000a44:	4619      	mov	r1, r3
 8000a46:	4610      	mov	r0, r2
 8000a48:	f000 fb3e 	bl	80010c8 <eeprom_write>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d028      	beq.n	8000aa4 <ClockManagement_saveAlarm+0xd4>
			&& eeprom_write(address+OFFSET_HOURS,Alarm_Def->alarmParameters.RTC_AlarmTime.RTC_Hours)\
 8000a52:	887b      	ldrh	r3, [r7, #2]
 8000a54:	3329      	adds	r3, #41	; 0x29
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4610      	mov	r0, r2
 8000a62:	f000 fb31 	bl	80010c8 <eeprom_write>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d01b      	beq.n	8000aa4 <ClockManagement_saveAlarm+0xd4>
			&& eeprom_write(address+OFFSET_MINUTES,Alarm_Def->alarmParameters.RTC_AlarmTime.RTC_Minutes)\
 8000a6c:	887b      	ldrh	r3, [r7, #2]
 8000a6e:	332a      	adds	r3, #42	; 0x2a
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	f000 fb24 	bl	80010c8 <eeprom_write>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d00e      	beq.n	8000aa4 <ClockManagement_saveAlarm+0xd4>
			&& eeprom_write(address+OFFSET_SECONDS,Alarm_Def->alarmParameters.RTC_AlarmTime.RTC_Seconds));
 8000a86:	887b      	ldrh	r3, [r7, #2]
 8000a88:	332b      	adds	r3, #43	; 0x2b
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000a92:	4619      	mov	r1, r3
 8000a94:	4610      	mov	r0, r2
 8000a96:	f000 fb17 	bl	80010c8 <eeprom_write>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <ClockManagement_saveAlarm+0xd4>
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e000      	b.n	8000aa6 <ClockManagement_saveAlarm+0xd6>
 8000aa4:	2300      	movs	r3, #0
 * 				H12, Hours, Minutes, Seconds
 * @param 	Alarm_Def: the alarm setitngs
 * @retval	ErrorStatus
 */
ErrorStatus ClockManagement_saveAlarm(Alarm_Definition * Alarm_Def, uint16_t address){
	return (ErrorStatus) (eeprom_writeNBytes(address+OFFSET_NAME,(uint8_t *)(Alarm_Def->alarmName),NAME_SIZE) \
 8000aa6:	b2db      	uxtb	r3, r3
			&& eeprom_write4Bytes(address+OFFSET_MASK,(uint8_t *)(& Alarm_Def->alarmParameters.RTC_AlarmMask))\
			&& eeprom_write(address+OFFSET_H12,Alarm_Def->alarmParameters.RTC_AlarmTime.RTC_H12)\
			&& eeprom_write(address+OFFSET_HOURS,Alarm_Def->alarmParameters.RTC_AlarmTime.RTC_Hours)\
			&& eeprom_write(address+OFFSET_MINUTES,Alarm_Def->alarmParameters.RTC_AlarmTime.RTC_Minutes)\
			&& eeprom_write(address+OFFSET_SECONDS,Alarm_Def->alarmParameters.RTC_AlarmTime.RTC_Seconds));
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <ClockManagement_saveTime>:
 * @note	Save H12, Hours, Minutes, and Seconds in
 * 				that order
 * @param 	Time_Def: the time setitngs
 * @retval	ErrorStatus
 */
ErrorStatus ClockManagement_saveTime(RTC_TimeTypeDef * Time_Def){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	return (ErrorStatus)(eeprom_write(TIME_BASE_ADDRESS, Time_Def->RTC_H12)\
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	78db      	ldrb	r3, [r3, #3]
 8000abc:	4619      	mov	r1, r3
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f000 fb02 	bl	80010c8 <eeprom_write>
 8000ac4:	4603      	mov	r3, r0
			&& eeprom_write(TIME_BASE_ADDRESS+0x01, Time_Def->RTC_Hours)\
			&& eeprom_write(TIME_BASE_ADDRESS+0x02, Time_Def->RTC_Minutes)\
			&& eeprom_write(TIME_BASE_ADDRESS+0x03, Time_Def->RTC_Seconds));
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d01c      	beq.n	8000b04 <ClockManagement_saveTime+0x54>
 * @param 	Time_Def: the time setitngs
 * @retval	ErrorStatus
 */
ErrorStatus ClockManagement_saveTime(RTC_TimeTypeDef * Time_Def){
	return (ErrorStatus)(eeprom_write(TIME_BASE_ADDRESS, Time_Def->RTC_H12)\
			&& eeprom_write(TIME_BASE_ADDRESS+0x01, Time_Def->RTC_Hours)\
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f000 faf9 	bl	80010c8 <eeprom_write>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d013      	beq.n	8000b04 <ClockManagement_saveTime+0x54>
			&& eeprom_write(TIME_BASE_ADDRESS+0x02, Time_Def->RTC_Minutes)\
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	785b      	ldrb	r3, [r3, #1]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	f000 faf0 	bl	80010c8 <eeprom_write>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d00a      	beq.n	8000b04 <ClockManagement_saveTime+0x54>
			&& eeprom_write(TIME_BASE_ADDRESS+0x03, Time_Def->RTC_Seconds));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	789b      	ldrb	r3, [r3, #2]
 8000af2:	4619      	mov	r1, r3
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 fae7 	bl	80010c8 <eeprom_write>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <ClockManagement_saveTime+0x54>
 8000b00:	2301      	movs	r3, #1
 8000b02:	e000      	b.n	8000b06 <ClockManagement_saveTime+0x56>
 8000b04:	2300      	movs	r3, #0
 * 				that order
 * @param 	Time_Def: the time setitngs
 * @retval	ErrorStatus
 */
ErrorStatus ClockManagement_saveTime(RTC_TimeTypeDef * Time_Def){
	return (ErrorStatus)(eeprom_write(TIME_BASE_ADDRESS, Time_Def->RTC_H12)\
 8000b06:	b2db      	uxtb	r3, r3
			&& eeprom_write(TIME_BASE_ADDRESS+0x01, Time_Def->RTC_Hours)\
			&& eeprom_write(TIME_BASE_ADDRESS+0x02, Time_Def->RTC_Minutes)\
			&& eeprom_write(TIME_BASE_ADDRESS+0x03, Time_Def->RTC_Seconds));
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <ClockManagement_saveDate>:
 * @note	Save Date, Month, WeekDay, and Year in
 * 				that order
 * @param 	Date_Def: the date setitngs
 * @retval	ErrorStatus
 */
ErrorStatus ClockManagement_saveDate(RTC_DateTypeDef * Date_Def){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	return (ErrorStatus) (eeprom_write(DATE_BASE_ADDRESS, Date_Def->RTC_Date)\
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	789b      	ldrb	r3, [r3, #2]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	2004      	movs	r0, #4
 8000b20:	f000 fad2 	bl	80010c8 <eeprom_write>
 8000b24:	4603      	mov	r3, r0
			&& eeprom_write(DATE_BASE_ADDRESS+1, Date_Def->RTC_Month)\
			&& eeprom_write(DATE_BASE_ADDRESS+2, Date_Def->RTC_WeekDay)\
			&& eeprom_write(DATE_BASE_ADDRESS+3, Date_Def->RTC_Year));
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d01c      	beq.n	8000b64 <ClockManagement_saveDate+0x54>
 * @param 	Date_Def: the date setitngs
 * @retval	ErrorStatus
 */
ErrorStatus ClockManagement_saveDate(RTC_DateTypeDef * Date_Def){
	return (ErrorStatus) (eeprom_write(DATE_BASE_ADDRESS, Date_Def->RTC_Date)\
			&& eeprom_write(DATE_BASE_ADDRESS+1, Date_Def->RTC_Month)\
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	785b      	ldrb	r3, [r3, #1]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	2005      	movs	r0, #5
 8000b32:	f000 fac9 	bl	80010c8 <eeprom_write>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d013      	beq.n	8000b64 <ClockManagement_saveDate+0x54>
			&& eeprom_write(DATE_BASE_ADDRESS+2, Date_Def->RTC_WeekDay)\
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	2006      	movs	r0, #6
 8000b44:	f000 fac0 	bl	80010c8 <eeprom_write>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d00a      	beq.n	8000b64 <ClockManagement_saveDate+0x54>
			&& eeprom_write(DATE_BASE_ADDRESS+3, Date_Def->RTC_Year));
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	78db      	ldrb	r3, [r3, #3]
 8000b52:	4619      	mov	r1, r3
 8000b54:	2007      	movs	r0, #7
 8000b56:	f000 fab7 	bl	80010c8 <eeprom_write>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <ClockManagement_saveDate+0x54>
 8000b60:	2301      	movs	r3, #1
 8000b62:	e000      	b.n	8000b66 <ClockManagement_saveDate+0x56>
 8000b64:	2300      	movs	r3, #0
 * 				that order
 * @param 	Date_Def: the date setitngs
 * @retval	ErrorStatus
 */
ErrorStatus ClockManagement_saveDate(RTC_DateTypeDef * Date_Def){
	return (ErrorStatus) (eeprom_write(DATE_BASE_ADDRESS, Date_Def->RTC_Date)\
 8000b66:	b2db      	uxtb	r3, r3
			&& eeprom_write(DATE_BASE_ADDRESS+1, Date_Def->RTC_Month)\
			&& eeprom_write(DATE_BASE_ADDRESS+2, Date_Def->RTC_WeekDay)\
			&& eeprom_write(DATE_BASE_ADDRESS+3, Date_Def->RTC_Year));
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <ClockManagement_loadAlarm>:
 * @note	Load in this order: Name, DateWeekDay, DateWeekDaySel, Mask
 * 				H12, Hours, Minutes, Seconds
 * @param 	index: the index in memory of the alarm
 * @retval	Alarm_Definition
 */
Alarm_Definition ClockManagement_loadAlarm(uint16_t index){
 8000b70:	b5b0      	push	{r4, r5, r7, lr}
 8000b72:	b08e      	sub	sp, #56	; 0x38
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	807b      	strh	r3, [r7, #2]
	Alarm_Definition alarm;
	eeprom_readNBytes(index+OFFSET_NAME,(uint8_t *)alarm.alarmName,NAME_SIZE);
 8000b7c:	f107 0108 	add.w	r1, r7, #8
 8000b80:	887b      	ldrh	r3, [r7, #2]
 8000b82:	221f      	movs	r2, #31
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 fd3b 	bl	8001600 <eeprom_readNBytes>
	alarm.alarmParameters.RTC_AlarmDateWeekDay = eeprom_read(index+OFFSET_DATEWEEKDAY);
 8000b8a:	887b      	ldrh	r3, [r7, #2]
 8000b8c:	331f      	adds	r3, #31
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 fb4d 	bl	8001230 <eeprom_read>
 8000b96:	4603      	mov	r3, r0
 8000b98:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	alarm.alarmParameters.RTC_AlarmDateWeekDaySel = eeprom_read4Bytes(index+OFFSET_DATEWEEKDAY_SEL);
 8000b9c:	887b      	ldrh	r3, [r7, #2]
 8000b9e:	3320      	adds	r3, #32
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 fd04 	bl	80015b0 <eeprom_read4Bytes>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
	alarm.alarmParameters.RTC_AlarmMask = eeprom_read4Bytes(index+OFFSET_MASK);
 8000bac:	887b      	ldrh	r3, [r7, #2]
 8000bae:	3324      	adds	r3, #36	; 0x24
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 fcfc 	bl	80015b0 <eeprom_read4Bytes>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
	alarm.alarmParameters.RTC_AlarmTime.RTC_H12 = eeprom_read(index+OFFSET_H12);
 8000bbc:	887b      	ldrh	r3, [r7, #2]
 8000bbe:	3328      	adds	r3, #40	; 0x28
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 fb34 	bl	8001230 <eeprom_read>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	alarm.alarmParameters.RTC_AlarmTime.RTC_Hours = eeprom_read(index+OFFSET_HOURS);
 8000bce:	887b      	ldrh	r3, [r7, #2]
 8000bd0:	3329      	adds	r3, #41	; 0x29
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fb2b 	bl	8001230 <eeprom_read>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	alarm.alarmParameters.RTC_AlarmTime.RTC_Minutes = eeprom_read(index+OFFSET_MINUTES);
 8000be0:	887b      	ldrh	r3, [r7, #2]
 8000be2:	332a      	adds	r3, #42	; 0x2a
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fb22 	bl	8001230 <eeprom_read>
 8000bec:	4603      	mov	r3, r0
 8000bee:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	alarm.alarmParameters.RTC_AlarmTime.RTC_Seconds = eeprom_read(index+OFFSET_SECONDS);
 8000bf2:	887b      	ldrh	r3, [r7, #2]
 8000bf4:	332b      	adds	r3, #43	; 0x2b
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 fb19 	bl	8001230 <eeprom_read>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	return alarm;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	461d      	mov	r5, r3
 8000c08:	f107 0408 	add.w	r4, r7, #8
 8000c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c18:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	3738      	adds	r7, #56	; 0x38
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bdb0      	pop	{r4, r5, r7, pc}

08000c24 <ClockManagement_loadTime>:
 * @note	Load H12, Hours, Minutes, and Seconds in
 * 				that order
 * @param 	None
 * @retval	RTC_TimeTypeDef
 */
RTC_TimeTypeDef ClockManagement_loadTime(void){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef time;
	time.RTC_H12 = eeprom_read(TIME_BASE_ADDRESS);
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 fb00 	bl	8001230 <eeprom_read>
 8000c30:	4603      	mov	r3, r0
 8000c32:	70fb      	strb	r3, [r7, #3]
	time.RTC_Hours = eeprom_read(TIME_BASE_ADDRESS+0x01);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 fafb 	bl	8001230 <eeprom_read>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	703b      	strb	r3, [r7, #0]
	time.RTC_Minutes = eeprom_read(TIME_BASE_ADDRESS+0x02);
 8000c3e:	2002      	movs	r0, #2
 8000c40:	f000 faf6 	bl	8001230 <eeprom_read>
 8000c44:	4603      	mov	r3, r0
 8000c46:	707b      	strb	r3, [r7, #1]
	time.RTC_Seconds = eeprom_read(TIME_BASE_ADDRESS+0x03);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 faf1 	bl	8001230 <eeprom_read>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	70bb      	strb	r3, [r7, #2]
	return time;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	2300      	movs	r3, #0
 8000c58:	793a      	ldrb	r2, [r7, #4]
 8000c5a:	f362 0307 	bfi	r3, r2, #0, #8
 8000c5e:	797a      	ldrb	r2, [r7, #5]
 8000c60:	f362 230f 	bfi	r3, r2, #8, #8
 8000c64:	79ba      	ldrb	r2, [r7, #6]
 8000c66:	f362 4317 	bfi	r3, r2, #16, #8
 8000c6a:	79fa      	ldrb	r2, [r7, #7]
 8000c6c:	f362 631f 	bfi	r3, r2, #24, #8
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <ClockManagement_loadDate>:
 * @note	Load Date, Month, WeekDay, and Year in
 * 				that order
 * @param 	None
 * @retval	RTC_DateTypeDef
 */
RTC_DateTypeDef ClockManagement_loadDate(void){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
	RTC_DateTypeDef date;
	date.RTC_Date = eeprom_read(DATE_BASE_ADDRESS);
 8000c7e:	2004      	movs	r0, #4
 8000c80:	f000 fad6 	bl	8001230 <eeprom_read>
 8000c84:	4603      	mov	r3, r0
 8000c86:	70bb      	strb	r3, [r7, #2]
	date.RTC_Month = eeprom_read(DATE_BASE_ADDRESS+1);
 8000c88:	2005      	movs	r0, #5
 8000c8a:	f000 fad1 	bl	8001230 <eeprom_read>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	707b      	strb	r3, [r7, #1]
	date.RTC_WeekDay = eeprom_read(DATE_BASE_ADDRESS+2);
 8000c92:	2006      	movs	r0, #6
 8000c94:	f000 facc 	bl	8001230 <eeprom_read>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	703b      	strb	r3, [r7, #0]
	date.RTC_Year = eeprom_read(DATE_BASE_ADDRESS+3);
 8000c9c:	2007      	movs	r0, #7
 8000c9e:	f000 fac7 	bl	8001230 <eeprom_read>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	70fb      	strb	r3, [r7, #3]
	return date;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	2300      	movs	r3, #0
 8000cac:	793a      	ldrb	r2, [r7, #4]
 8000cae:	f362 0307 	bfi	r3, r2, #0, #8
 8000cb2:	797a      	ldrb	r2, [r7, #5]
 8000cb4:	f362 230f 	bfi	r3, r2, #8, #8
 8000cb8:	79ba      	ldrb	r2, [r7, #6]
 8000cba:	f362 4317 	bfi	r3, r2, #16, #8
 8000cbe:	79fa      	ldrb	r2, [r7, #7]
 8000cc0:	f362 631f 	bfi	r3, r2, #24, #8
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <bluetooth_init>:
/**
 * @brief	Initialize the bluetooth and set baudrate to 9600
 * @param 	None
 * @retval	None
 */
void bluetooth_init(void){
 8000ccc:	b5b0      	push	{r4, r5, r7, lr}
 8000cce:	b090      	sub	sp, #64	; 0x40
 8000cd0:	af00      	add	r7, sp, #0
	// Enable RCC for USART1, GPIOB
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	2010      	movs	r0, #16
 8000cd6:	f001 fe71 	bl	80029bc <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB|RCC_AHB1Periph_GPIOD,ENABLE);
 8000cda:	2101      	movs	r1, #1
 8000cdc:	200a      	movs	r0, #10
 8000cde:	f001 fe2d 	bl	800293c <RCC_AHB1PeriphClockCmd>
	// GPIO Configuration
	{
		GPIO_InitTypeDef GPIO_InitStructure;

		// Configure USART1 TX (PB6) as alternate function push-pull
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8000ce2:	23c0      	movs	r3, #192	; 0xc0
 8000ce4:	61bb      	str	r3, [r7, #24]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	773b      	strb	r3, [r7, #28]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000cea:	2300      	movs	r3, #0
 8000cec:	77bb      	strb	r3, [r7, #30]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	77fb      	strb	r3, [r7, #31]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	777b      	strb	r3, [r7, #29]

		GPIO_Init(GPIOB,&GPIO_InitStructure);
 8000cf6:	f107 0318 	add.w	r3, r7, #24
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4824      	ldr	r0, [pc, #144]	; (8000d90 <bluetooth_init+0xc4>)
 8000cfe:	f001 fc1b 	bl	8002538 <GPIO_Init>

		GPIO_PinAFConfig(GPIOB,GPIO_PinSource6,GPIO_AF_USART1);
 8000d02:	2207      	movs	r2, #7
 8000d04:	2106      	movs	r1, #6
 8000d06:	4822      	ldr	r0, [pc, #136]	; (8000d90 <bluetooth_init+0xc4>)
 8000d08:	f001 fcd6 	bl	80026b8 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOB,GPIO_PinSource7,GPIO_AF_USART1);
 8000d0c:	2207      	movs	r2, #7
 8000d0e:	2107      	movs	r1, #7
 8000d10:	481f      	ldr	r0, [pc, #124]	; (8000d90 <bluetooth_init+0xc4>)
 8000d12:	f001 fcd1 	bl	80026b8 <GPIO_PinAFConfig>

	// NVIC Configuration
	{
		NVIC_InitTypeDef NVIC_InitStructure;

		NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8000d16:	2325      	movs	r3, #37	; 0x25
 8000d18:	753b      	strb	r3, [r7, #20]
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	757b      	strb	r3, [r7, #21]
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	75bb      	strb	r3, [r7, #22]
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000d22:	2301      	movs	r3, #1
 8000d24:	75fb      	strb	r3, [r7, #23]

		NVIC_Init(&NVIC_InitStructure);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f001 f88c 	bl	8001e48 <NVIC_Init>

	// USART Configuration
	{
		USART_InitTypeDef USART_InitStructure;

		USART_InitStructure.USART_BaudRate = 9600;//38400;
 8000d30:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000d34:	607b      	str	r3, [r7, #4]
		USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000d36:	2300      	movs	r3, #0
 8000d38:	813b      	strh	r3, [r7, #8]
		USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	817b      	strh	r3, [r7, #10]
		USART_InitStructure.USART_Parity = USART_Parity_No;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	81bb      	strh	r3, [r7, #12]
		USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000d42:	2300      	movs	r3, #0
 8000d44:	823b      	strh	r3, [r7, #16]
		USART_InitStructure.USART_Mode = USART_Mode_Tx|USART_Mode_Rx;
 8000d46:	230c      	movs	r3, #12
 8000d48:	81fb      	strh	r3, [r7, #14]

		USART_Init(USART1,&USART_InitStructure);
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4811      	ldr	r0, [pc, #68]	; (8000d94 <bluetooth_init+0xc8>)
 8000d50:	f002 fa36 	bl	80031c0 <USART_Init>

		// Enable USART1 receive and transmission complete interrupts
		USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f240 5125 	movw	r1, #1317	; 0x525
 8000d5a:	480e      	ldr	r0, [pc, #56]	; (8000d94 <bluetooth_init+0xc8>)
 8000d5c:	f002 fb2c 	bl	80033b8 <USART_ITConfig>

		USART_Cmd(USART1,ENABLE);
 8000d60:	2101      	movs	r1, #1
 8000d62:	480c      	ldr	r0, [pc, #48]	; (8000d94 <bluetooth_init+0xc8>)
 8000d64:	f002 fae6 	bl	8003334 <USART_Cmd>

	}

	uint8_t welcome_str[] = " Welcome to NeoPixelClock!\r\n";
 8000d68:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <bluetooth_init+0xcc>)
 8000d6a:	f107 0420 	add.w	r4, r7, #32
 8000d6e:	461d      	mov	r5, r3
 8000d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d78:	c407      	stmia	r4!, {r0, r1, r2}
 8000d7a:	7023      	strb	r3, [r4, #0]
	bluetooth_send(welcome_str);
 8000d7c:	f107 0320 	add.w	r3, r7, #32
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 f893 	bl	8000eac <bluetooth_send>
}
 8000d86:	bf00      	nop
 8000d88:	3740      	adds	r7, #64	; 0x40
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40020400 	.word	0x40020400
 8000d94:	40011000 	.word	0x40011000
 8000d98:	08003a08 	.word	0x08003a08

08000d9c <USART1_IRQHandler>:
/**
 * @brief	USART1 Interrupt Handler
 * @param 	None
 * @retval	none
 */
void USART1_IRQHandler(void){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
	// Wait until reception
	while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE)==RESET);
 8000da2:	bf00      	nop
 8000da4:	2120      	movs	r1, #32
 8000da6:	4836      	ldr	r0, [pc, #216]	; (8000e80 <USART1_IRQHandler+0xe4>)
 8000da8:	f002 fb4e 	bl	8003448 <USART_GetFlagStatus>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d0f8      	beq.n	8000da4 <USART1_IRQHandler+0x8>
	uint8_t data = toupper(bluetooth_receive());
 8000db2:	f000 f8a1 	bl	8000ef8 <bluetooth_receive>
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <USART1_IRQHandler+0xe8>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d102      	bne.n	8000dd4 <USART1_IRQHandler+0x38>
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	3b20      	subs	r3, #32
 8000dd2:	e000      	b.n	8000dd6 <USART1_IRQHandler+0x3a>
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	71bb      	strb	r3, [r7, #6]
	if(data=='R'){
 8000dd8:	79bb      	ldrb	r3, [r7, #6]
 8000dda:	2b52      	cmp	r3, #82	; 0x52
 8000ddc:	d106      	bne.n	8000dec <USART1_IRQHandler+0x50>
		pixel_color='R';
 8000dde:	4b2a      	ldr	r3, [pc, #168]	; (8000e88 <USART1_IRQHandler+0xec>)
 8000de0:	2252      	movs	r2, #82	; 0x52
 8000de2:	701a      	strb	r2, [r3, #0]
		bluetooth_send((uint8_t *)"Red\n\r");
 8000de4:	4829      	ldr	r0, [pc, #164]	; (8000e8c <USART1_IRQHandler+0xf0>)
 8000de6:	f000 f861 	bl	8000eac <bluetooth_send>
	}
	else if(data=='W'){
		pixel_color='W';
		bluetooth_send((uint8_t *)"White\n\r");
	}
}
 8000dea:	e044      	b.n	8000e76 <USART1_IRQHandler+0xda>
	uint8_t data = toupper(bluetooth_receive());
	if(data=='R'){
		pixel_color='R';
		bluetooth_send((uint8_t *)"Red\n\r");
	}
	else if(data=='G'){
 8000dec:	79bb      	ldrb	r3, [r7, #6]
 8000dee:	2b47      	cmp	r3, #71	; 0x47
 8000df0:	d106      	bne.n	8000e00 <USART1_IRQHandler+0x64>
		pixel_color='G';
 8000df2:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <USART1_IRQHandler+0xec>)
 8000df4:	2247      	movs	r2, #71	; 0x47
 8000df6:	701a      	strb	r2, [r3, #0]
		bluetooth_send((uint8_t *)"Green\n\r");
 8000df8:	4825      	ldr	r0, [pc, #148]	; (8000e90 <USART1_IRQHandler+0xf4>)
 8000dfa:	f000 f857 	bl	8000eac <bluetooth_send>
	}
	else if(data=='W'){
		pixel_color='W';
		bluetooth_send((uint8_t *)"White\n\r");
	}
}
 8000dfe:	e03a      	b.n	8000e76 <USART1_IRQHandler+0xda>
	}
	else if(data=='G'){
		pixel_color='G';
		bluetooth_send((uint8_t *)"Green\n\r");
	}
	else if(data=='B'){
 8000e00:	79bb      	ldrb	r3, [r7, #6]
 8000e02:	2b42      	cmp	r3, #66	; 0x42
 8000e04:	d106      	bne.n	8000e14 <USART1_IRQHandler+0x78>
		pixel_color='B';
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <USART1_IRQHandler+0xec>)
 8000e08:	2242      	movs	r2, #66	; 0x42
 8000e0a:	701a      	strb	r2, [r3, #0]
		bluetooth_send((uint8_t *)"Blue\n\r");
 8000e0c:	4821      	ldr	r0, [pc, #132]	; (8000e94 <USART1_IRQHandler+0xf8>)
 8000e0e:	f000 f84d 	bl	8000eac <bluetooth_send>
	}
	else if(data=='W'){
		pixel_color='W';
		bluetooth_send((uint8_t *)"White\n\r");
	}
}
 8000e12:	e030      	b.n	8000e76 <USART1_IRQHandler+0xda>
	}
	else if(data=='B'){
		pixel_color='B';
		bluetooth_send((uint8_t *)"Blue\n\r");
	}
	else if(data=='Y'){
 8000e14:	79bb      	ldrb	r3, [r7, #6]
 8000e16:	2b59      	cmp	r3, #89	; 0x59
 8000e18:	d106      	bne.n	8000e28 <USART1_IRQHandler+0x8c>
		pixel_color='Y';
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <USART1_IRQHandler+0xec>)
 8000e1c:	2259      	movs	r2, #89	; 0x59
 8000e1e:	701a      	strb	r2, [r3, #0]
		bluetooth_send((uint8_t *)"Yellow\n\r");
 8000e20:	481d      	ldr	r0, [pc, #116]	; (8000e98 <USART1_IRQHandler+0xfc>)
 8000e22:	f000 f843 	bl	8000eac <bluetooth_send>
	}
	else if(data=='W'){
		pixel_color='W';
		bluetooth_send((uint8_t *)"White\n\r");
	}
}
 8000e26:	e026      	b.n	8000e76 <USART1_IRQHandler+0xda>
	}
	else if(data=='Y'){
		pixel_color='Y';
		bluetooth_send((uint8_t *)"Yellow\n\r");
	}
	else if(data=='M'){
 8000e28:	79bb      	ldrb	r3, [r7, #6]
 8000e2a:	2b4d      	cmp	r3, #77	; 0x4d
 8000e2c:	d106      	bne.n	8000e3c <USART1_IRQHandler+0xa0>
		pixel_color='M';
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <USART1_IRQHandler+0xec>)
 8000e30:	224d      	movs	r2, #77	; 0x4d
 8000e32:	701a      	strb	r2, [r3, #0]
		bluetooth_send((uint8_t *)"Magenta\n\r");
 8000e34:	4819      	ldr	r0, [pc, #100]	; (8000e9c <USART1_IRQHandler+0x100>)
 8000e36:	f000 f839 	bl	8000eac <bluetooth_send>
	}
	else if(data=='W'){
		pixel_color='W';
		bluetooth_send((uint8_t *)"White\n\r");
	}
}
 8000e3a:	e01c      	b.n	8000e76 <USART1_IRQHandler+0xda>
	}
	else if(data=='M'){
		pixel_color='M';
		bluetooth_send((uint8_t *)"Magenta\n\r");
	}
	else if(data=='C'){
 8000e3c:	79bb      	ldrb	r3, [r7, #6]
 8000e3e:	2b43      	cmp	r3, #67	; 0x43
 8000e40:	d106      	bne.n	8000e50 <USART1_IRQHandler+0xb4>
		pixel_color='C';
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <USART1_IRQHandler+0xec>)
 8000e44:	2243      	movs	r2, #67	; 0x43
 8000e46:	701a      	strb	r2, [r3, #0]
		bluetooth_send((uint8_t *)"Cyan\n\r");
 8000e48:	4815      	ldr	r0, [pc, #84]	; (8000ea0 <USART1_IRQHandler+0x104>)
 8000e4a:	f000 f82f 	bl	8000eac <bluetooth_send>
	}
	else if(data=='W'){
		pixel_color='W';
		bluetooth_send((uint8_t *)"White\n\r");
	}
}
 8000e4e:	e012      	b.n	8000e76 <USART1_IRQHandler+0xda>
	}
	else if(data=='C'){
		pixel_color='C';
		bluetooth_send((uint8_t *)"Cyan\n\r");
	}
	else if(data=='D'){
 8000e50:	79bb      	ldrb	r3, [r7, #6]
 8000e52:	2b44      	cmp	r3, #68	; 0x44
 8000e54:	d106      	bne.n	8000e64 <USART1_IRQHandler+0xc8>
		pixel_color='D';
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <USART1_IRQHandler+0xec>)
 8000e58:	2244      	movs	r2, #68	; 0x44
 8000e5a:	701a      	strb	r2, [r3, #0]
		bluetooth_send((uint8_t *)"Dark\n\r");
 8000e5c:	4811      	ldr	r0, [pc, #68]	; (8000ea4 <USART1_IRQHandler+0x108>)
 8000e5e:	f000 f825 	bl	8000eac <bluetooth_send>
	}
	else if(data=='W'){
		pixel_color='W';
		bluetooth_send((uint8_t *)"White\n\r");
	}
}
 8000e62:	e008      	b.n	8000e76 <USART1_IRQHandler+0xda>
	}
	else if(data=='D'){
		pixel_color='D';
		bluetooth_send((uint8_t *)"Dark\n\r");
	}
	else if(data=='W'){
 8000e64:	79bb      	ldrb	r3, [r7, #6]
 8000e66:	2b57      	cmp	r3, #87	; 0x57
 8000e68:	d105      	bne.n	8000e76 <USART1_IRQHandler+0xda>
		pixel_color='W';
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <USART1_IRQHandler+0xec>)
 8000e6c:	2257      	movs	r2, #87	; 0x57
 8000e6e:	701a      	strb	r2, [r3, #0]
		bluetooth_send((uint8_t *)"White\n\r");
 8000e70:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <USART1_IRQHandler+0x10c>)
 8000e72:	f000 f81b 	bl	8000eac <bluetooth_send>
	}
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40011000 	.word	0x40011000
 8000e84:	20000024 	.word	0x20000024
 8000e88:	20000380 	.word	0x20000380
 8000e8c:	08003a28 	.word	0x08003a28
 8000e90:	08003a30 	.word	0x08003a30
 8000e94:	08003a38 	.word	0x08003a38
 8000e98:	08003a40 	.word	0x08003a40
 8000e9c:	08003a4c 	.word	0x08003a4c
 8000ea0:	08003a58 	.word	0x08003a58
 8000ea4:	08003a60 	.word	0x08003a60
 8000ea8:	08003a68 	.word	0x08003a68

08000eac <bluetooth_send>:
/**
 * @brief 	send string to the hc-06
 * @param	data: string to be sent
 * @retval	None
 */
void bluetooth_send(uint8_t * data){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	uint32_t size = strlen((char *)data);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff f991 	bl	80001dc <strlen>
 8000eba:	60f8      	str	r0, [r7, #12]
	while(size--){
 8000ebc:	e010      	b.n	8000ee0 <bluetooth_send+0x34>
		USART_SendData(USART1,(uint16_t)*data++);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480a      	ldr	r0, [pc, #40]	; (8000ef4 <bluetooth_send+0x48>)
 8000ecc:	f002 fa52 	bl	8003374 <USART_SendData>
		while(USART_GetFlagStatus(USART1,USART_FLAG_TC)==RESET);
 8000ed0:	bf00      	nop
 8000ed2:	2140      	movs	r1, #64	; 0x40
 8000ed4:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <bluetooth_send+0x48>)
 8000ed6:	f002 fab7 	bl	8003448 <USART_GetFlagStatus>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0f8      	beq.n	8000ed2 <bluetooth_send+0x26>
 * @param	data: string to be sent
 * @retval	None
 */
void bluetooth_send(uint8_t * data){
	uint32_t size = strlen((char *)data);
	while(size--){
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	1e5a      	subs	r2, r3, #1
 8000ee4:	60fa      	str	r2, [r7, #12]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1e9      	bne.n	8000ebe <bluetooth_send+0x12>
		USART_SendData(USART1,(uint16_t)*data++);
		while(USART_GetFlagStatus(USART1,USART_FLAG_TC)==RESET);
	}
}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40011000 	.word	0x40011000

08000ef8 <bluetooth_receive>:
/**
 * @brief	receive a byte from hc-06
 * @param	None
 * @retval	An uint8_t byte of data
 */
uint8_t bluetooth_receive(void){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	return USART_ReceiveData(USART1);
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <bluetooth_receive+0x14>)
 8000efe:	f002 fa4b 	bl	8003398 <USART_ReceiveData>
 8000f02:	4603      	mov	r3, r0
 8000f04:	b2db      	uxtb	r3, r3
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40011000 	.word	0x40011000

08000f10 <clock_init>:
/**
 * @brief	Initialise the clock to 1Hz and setup peripherals for Alarm
 * @param	None
 * @retval	None
 */
void clock_init(void){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0

	/* RTC domain access */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE); // Power controller
 8000f16:	2101      	movs	r1, #1
 8000f18:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000f1c:	f001 fd2e 	bl	800297c <RCC_APB1PeriphClockCmd>
	PWR_BackupAccessCmd(ENABLE); // Backup access
 8000f20:	2001      	movs	r0, #1
 8000f22:	f001 fc13 	bl	800274c <PWR_BackupAccessCmd>

	RCC_RTCCLKConfig(RCC_RTCCLKSource_HSE_Div8); // RTC Clock source
 8000f26:	481c      	ldr	r0, [pc, #112]	; (8000f98 <clock_init+0x88>)
 8000f28:	f001 fcca 	bl	80028c0 <RCC_RTCCLKConfig>

	RCC_RTCCLKCmd(ENABLE); // Enable clock
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f001 fcf5 	bl	800291c <RCC_RTCCLKCmd>
	RTC_WaitForSynchro();
 8000f32:	f001 fe29 	bl	8002b88 <RTC_WaitForSynchro>

	/* Set clock frequency to 1Hz */
	{
		RTC_InitStruct.RTC_AsynchPrediv = RTC_PREDIV_A;
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <clock_init+0x8c>)
 8000f38:	227c      	movs	r2, #124	; 0x7c
 8000f3a:	605a      	str	r2, [r3, #4]
		RTC_InitStruct.RTC_SynchPrediv = RTC_PREDIV_S;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <clock_init+0x8c>)
 8000f3e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f42:	609a      	str	r2, [r3, #8]
		RTC_InitStruct.RTC_HourFormat = RTC_HourFormat_12;
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <clock_init+0x8c>)
 8000f46:	2240      	movs	r2, #64	; 0x40
 8000f48:	601a      	str	r2, [r3, #0]
		RTC_Init(&RTC_InitStruct);
 8000f4a:	4814      	ldr	r0, [pc, #80]	; (8000f9c <clock_init+0x8c>)
 8000f4c:	f001 fd96 	bl	8002a7c <RTC_Init>
	}

	/* EXTI configuration */
	{
		EXTI_ClearITPendingBit(EXTI_Line17);
 8000f50:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000f54:	f001 fae0 	bl	8002518 <EXTI_ClearITPendingBit>
		EXTI_InitStruct.EXTI_Line = EXTI_Line17;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <clock_init+0x90>)
 8000f5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f5e:	601a      	str	r2, [r3, #0]
		EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <clock_init+0x90>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	711a      	strb	r2, [r3, #4]
		EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <clock_init+0x90>)
 8000f68:	2208      	movs	r2, #8
 8000f6a:	715a      	strb	r2, [r3, #5]
		EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <clock_init+0x90>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	719a      	strb	r2, [r3, #6]
		EXTI_Init(&EXTI_InitStruct);
 8000f72:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <clock_init+0x90>)
 8000f74:	f001 fa5e 	bl	8002434 <EXTI_Init>
	}
	/* Enable Alarm interrupt */
	{
		NVIC_InitTypeDef NVIC_InitStruct;
		NVIC_InitStruct.NVIC_IRQChannel = RTC_Alarm_IRQn;
 8000f78:	2329      	movs	r3, #41	; 0x29
 8000f7a:	713b      	strb	r3, [r7, #4]
		NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	717b      	strb	r3, [r7, #5]
		NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	71bb      	strb	r3, [r7, #6]
		NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000f84:	2301      	movs	r3, #1
 8000f86:	71fb      	strb	r3, [r7, #7]
		NVIC_Init(&NVIC_InitStruct);
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 ff5c 	bl	8001e48 <NVIC_Init>
	}
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	00080300 	.word	0x00080300
 8000f9c:	2000035c 	.word	0x2000035c
 8000fa0:	20000378 	.word	0x20000378

08000fa4 <RTC_Alarm_IRQHandler>:
 * @brief	Alarm Handler
 * @param	None
 * @retval	None
 */

void RTC_Alarm_IRQHandler(void){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	/* ALARM A Detection */
	while(RTC_GetITStatus(RTC_IT_ALRA)==RESET);	// Wait for Alarm A event
 8000fa8:	bf00      	nop
 8000faa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000fae:	f001 fe27 	bl	8002c00 <RTC_GetITStatus>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0f8      	beq.n	8000faa <RTC_Alarm_IRQHandler+0x6>
	RTC_ClearITPendingBit(RTC_IT_ALRA);			// Clear Alarm A interrupt pending bit
 8000fb8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000fbc:	f001 fe54 	bl	8002c68 <RTC_ClearITPendingBit>
	EXTI_ClearITPendingBit(EXTI_Line17);		// Clear External Interrupt pending bit
 8000fc0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000fc4:	f001 faa8 	bl	8002518 <EXTI_ClearITPendingBit>

	/* TODO What need to be done when Alarm event occurs*/
	GPIO_ToggleBits(GPIOD, GPIO_Pin_13);
 8000fc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <RTC_Alarm_IRQHandler+0x34>)
 8000fce:	f001 fb61 	bl	8002694 <GPIO_ToggleBits>
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40020c00 	.word	0x40020c00

08000fdc <NPC_init>:
/**
 * @brief	Initialize all firmwares used by the NPC
 * @param	None
 * @retval	None
 */
void NPC_init(void){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	/* Initialise bluetooth */
	bluetooth_init();
 8000fe0:	f7ff fe74 	bl	8000ccc <bluetooth_init>
	/* Initialise neopixel */
	neopixel_init();
 8000fe4:	f000 fb30 	bl	8001648 <neopixel_init>
	/* Initialise clock */
	clock_init();
 8000fe8:	f7ff ff92 	bl	8000f10 <clock_init>
	/* Initialise eeprom*/
	eeprom_init();
 8000fec:	f000 f804 	bl	8000ff8 <eeprom_init>
	/* Initialise temperature */
	temperature_init();
 8000ff0:	f000 fd2c 	bl	8001a4c <temperature_init>
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <eeprom_init>:
/**
 * @brief Initialise communication to the eeprom
 * @param None
 * @retval None
 */
void eeprom_init(void){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
	/* RCC Configuration */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000ffe:	2101      	movs	r1, #1
 8001000:	2002      	movs	r0, #2
 8001002:	f001 fc9b 	bl	800293c <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001006:	2101      	movs	r1, #1
 8001008:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800100c:	f001 fcb6 	bl	800297c <RCC_APB1PeriphClockCmd>

	/* GPIO Configuration */
	// MOSI, MISO, CLK configuration
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001010:	2302      	movs	r3, #2
 8001012:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001014:	2300      	movs	r3, #0
 8001016:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 800101c:	2302      	movs	r3, #2
 800101e:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15;
 8001020:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001024:	61bb      	str	r3, [r7, #24]
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 0318 	add.w	r3, r7, #24
 800102a:	4619      	mov	r1, r3
 800102c:	4824      	ldr	r0, [pc, #144]	; (80010c0 <eeprom_init+0xc8>)
 800102e:	f001 fa83 	bl	8002538 <GPIO_Init>
	// CS configuration
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12;
 8001032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001036:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8001038:	2301      	movs	r3, #1
 800103a:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800103c:	2300      	movs	r3, #0
 800103e:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8001040:	2302      	movs	r3, #2
 8001042:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001044:	f107 0318 	add.w	r3, r7, #24
 8001048:	4619      	mov	r1, r3
 800104a:	481d      	ldr	r0, [pc, #116]	; (80010c0 <eeprom_init+0xc8>)
 800104c:	f001 fa74 	bl	8002538 <GPIO_Init>

	GPIO_SetBits(GPIOB, GPIO_Pin_12); // set CS High
 8001050:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001054:	481a      	ldr	r0, [pc, #104]	; (80010c0 <eeprom_init+0xc8>)
 8001056:	f001 fafd 	bl	8002654 <GPIO_SetBits>
	// Configuring MISO,MOSI,CLK as Alternate function of SPI2
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource13, GPIO_AF_SPI2);
 800105a:	2205      	movs	r2, #5
 800105c:	210d      	movs	r1, #13
 800105e:	4818      	ldr	r0, [pc, #96]	; (80010c0 <eeprom_init+0xc8>)
 8001060:	f001 fb2a 	bl	80026b8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource14, GPIO_AF_SPI2);
 8001064:	2205      	movs	r2, #5
 8001066:	210e      	movs	r1, #14
 8001068:	4815      	ldr	r0, [pc, #84]	; (80010c0 <eeprom_init+0xc8>)
 800106a:	f001 fb25 	bl	80026b8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource15, GPIO_AF_SPI2);
 800106e:	2205      	movs	r2, #5
 8001070:	210f      	movs	r1, #15
 8001072:	4813      	ldr	r0, [pc, #76]	; (80010c0 <eeprom_init+0xc8>)
 8001074:	f001 fb20 	bl	80026b8 <GPIO_PinAFConfig>

	/* SPI Configuration */
	SPI_InitTypeDef SPI_InitStrcut;
	SPI_I2S_DeInit(SPI2);
 8001078:	4812      	ldr	r0, [pc, #72]	; (80010c4 <eeprom_init+0xcc>)
 800107a:	f001 fe13 	bl	8002ca4 <SPI_I2S_DeInit>
	SPI_InitStrcut.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 800107e:	2318      	movs	r3, #24
 8001080:	823b      	strh	r3, [r7, #16]
	SPI_InitStrcut.SPI_CPHA = SPI_CPHA_1Edge;
 8001082:	2300      	movs	r3, #0
 8001084:	81bb      	strh	r3, [r7, #12]
	SPI_InitStrcut.SPI_CPOL = SPI_CPOL_Low;
 8001086:	2300      	movs	r3, #0
 8001088:	817b      	strh	r3, [r7, #10]
	SPI_InitStrcut.SPI_CRCPolynomial = 7;
 800108a:	2307      	movs	r3, #7
 800108c:	82bb      	strh	r3, [r7, #20]
	SPI_InitStrcut.SPI_DataSize = SPI_DataSize_8b;
 800108e:	2300      	movs	r3, #0
 8001090:	813b      	strh	r3, [r7, #8]
	SPI_InitStrcut.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001092:	2300      	movs	r3, #0
 8001094:	80bb      	strh	r3, [r7, #4]
	SPI_InitStrcut.SPI_FirstBit = SPI_FirstBit_MSB;
 8001096:	2300      	movs	r3, #0
 8001098:	827b      	strh	r3, [r7, #18]
	SPI_InitStrcut.SPI_Mode = SPI_Mode_Master;
 800109a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800109e:	80fb      	strh	r3, [r7, #6]
	SPI_InitStrcut.SPI_NSS = SPI_NSS_Soft;
 80010a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010a4:	81fb      	strh	r3, [r7, #14]

	SPI_Init(SPI2, &SPI_InitStrcut);
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <eeprom_init+0xcc>)
 80010ac:	f001 fe68 	bl	8002d80 <SPI_Init>
	SPI_Cmd(SPI2, ENABLE);
 80010b0:	2101      	movs	r1, #1
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <eeprom_init+0xcc>)
 80010b4:	f001 fea8 	bl	8002e08 <SPI_Cmd>
}
 80010b8:	bf00      	nop
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40020400 	.word	0x40020400
 80010c4:	40003800 	.word	0x40003800

080010c8 <eeprom_write>:
 * @brief	Write a byte to the eeprom
 * @param	address:	The address of th memory
 * @param	data:	The data to be written to the memory
 * @retval 	None
 */
ErrorStatus eeprom_write(uint16_t address, uint8_t data){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	80fb      	strh	r3, [r7, #6]
 80010d4:	4613      	mov	r3, r2
 80010d6:	717b      	strb	r3, [r7, #5]
	if(address+1 > EEPROM_SIZE) return ERROR;
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	3301      	adds	r3, #1
 80010dc:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80010e0:	dd01      	ble.n	80010e6 <eeprom_write+0x1e>
 80010e2:	2300      	movs	r3, #0
 80010e4:	e09b      	b.n	800121e <eeprom_write+0x156>
	else{
		// write enable latch
		GPIO_ResetBits(GPIOB, GPIO_Pin_12);
 80010e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ea:	484f      	ldr	r0, [pc, #316]	; (8001228 <eeprom_write+0x160>)
 80010ec:	f001 fac2 	bl	8002674 <GPIO_ResetBits>
		delay(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f000 fd4f 	bl	8001b94 <delay>
		while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)==RESET);
 80010f6:	bf00      	nop
 80010f8:	2102      	movs	r1, #2
 80010fa:	484c      	ldr	r0, [pc, #304]	; (800122c <eeprom_write+0x164>)
 80010fc:	f001 fec2 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f8      	beq.n	80010f8 <eeprom_write+0x30>
		SPI_I2S_SendData(SPI2,WREN);
 8001106:	2106      	movs	r1, #6
 8001108:	4848      	ldr	r0, [pc, #288]	; (800122c <eeprom_write+0x164>)
 800110a:	f001 feab 	bl	8002e64 <SPI_I2S_SendData>
		while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE)==RESET);
 800110e:	bf00      	nop
 8001110:	2101      	movs	r1, #1
 8001112:	4846      	ldr	r0, [pc, #280]	; (800122c <eeprom_write+0x164>)
 8001114:	f001 feb6 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f8      	beq.n	8001110 <eeprom_write+0x48>
		SPI_I2S_ReceiveData(SPI2); // junk
 800111e:	4843      	ldr	r0, [pc, #268]	; (800122c <eeprom_write+0x164>)
 8001120:	f001 fe92 	bl	8002e48 <SPI_I2S_ReceiveData>
		GPIO_SetBits(GPIOB, GPIO_Pin_12);
 8001124:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001128:	483f      	ldr	r0, [pc, #252]	; (8001228 <eeprom_write+0x160>)
 800112a:	f001 fa93 	bl	8002654 <GPIO_SetBits>
		delay(5000);
 800112e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001132:	f000 fd2f 	bl	8001b94 <delay>

		// start transmission
		GPIO_ResetBits(GPIOB, GPIO_Pin_12);
 8001136:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800113a:	483b      	ldr	r0, [pc, #236]	; (8001228 <eeprom_write+0x160>)
 800113c:	f001 fa9a 	bl	8002674 <GPIO_ResetBits>
		delay(1);
 8001140:	2001      	movs	r0, #1
 8001142:	f000 fd27 	bl	8001b94 <delay>
		// send write instruction
		while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)==RESET);
 8001146:	bf00      	nop
 8001148:	2102      	movs	r1, #2
 800114a:	4838      	ldr	r0, [pc, #224]	; (800122c <eeprom_write+0x164>)
 800114c:	f001 fe9a 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f8      	beq.n	8001148 <eeprom_write+0x80>
		SPI_I2S_SendData(SPI2,WRITE);
 8001156:	2102      	movs	r1, #2
 8001158:	4834      	ldr	r0, [pc, #208]	; (800122c <eeprom_write+0x164>)
 800115a:	f001 fe83 	bl	8002e64 <SPI_I2S_SendData>
		while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE)==RESET);
 800115e:	bf00      	nop
 8001160:	2101      	movs	r1, #1
 8001162:	4832      	ldr	r0, [pc, #200]	; (800122c <eeprom_write+0x164>)
 8001164:	f001 fe8e 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f8      	beq.n	8001160 <eeprom_write+0x98>
		SPI_I2S_ReceiveData(SPI2); // junk
 800116e:	482f      	ldr	r0, [pc, #188]	; (800122c <eeprom_write+0x164>)
 8001170:	f001 fe6a 	bl	8002e48 <SPI_I2S_ReceiveData>
		// send the address of the register
		while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)==RESET);
 8001174:	bf00      	nop
 8001176:	2102      	movs	r1, #2
 8001178:	482c      	ldr	r0, [pc, #176]	; (800122c <eeprom_write+0x164>)
 800117a:	f001 fe83 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0f8      	beq.n	8001176 <eeprom_write+0xae>
		SPI_I2S_SendData(SPI2, address>>8);
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	b29b      	uxth	r3, r3
 800118a:	4619      	mov	r1, r3
 800118c:	4827      	ldr	r0, [pc, #156]	; (800122c <eeprom_write+0x164>)
 800118e:	f001 fe69 	bl	8002e64 <SPI_I2S_SendData>
		while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE)==RESET);
 8001192:	bf00      	nop
 8001194:	2101      	movs	r1, #1
 8001196:	4825      	ldr	r0, [pc, #148]	; (800122c <eeprom_write+0x164>)
 8001198:	f001 fe74 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f8      	beq.n	8001194 <eeprom_write+0xcc>
		SPI_I2S_ReceiveData(SPI2); // junk
 80011a2:	4822      	ldr	r0, [pc, #136]	; (800122c <eeprom_write+0x164>)
 80011a4:	f001 fe50 	bl	8002e48 <SPI_I2S_ReceiveData>
		while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)==RESET);
 80011a8:	bf00      	nop
 80011aa:	2102      	movs	r1, #2
 80011ac:	481f      	ldr	r0, [pc, #124]	; (800122c <eeprom_write+0x164>)
 80011ae:	f001 fe69 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f8      	beq.n	80011aa <eeprom_write+0xe2>
		SPI_I2S_SendData(SPI2, address);
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	4619      	mov	r1, r3
 80011bc:	481b      	ldr	r0, [pc, #108]	; (800122c <eeprom_write+0x164>)
 80011be:	f001 fe51 	bl	8002e64 <SPI_I2S_SendData>
		while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE)==RESET);
 80011c2:	bf00      	nop
 80011c4:	2101      	movs	r1, #1
 80011c6:	4819      	ldr	r0, [pc, #100]	; (800122c <eeprom_write+0x164>)
 80011c8:	f001 fe5c 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f8      	beq.n	80011c4 <eeprom_write+0xfc>
		SPI_I2S_ReceiveData(SPI2); // junk
 80011d2:	4816      	ldr	r0, [pc, #88]	; (800122c <eeprom_write+0x164>)
 80011d4:	f001 fe38 	bl	8002e48 <SPI_I2S_ReceiveData>
		// send data
		while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)==RESET);
 80011d8:	bf00      	nop
 80011da:	2102      	movs	r1, #2
 80011dc:	4813      	ldr	r0, [pc, #76]	; (800122c <eeprom_write+0x164>)
 80011de:	f001 fe51 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0f8      	beq.n	80011da <eeprom_write+0x112>
		SPI_I2S_SendData(SPI2, data);
 80011e8:	797b      	ldrb	r3, [r7, #5]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	4619      	mov	r1, r3
 80011ee:	480f      	ldr	r0, [pc, #60]	; (800122c <eeprom_write+0x164>)
 80011f0:	f001 fe38 	bl	8002e64 <SPI_I2S_SendData>
		while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE)==RESET);
 80011f4:	bf00      	nop
 80011f6:	2101      	movs	r1, #1
 80011f8:	480c      	ldr	r0, [pc, #48]	; (800122c <eeprom_write+0x164>)
 80011fa:	f001 fe43 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f8      	beq.n	80011f6 <eeprom_write+0x12e>
		SPI_I2S_ReceiveData(SPI2); // junk
 8001204:	4809      	ldr	r0, [pc, #36]	; (800122c <eeprom_write+0x164>)
 8001206:	f001 fe1f 	bl	8002e48 <SPI_I2S_ReceiveData>

		// end transmission
		GPIO_SetBits(GPIOB, GPIO_Pin_12);
 800120a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <eeprom_write+0x160>)
 8001210:	f001 fa20 	bl	8002654 <GPIO_SetBits>
		delay(5000);
 8001214:	f241 3088 	movw	r0, #5000	; 0x1388
 8001218:	f000 fcbc 	bl	8001b94 <delay>
		return SUCCESS;
 800121c:	2301      	movs	r3, #1
	}
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40020400 	.word	0x40020400
 800122c:	40003800 	.word	0x40003800

08001230 <eeprom_read>:
/**
 * @brief	Read a byte from the eeprom
 * @param	address: The address of the memory
 * @retval 	uint8_t data from eeprom
 */
uint8_t eeprom_read(uint16_t address){
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	80fb      	strh	r3, [r7, #6]
	uint8_t value;
	GPIO_ResetBits(GPIOB,GPIO_Pin_12); // CS Low -- start transmission
 800123a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123e:	4833      	ldr	r0, [pc, #204]	; (800130c <eeprom_read+0xdc>)
 8001240:	f001 fa18 	bl	8002674 <GPIO_ResetBits>
	delay(1);
 8001244:	2001      	movs	r0, #1
 8001246:	f000 fca5 	bl	8001b94 <delay>

	// send read instruction
	while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)==RESET);
 800124a:	bf00      	nop
 800124c:	2102      	movs	r1, #2
 800124e:	4830      	ldr	r0, [pc, #192]	; (8001310 <eeprom_read+0xe0>)
 8001250:	f001 fe18 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0f8      	beq.n	800124c <eeprom_read+0x1c>

	SPI_I2S_SendData(SPI2,READ); // read instruction
 800125a:	2103      	movs	r1, #3
 800125c:	482c      	ldr	r0, [pc, #176]	; (8001310 <eeprom_read+0xe0>)
 800125e:	f001 fe01 	bl	8002e64 <SPI_I2S_SendData>
	while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_RXNE)==RESET);
 8001262:	bf00      	nop
 8001264:	2101      	movs	r1, #1
 8001266:	482a      	ldr	r0, [pc, #168]	; (8001310 <eeprom_read+0xe0>)
 8001268:	f001 fe0c 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f8      	beq.n	8001264 <eeprom_read+0x34>
	SPI_I2S_ReceiveData(SPI2); // junk data
 8001272:	4827      	ldr	r0, [pc, #156]	; (8001310 <eeprom_read+0xe0>)
 8001274:	f001 fde8 	bl	8002e48 <SPI_I2S_ReceiveData>
	// send 16 bits address register
	while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)==RESET);
 8001278:	bf00      	nop
 800127a:	2102      	movs	r1, #2
 800127c:	4824      	ldr	r0, [pc, #144]	; (8001310 <eeprom_read+0xe0>)
 800127e:	f001 fe01 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f8      	beq.n	800127a <eeprom_read+0x4a>
	SPI_I2S_SendData(SPI2,address>>8); // send address of register
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	0a1b      	lsrs	r3, r3, #8
 800128c:	b29b      	uxth	r3, r3
 800128e:	4619      	mov	r1, r3
 8001290:	481f      	ldr	r0, [pc, #124]	; (8001310 <eeprom_read+0xe0>)
 8001292:	f001 fde7 	bl	8002e64 <SPI_I2S_SendData>
	while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_RXNE)==RESET);
 8001296:	bf00      	nop
 8001298:	2101      	movs	r1, #1
 800129a:	481d      	ldr	r0, [pc, #116]	; (8001310 <eeprom_read+0xe0>)
 800129c:	f001 fdf2 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f8      	beq.n	8001298 <eeprom_read+0x68>
	SPI_I2S_ReceiveData(SPI2); // junk data
 80012a6:	481a      	ldr	r0, [pc, #104]	; (8001310 <eeprom_read+0xe0>)
 80012a8:	f001 fdce 	bl	8002e48 <SPI_I2S_ReceiveData>
	SPI_I2S_SendData(SPI2,address);
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	4619      	mov	r1, r3
 80012b0:	4817      	ldr	r0, [pc, #92]	; (8001310 <eeprom_read+0xe0>)
 80012b2:	f001 fdd7 	bl	8002e64 <SPI_I2S_SendData>
	while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_RXNE)==RESET);
 80012b6:	bf00      	nop
 80012b8:	2101      	movs	r1, #1
 80012ba:	4815      	ldr	r0, [pc, #84]	; (8001310 <eeprom_read+0xe0>)
 80012bc:	f001 fde2 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f8      	beq.n	80012b8 <eeprom_read+0x88>
	SPI_I2S_ReceiveData(SPI2); // junk data
 80012c6:	4812      	ldr	r0, [pc, #72]	; (8001310 <eeprom_read+0xe0>)
 80012c8:	f001 fdbe 	bl	8002e48 <SPI_I2S_ReceiveData>

	// get data
	SPI_I2S_SendData(SPI2,0x42);
 80012cc:	2142      	movs	r1, #66	; 0x42
 80012ce:	4810      	ldr	r0, [pc, #64]	; (8001310 <eeprom_read+0xe0>)
 80012d0:	f001 fdc8 	bl	8002e64 <SPI_I2S_SendData>
	while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_RXNE)==RESET);
 80012d4:	bf00      	nop
 80012d6:	2101      	movs	r1, #1
 80012d8:	480d      	ldr	r0, [pc, #52]	; (8001310 <eeprom_read+0xe0>)
 80012da:	f001 fdd3 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f8      	beq.n	80012d6 <eeprom_read+0xa6>
	value = SPI_I2S_ReceiveData(SPI2); // data
 80012e4:	480a      	ldr	r0, [pc, #40]	; (8001310 <eeprom_read+0xe0>)
 80012e6:	f001 fdaf 	bl	8002e48 <SPI_I2S_ReceiveData>
 80012ea:	4603      	mov	r3, r0
 80012ec:	73fb      	strb	r3, [r7, #15]

	GPIO_SetBits(GPIOB, GPIO_Pin_12); // CS High -- end transmission
 80012ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <eeprom_read+0xdc>)
 80012f4:	f001 f9ae 	bl	8002654 <GPIO_SetBits>
	delay(5000);
 80012f8:	f241 3088 	movw	r0, #5000	; 0x1388
 80012fc:	f000 fc4a 	bl	8001b94 <delay>
	return value;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40020400 	.word	0x40020400
 8001310:	40003800 	.word	0x40003800

08001314 <eeprom_write32Bytes>:
 * @brief	Write a page to the eeprom
 * @param	baseAddress: The base address of the page
 * @param 	data: An array of data to be send
 * @retval	None
 */
ErrorStatus eeprom_write32Bytes(uint16_t baseAddress, uint8_t *data){
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	80fb      	strh	r3, [r7, #6]
	if(baseAddress+PAGE_LENGTH > EEPROM_SIZE)
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	3320      	adds	r3, #32
 8001324:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001328:	dd01      	ble.n	800132e <eeprom_write32Bytes+0x1a>
		return ERROR;
 800132a:	2300      	movs	r3, #0
 800132c:	e0a7      	b.n	800147e <eeprom_write32Bytes+0x16a>
	else{
		// write enable latch
		GPIO_ResetBits(GPIOB, GPIO_Pin_12);
 800132e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001332:	4855      	ldr	r0, [pc, #340]	; (8001488 <eeprom_write32Bytes+0x174>)
 8001334:	f001 f99e 	bl	8002674 <GPIO_ResetBits>
		delay(1);
 8001338:	2001      	movs	r0, #1
 800133a:	f000 fc2b 	bl	8001b94 <delay>
		while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)==RESET);
 800133e:	bf00      	nop
 8001340:	2102      	movs	r1, #2
 8001342:	4852      	ldr	r0, [pc, #328]	; (800148c <eeprom_write32Bytes+0x178>)
 8001344:	f001 fd9e 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f8      	beq.n	8001340 <eeprom_write32Bytes+0x2c>
		SPI_I2S_SendData(SPI2,WREN);
 800134e:	2106      	movs	r1, #6
 8001350:	484e      	ldr	r0, [pc, #312]	; (800148c <eeprom_write32Bytes+0x178>)
 8001352:	f001 fd87 	bl	8002e64 <SPI_I2S_SendData>
		while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE)==RESET);
 8001356:	bf00      	nop
 8001358:	2101      	movs	r1, #1
 800135a:	484c      	ldr	r0, [pc, #304]	; (800148c <eeprom_write32Bytes+0x178>)
 800135c:	f001 fd92 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f8      	beq.n	8001358 <eeprom_write32Bytes+0x44>
		SPI_I2S_ReceiveData(SPI2); // junk
 8001366:	4849      	ldr	r0, [pc, #292]	; (800148c <eeprom_write32Bytes+0x178>)
 8001368:	f001 fd6e 	bl	8002e48 <SPI_I2S_ReceiveData>
		GPIO_SetBits(GPIOB, GPIO_Pin_12);
 800136c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001370:	4845      	ldr	r0, [pc, #276]	; (8001488 <eeprom_write32Bytes+0x174>)
 8001372:	f001 f96f 	bl	8002654 <GPIO_SetBits>
		delay(5000);
 8001376:	f241 3088 	movw	r0, #5000	; 0x1388
 800137a:	f000 fc0b 	bl	8001b94 <delay>

		// start transmission
		GPIO_ResetBits(GPIOB, GPIO_Pin_12);
 800137e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001382:	4841      	ldr	r0, [pc, #260]	; (8001488 <eeprom_write32Bytes+0x174>)
 8001384:	f001 f976 	bl	8002674 <GPIO_ResetBits>
		delay(1);
 8001388:	2001      	movs	r0, #1
 800138a:	f000 fc03 	bl	8001b94 <delay>
		// send write instruction
		while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)==RESET);
 800138e:	bf00      	nop
 8001390:	2102      	movs	r1, #2
 8001392:	483e      	ldr	r0, [pc, #248]	; (800148c <eeprom_write32Bytes+0x178>)
 8001394:	f001 fd76 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f8      	beq.n	8001390 <eeprom_write32Bytes+0x7c>
		SPI_I2S_SendData(SPI2,WRITE);
 800139e:	2102      	movs	r1, #2
 80013a0:	483a      	ldr	r0, [pc, #232]	; (800148c <eeprom_write32Bytes+0x178>)
 80013a2:	f001 fd5f 	bl	8002e64 <SPI_I2S_SendData>
		while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE)==RESET);
 80013a6:	bf00      	nop
 80013a8:	2101      	movs	r1, #1
 80013aa:	4838      	ldr	r0, [pc, #224]	; (800148c <eeprom_write32Bytes+0x178>)
 80013ac:	f001 fd6a 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f8      	beq.n	80013a8 <eeprom_write32Bytes+0x94>
		SPI_I2S_ReceiveData(SPI2); // junk
 80013b6:	4835      	ldr	r0, [pc, #212]	; (800148c <eeprom_write32Bytes+0x178>)
 80013b8:	f001 fd46 	bl	8002e48 <SPI_I2S_ReceiveData>
		// send the address of the register
		while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)==RESET);
 80013bc:	bf00      	nop
 80013be:	2102      	movs	r1, #2
 80013c0:	4832      	ldr	r0, [pc, #200]	; (800148c <eeprom_write32Bytes+0x178>)
 80013c2:	f001 fd5f 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f8      	beq.n	80013be <eeprom_write32Bytes+0xaa>
		SPI_I2S_SendData(SPI2, baseAddress>>8);
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	4619      	mov	r1, r3
 80013d4:	482d      	ldr	r0, [pc, #180]	; (800148c <eeprom_write32Bytes+0x178>)
 80013d6:	f001 fd45 	bl	8002e64 <SPI_I2S_SendData>
		while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE)==RESET);
 80013da:	bf00      	nop
 80013dc:	2101      	movs	r1, #1
 80013de:	482b      	ldr	r0, [pc, #172]	; (800148c <eeprom_write32Bytes+0x178>)
 80013e0:	f001 fd50 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f8      	beq.n	80013dc <eeprom_write32Bytes+0xc8>
		SPI_I2S_ReceiveData(SPI2); // junk
 80013ea:	4828      	ldr	r0, [pc, #160]	; (800148c <eeprom_write32Bytes+0x178>)
 80013ec:	f001 fd2c 	bl	8002e48 <SPI_I2S_ReceiveData>
		while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)==RESET);
 80013f0:	bf00      	nop
 80013f2:	2102      	movs	r1, #2
 80013f4:	4825      	ldr	r0, [pc, #148]	; (800148c <eeprom_write32Bytes+0x178>)
 80013f6:	f001 fd45 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f8      	beq.n	80013f2 <eeprom_write32Bytes+0xde>
		SPI_I2S_SendData(SPI2, baseAddress);
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	4619      	mov	r1, r3
 8001404:	4821      	ldr	r0, [pc, #132]	; (800148c <eeprom_write32Bytes+0x178>)
 8001406:	f001 fd2d 	bl	8002e64 <SPI_I2S_SendData>
		while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE)==RESET);
 800140a:	bf00      	nop
 800140c:	2101      	movs	r1, #1
 800140e:	481f      	ldr	r0, [pc, #124]	; (800148c <eeprom_write32Bytes+0x178>)
 8001410:	f001 fd38 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f8      	beq.n	800140c <eeprom_write32Bytes+0xf8>
		SPI_I2S_ReceiveData(SPI2); // junk
 800141a:	481c      	ldr	r0, [pc, #112]	; (800148c <eeprom_write32Bytes+0x178>)
 800141c:	f001 fd14 	bl	8002e48 <SPI_I2S_ReceiveData>
		// send data
		for(int i=0; i<PAGE_LENGTH; i++){
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	e01e      	b.n	8001464 <eeprom_write32Bytes+0x150>
			while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)==RESET);
 8001426:	bf00      	nop
 8001428:	2102      	movs	r1, #2
 800142a:	4818      	ldr	r0, [pc, #96]	; (800148c <eeprom_write32Bytes+0x178>)
 800142c:	f001 fd2a 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f8      	beq.n	8001428 <eeprom_write32Bytes+0x114>
			SPI_I2S_SendData(SPI2, data[i]);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	4413      	add	r3, r2
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b29b      	uxth	r3, r3
 8001440:	4619      	mov	r1, r3
 8001442:	4812      	ldr	r0, [pc, #72]	; (800148c <eeprom_write32Bytes+0x178>)
 8001444:	f001 fd0e 	bl	8002e64 <SPI_I2S_SendData>
			while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE)==RESET);
 8001448:	bf00      	nop
 800144a:	2101      	movs	r1, #1
 800144c:	480f      	ldr	r0, [pc, #60]	; (800148c <eeprom_write32Bytes+0x178>)
 800144e:	f001 fd19 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f8      	beq.n	800144a <eeprom_write32Bytes+0x136>
			SPI_I2S_ReceiveData(SPI2); // junk
 8001458:	480c      	ldr	r0, [pc, #48]	; (800148c <eeprom_write32Bytes+0x178>)
 800145a:	f001 fcf5 	bl	8002e48 <SPI_I2S_ReceiveData>
		while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)==RESET);
		SPI_I2S_SendData(SPI2, baseAddress);
		while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE)==RESET);
		SPI_I2S_ReceiveData(SPI2); // junk
		// send data
		for(int i=0; i<PAGE_LENGTH; i++){
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3301      	adds	r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b1f      	cmp	r3, #31
 8001468:	dddd      	ble.n	8001426 <eeprom_write32Bytes+0x112>
			SPI_I2S_SendData(SPI2, data[i]);
			while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE)==RESET);
			SPI_I2S_ReceiveData(SPI2); // junk
		}
		// end transmission
		GPIO_SetBits(GPIOB, GPIO_Pin_12);
 800146a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <eeprom_write32Bytes+0x174>)
 8001470:	f001 f8f0 	bl	8002654 <GPIO_SetBits>
		delay(5000);
 8001474:	f241 3088 	movw	r0, #5000	; 0x1388
 8001478:	f000 fb8c 	bl	8001b94 <delay>
		return SUCCESS;
 800147c:	2301      	movs	r3, #1
	}
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40020400 	.word	0x40020400
 800148c:	40003800 	.word	0x40003800

08001490 <eeprom_writeNBytes>:
 * @param	baseAddress: address of data
 * @param	data:	data to be written
 * @param	N:	number of data to write
 * @retval	ErrorStatus
 */
ErrorStatus eeprom_writeNBytes(uint16_t baseAddress, uint8_t *data, uint16_t N){
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	80fb      	strh	r3, [r7, #6]
 800149c:	4613      	mov	r3, r2
 800149e:	80bb      	strh	r3, [r7, #4]
	if(baseAddress+N <= EEPROM_SIZE){
 80014a0:	88fa      	ldrh	r2, [r7, #6]
 80014a2:	88bb      	ldrh	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80014aa:	dc45      	bgt.n	8001538 <eeprom_writeNBytes+0xa8>
		int i = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
		int div = N/PAGE_LENGTH;	// number of pages
 80014b0:	88bb      	ldrh	r3, [r7, #4]
 80014b2:	095b      	lsrs	r3, r3, #5
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	613b      	str	r3, [r7, #16]
		int res = N%PAGE_LENGTH;  	// number of data not represented as pages
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	60fb      	str	r3, [r7, #12]
		for(i=0; i<div; ++i)		// write each page
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	e012      	b.n	80014ec <eeprom_writeNBytes+0x5c>
			eeprom_write32Bytes(baseAddress+PAGE_LENGTH*i, &data[PAGE_LENGTH*i]);
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	015b      	lsls	r3, r3, #5
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	4413      	add	r3, r2
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	015b      	lsls	r3, r3, #5
 80014d8:	4619      	mov	r1, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	440b      	add	r3, r1
 80014de:	4619      	mov	r1, r3
 80014e0:	4610      	mov	r0, r2
 80014e2:	f7ff ff17 	bl	8001314 <eeprom_write32Bytes>
ErrorStatus eeprom_writeNBytes(uint16_t baseAddress, uint8_t *data, uint16_t N){
	if(baseAddress+N <= EEPROM_SIZE){
		int i = 0;
		int div = N/PAGE_LENGTH;	// number of pages
		int res = N%PAGE_LENGTH;  	// number of data not represented as pages
		for(i=0; i<div; ++i)		// write each page
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dbe8      	blt.n	80014c6 <eeprom_writeNBytes+0x36>
			eeprom_write32Bytes(baseAddress+PAGE_LENGTH*i, &data[PAGE_LENGTH*i]);
		for(i=0; i<res; ++i)		// write each data
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	e018      	b.n	800152c <eeprom_writeNBytes+0x9c>
			eeprom_write(baseAddress+div*PAGE_LENGTH+i,data[div*PAGE_LENGTH+i]);
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	015b      	lsls	r3, r3, #5
 8001500:	b29a      	uxth	r2, r3
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	4413      	add	r3, r2
 8001506:	b29a      	uxth	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4413      	add	r3, r2
 800150e:	b298      	uxth	r0, r3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	015a      	lsls	r2, r3, #5
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	4413      	add	r3, r2
 8001518:	461a      	mov	r2, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	4413      	add	r3, r2
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fdd1 	bl	80010c8 <eeprom_write>
		int i = 0;
		int div = N/PAGE_LENGTH;	// number of pages
		int res = N%PAGE_LENGTH;  	// number of data not represented as pages
		for(i=0; i<div; ++i)		// write each page
			eeprom_write32Bytes(baseAddress+PAGE_LENGTH*i, &data[PAGE_LENGTH*i]);
		for(i=0; i<res; ++i)		// write each data
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3301      	adds	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	429a      	cmp	r2, r3
 8001532:	dbe2      	blt.n	80014fa <eeprom_writeNBytes+0x6a>
			eeprom_write(baseAddress+div*PAGE_LENGTH+i,data[div*PAGE_LENGTH+i]);
		return SUCCESS;
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <eeprom_writeNBytes+0xaa>
	}
	else return ERROR;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop

08001544 <eeprom_write4Bytes>:
 * @brief	Write 4 bytes to the eeprom
 * @param	baseAddress: address of data
 * @param	data:	data to be written
 * @retval	ErrorStatus
 */
ErrorStatus eeprom_write4Bytes(uint16_t baseAddress, uint8_t *data){
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	80fb      	strh	r3, [r7, #6]
	if(baseAddress+4 <= EEPROM_SIZE){
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	3304      	adds	r3, #4
 8001554:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001558:	dc25      	bgt.n	80015a6 <eeprom_write4Bytes+0x62>
		int i;
		int data0,data1,data2,data3;
		data0=data[0];data1=data[1];data2=data[2];data3=data[3];
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	61bb      	str	r3, [r7, #24]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	3301      	adds	r3, #1
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	3302      	adds	r3, #2
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	3303      	adds	r3, #3
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	60fb      	str	r3, [r7, #12]
		for(i=0; i<4; ++i)		// write each data
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
 800157c:	e00e      	b.n	800159c <eeprom_write4Bytes+0x58>
			eeprom_write(baseAddress+i,data[i]);
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	b29a      	uxth	r2, r3
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	4413      	add	r3, r2
 8001586:	b298      	uxth	r0, r3
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	4413      	add	r3, r2
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f7ff fd99 	bl	80010c8 <eeprom_write>
ErrorStatus eeprom_write4Bytes(uint16_t baseAddress, uint8_t *data){
	if(baseAddress+4 <= EEPROM_SIZE){
		int i;
		int data0,data1,data2,data3;
		data0=data[0];data1=data[1];data2=data[2];data3=data[3];
		for(i=0; i<4; ++i)		// write each data
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3301      	adds	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	dded      	ble.n	800157e <eeprom_write4Bytes+0x3a>
			eeprom_write(baseAddress+i,data[i]);
		return SUCCESS;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <eeprom_write4Bytes+0x64>
	}
	else return ERROR;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3720      	adds	r7, #32
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <eeprom_read4Bytes>:
 * @brief	Read a 32byte from eeprom
 * @param	baseAddress
 * @retval 	uint32_t
 */

uint32_t eeprom_read4Bytes(uint16_t baseAddress){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	80fb      	strh	r3, [r7, #6]
	// TODO more error checking
	uint32_t retval = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
	int i;
	for(i=0; i<4; ++i){
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	e015      	b.n	80015f0 <eeprom_read4Bytes+0x40>
		uint8_t data = eeprom_read(baseAddress+i);
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	4413      	add	r3, r2
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fe2e 	bl	8001230 <eeprom_read>
 80015d4:	4603      	mov	r3, r0
 80015d6:	73fb      	strb	r3, [r7, #15]
		retval |= data <<i*8; // little endian
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	617b      	str	r3, [r7, #20]

uint32_t eeprom_read4Bytes(uint16_t baseAddress){
	// TODO more error checking
	uint32_t retval = 0;
	int i;
	for(i=0; i<4; ++i){
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	3301      	adds	r3, #1
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	dde6      	ble.n	80015c4 <eeprom_read4Bytes+0x14>
		uint8_t data = eeprom_read(baseAddress+i);
		retval |= data <<i*8; // little endian
	}
	return retval;
 80015f6:	697b      	ldr	r3, [r7, #20]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <eeprom_readNBytes>:

/**
 *
 */
void eeprom_readNBytes(uint16_t baseAddress,uint8_t * data, uint16_t N){
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	80fb      	strh	r3, [r7, #6]
 800160c:	4613      	mov	r3, r2
 800160e:	80bb      	strh	r3, [r7, #4]
	int i;
	for(i=0; i<N; ++i)
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	e00f      	b.n	8001636 <eeprom_readNBytes+0x36>
		*(data+i) =eeprom_read(baseAddress+i);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	18d4      	adds	r4, r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	b29a      	uxth	r2, r3
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	4413      	add	r3, r2
 8001624:	b29b      	uxth	r3, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fe02 	bl	8001230 <eeprom_read>
 800162c:	4603      	mov	r3, r0
 800162e:	7023      	strb	r3, [r4, #0]
/**
 *
 */
void eeprom_readNBytes(uint16_t baseAddress,uint8_t * data, uint16_t N){
	int i;
	for(i=0; i<N; ++i)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3301      	adds	r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	88ba      	ldrh	r2, [r7, #4]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	429a      	cmp	r2, r3
 800163c:	dceb      	bgt.n	8001616 <eeprom_readNBytes+0x16>
		*(data+i) =eeprom_read(baseAddress+i);
}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	bd90      	pop	{r4, r7, pc}
 8001646:	bf00      	nop

08001648 <neopixel_init>:
/**
 * @brief	Initialise the neopixel
 * @param	None
 * @retval	None
 */
void neopixel_init(void){
 8001648:	b580      	push	{r7, lr}
 800164a:	b08c      	sub	sp, #48	; 0x30
 800164c:	af00      	add	r7, sp, #0

	// Init data
	neopixel_dataInit();
 800164e:	f000 f89f 	bl	8001790 <neopixel_dataInit>

	// Enable RCC for timer TIM2, GPIOA and DMA1
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001652:	2101      	movs	r1, #1
 8001654:	2001      	movs	r0, #1
 8001656:	f001 f991 	bl	800297c <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800165a:	2101      	movs	r1, #1
 800165c:	2001      	movs	r0, #1
 800165e:	f001 f96d 	bl	800293c <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 8001662:	2101      	movs	r1, #1
 8001664:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001668:	f001 f968 	bl	800293c <RCC_AHB1PeriphClockCmd>

	// GPIO management
	{
		GPIO_InitTypeDef GPIO_InitStruct;

		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800166c:	2302      	movs	r3, #2
 800166e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001672:	2300      	movs	r3, #0
 8001674:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		GPIO_InitStruct.GPIO_Pin = GPIO_Pin_5;
 8001678:	2320      	movs	r3, #32
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 800167c:	2302      	movs	r3, #2
 800167e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		GPIO_PinAFConfig(GPIOA,GPIO_PinSource5,GPIO_AF_TIM2);
 8001682:	2201      	movs	r2, #1
 8001684:	2105      	movs	r1, #5
 8001686:	4825      	ldr	r0, [pc, #148]	; (800171c <neopixel_init+0xd4>)
 8001688:	f001 f816 	bl	80026b8 <GPIO_PinAFConfig>
		GPIO_Init(GPIOA,&GPIO_InitStruct);
 800168c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001690:	4619      	mov	r1, r3
 8001692:	4822      	ldr	r0, [pc, #136]	; (800171c <neopixel_init+0xd4>)
 8001694:	f000 ff50 	bl	8002538 <GPIO_Init>

	// TIM Timebase management
	{
		TIM_TimeBaseInitTypeDef TIM_BaseStruct;

		TIM_BaseStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 800169c:	2300      	movs	r3, #0
 800169e:	83fb      	strh	r3, [r7, #30]
		TIM_BaseStruct.TIM_Period = TIMER_PERIOD - 1;
 80016a0:	2368      	movs	r3, #104	; 0x68
 80016a2:	623b      	str	r3, [r7, #32]
		TIM_BaseStruct.TIM_Prescaler = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	83bb      	strh	r3, [r7, #28]
		TIM_BaseStruct.TIM_RepetitionCounter = LED_BUFFER_SIZE+1;
 80016a8:	23c6      	movs	r3, #198	; 0xc6
 80016aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		// Initialise TIM2
		TIM_TimeBaseInit(TIM2,&TIM_BaseStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016b8:	f001 fc00 	bl	8002ebc <TIM_TimeBaseInit>
		//
		TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);
 80016bc:	2201      	movs	r2, #1
 80016be:	2101      	movs	r1, #1
 80016c0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016c4:	f001 fd1c 	bl	8003100 <TIM_ITConfig>

	// TIM Output Compare management
	{
		TIM_OCInitTypeDef TIM_OCStruct;

		TIM_OCStruct.TIM_OCMode = TIM_OCMode_PWM1;
 80016c8:	2360      	movs	r3, #96	; 0x60
 80016ca:	813b      	strh	r3, [r7, #8]
		TIM_OCStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 80016cc:	2300      	movs	r3, #0
 80016ce:	82bb      	strh	r3, [r7, #20]
		TIM_OCStruct.TIM_OutputState = TIM_OutputState_Enable;
 80016d0:	2301      	movs	r3, #1
 80016d2:	817b      	strh	r3, [r7, #10]
		TIM_OCStruct.TIM_Pulse = WS2812_0;
 80016d4:	2323      	movs	r3, #35	; 0x23
 80016d6:	613b      	str	r3, [r7, #16]
		// Initialise TIM2 PWM1
		TIM_OC1Init(TIM2,&TIM_OCStruct);
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	4619      	mov	r1, r3
 80016de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016e2:	f001 fc77 	bl	8002fd4 <TIM_OC1Init>
		// Activate OCPreload
		TIM_OC1PreloadConfig(TIM2,TIM_OCPreload_Disable);
 80016e6:	2100      	movs	r1, #0
 80016e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016ec:	f001 fcec 	bl	80030c8 <TIM_OC1PreloadConfig>

	// TIM interrupt DMA and FLAG management
	{
		NVIC_InitTypeDef NVIC_InitStruct;

		NVIC_InitStruct.NVIC_IRQChannel = TIM2_IRQn;
 80016f0:	231c      	movs	r3, #28
 80016f2:	713b      	strb	r3, [r7, #4]
		NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	717b      	strb	r3, [r7, #5]
		NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	71bb      	strb	r3, [r7, #6]
		NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80016fc:	2301      	movs	r3, #1
 80016fe:	71fb      	strb	r3, [r7, #7]
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8001700:	2101      	movs	r1, #1
 8001702:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001706:	f001 fd49 	bl	800319c <TIM_ClearITPendingBit>
		NVIC_Init(&NVIC_InitStruct);
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	4618      	mov	r0, r3
 800170e:	f000 fb9b 	bl	8001e48 <NVIC_Init>
		// Enable TIM DMA
		TIM_DMACmd(TIM2,TIM_DMA_CC1,ENABLE);
		//
		//TIM_CtrlPWMOutputs(TIM2,DISABLE);
	}*/
}
 8001712:	bf00      	nop
 8001714:	3730      	adds	r7, #48	; 0x30
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40020000 	.word	0x40020000

08001720 <TIM2_IRQHandler>:
 * @brief	Timer Handler for neopixel
 * @note	LEDBuffer is pushed every time the handle is called
 * @param	None
 * @retval	None
 */
void TIM2_IRQHandler(void){
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	static int index = 0;

	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
 8001724:	2101      	movs	r1, #1
 8001726:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800172a:	f001 fd0d 	bl	8003148 <TIM_GetITStatus>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d024      	beq.n	800177e <TIM2_IRQHandler+0x5e>
	{
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8001734:	2101      	movs	r1, #1
 8001736:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800173a:	f001 fd2f 	bl	800319c <TIM_ClearITPendingBit>
	    TIM2->CCR1 = LEDbuffer[index];
 800173e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <TIM2_IRQHandler+0x64>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4910      	ldr	r1, [pc, #64]	; (8001788 <TIM2_IRQHandler+0x68>)
 8001748:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800174c:	6353      	str	r3, [r2, #52]	; 0x34
	    if(index==LED_BUFFER_SIZE)
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <TIM2_IRQHandler+0x64>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2bc5      	cmp	r3, #197	; 0xc5
 8001754:	d104      	bne.n	8001760 <TIM2_IRQHandler+0x40>
	    	// Start count of TIM2
			TIM_Cmd(TIM2,DISABLE);
 8001756:	2100      	movs	r1, #0
 8001758:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800175c:	f001 fc1a 	bl	8002f94 <TIM_Cmd>
	    index = (index + 1)% LED_BUFFER_SIZE;
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <TIM2_IRQHandler+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <TIM2_IRQHandler+0x6c>)
 8001768:	fb83 1302 	smull	r1, r3, r3, r2
 800176c:	1199      	asrs	r1, r3, #6
 800176e:	17d3      	asrs	r3, r2, #31
 8001770:	1acb      	subs	r3, r1, r3
 8001772:	21c5      	movs	r1, #197	; 0xc5
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	4a02      	ldr	r2, [pc, #8]	; (8001784 <TIM2_IRQHandler+0x64>)
 800177c:	6013      	str	r3, [r2, #0]
	 }

	//GPIO_ToggleBits(GPIOD,GPIO_Pin_13);
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000358 	.word	0x20000358
 8001788:	20000044 	.word	0x20000044
 800178c:	532ae21d 	.word	0x532ae21d

08001790 <neopixel_dataInit>:
/**
 * @brief  	Initialise the LEDbuffer
 * @param 	None
 * @retval	None
 */
void neopixel_dataInit(void){
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
	uint32_t index, buffIndex;
	buffIndex = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	603b      	str	r3, [r7, #0]

	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	e00a      	b.n	80017b6 <neopixel_dataInit+0x26>
		LEDbuffer[buffIndex] = WS2812_RESET;
 80017a0:	4a20      	ldr	r2, [pc, #128]	; (8001824 <neopixel_dataInit+0x94>)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	2100      	movs	r1, #0
 80017a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		buffIndex++;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	603b      	str	r3, [r7, #0]
 */
void neopixel_dataInit(void){
	uint32_t index, buffIndex;
	buffIndex = 0;

	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3301      	adds	r3, #1
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b31      	cmp	r3, #49	; 0x31
 80017ba:	d9f1      	bls.n	80017a0 <neopixel_dataInit+0x10>
		LEDbuffer[buffIndex] = WS2812_RESET;
		buffIndex++;
	}
	for (index = 0; index < LED_DATA_SIZE; index++) {
 80017bc:	2300      	movs	r3, #0
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	e00a      	b.n	80017d8 <neopixel_dataInit+0x48>
		LEDbuffer[buffIndex] = WS2812_0;
 80017c2:	4a18      	ldr	r2, [pc, #96]	; (8001824 <neopixel_dataInit+0x94>)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	2123      	movs	r1, #35	; 0x23
 80017c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		buffIndex++;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	3301      	adds	r3, #1
 80017d0:	603b      	str	r3, [r7, #0]

	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
		LEDbuffer[buffIndex] = WS2812_RESET;
		buffIndex++;
	}
	for (index = 0; index < LED_DATA_SIZE; index++) {
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3301      	adds	r3, #1
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b5f      	cmp	r3, #95	; 0x5f
 80017dc:	d9f1      	bls.n	80017c2 <neopixel_dataInit+0x32>
		LEDbuffer[buffIndex] = WS2812_0;
		buffIndex++;
	}
	LEDbuffer[buffIndex] = WS2812_0;
 80017de:	4a11      	ldr	r2, [pc, #68]	; (8001824 <neopixel_dataInit+0x94>)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	2123      	movs	r1, #35	; 0x23
 80017e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	buffIndex++;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	3301      	adds	r3, #1
 80017ec:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	e00a      	b.n	800180a <neopixel_dataInit+0x7a>
		LEDbuffer[buffIndex] = WS2812_RESET;
 80017f4:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <neopixel_dataInit+0x94>)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2100      	movs	r1, #0
 80017fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		buffIndex++;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	603b      	str	r3, [r7, #0]
		LEDbuffer[buffIndex] = WS2812_0;
		buffIndex++;
	}
	LEDbuffer[buffIndex] = WS2812_0;
	buffIndex++;
	for (index = 0; index < RESET_SLOTS_END; index++) {
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3301      	adds	r3, #1
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b31      	cmp	r3, #49	; 0x31
 800180e:	d9f1      	bls.n	80017f4 <neopixel_dataInit+0x64>
		LEDbuffer[buffIndex] = WS2812_RESET;
		buffIndex++;
	}
	// Start count of TIM2
	TIM_Cmd(TIM2,ENABLE);
 8001810:	2101      	movs	r1, #1
 8001812:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001816:	f001 fbbd 	bl	8002f94 <TIM_Cmd>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000044 	.word	0x20000044

08001828 <neopixel_setPixelColourRGB>:
 * @param	r: RED intensity
 * @param	g: GREEN intensity
 * @param	b: BLUE intensity
 * @retval	None
 */
void neopixel_setPixelColourRGB(uint8_t n, uint8_t r, uint8_t g, uint8_t b){
 8001828:	b590      	push	{r4, r7, lr}
 800182a:	b08d      	sub	sp, #52	; 0x34
 800182c:	af00      	add	r7, sp, #0
 800182e:	4604      	mov	r4, r0
 8001830:	4608      	mov	r0, r1
 8001832:	4611      	mov	r1, r2
 8001834:	461a      	mov	r2, r3
 8001836:	4623      	mov	r3, r4
 8001838:	71fb      	strb	r3, [r7, #7]
 800183a:	4603      	mov	r3, r0
 800183c:	71bb      	strb	r3, [r7, #6]
 800183e:	460b      	mov	r3, r1
 8001840:	717b      	strb	r3, [r7, #5]
 8001842:	4613      	mov	r3, r2
 8001844:	713b      	strb	r3, [r7, #4]
	// scale according to brightness
	float _max = (float)max(r,g,b);
 8001846:	79bb      	ldrb	r3, [r7, #6]
 8001848:	7979      	ldrb	r1, [r7, #5]
 800184a:	793a      	ldrb	r2, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f985 	bl	8001b5c <max>
 8001852:	ee07 0a90 	vmov	s15, r0
 8001856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800185a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float b_scale = brightness/_max;
 800185e:	4b5b      	ldr	r3, [pc, #364]	; (80019cc <neopixel_setPixelColourRGB+0x1a4>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	ee07 3a90 	vmov	s15, r3
 8001866:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800186a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800186e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001872:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	// scale RGB
	r = (uint8_t) ((float)r*b_scale);
 8001876:	79bb      	ldrb	r3, [r7, #6]
 8001878:	ee07 3a90 	vmov	s15, r3
 800187c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001880:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800188c:	edc7 7a00 	vstr	s15, [r7]
 8001890:	783b      	ldrb	r3, [r7, #0]
 8001892:	71bb      	strb	r3, [r7, #6]
	g = (uint8_t) ((float)g*b_scale);
 8001894:	797b      	ldrb	r3, [r7, #5]
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800189e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018aa:	edc7 7a00 	vstr	s15, [r7]
 80018ae:	783b      	ldrb	r3, [r7, #0]
 80018b0:	717b      	strb	r3, [r7, #5]
	b = (uint8_t) ((float)b*b_scale);
 80018b2:	793b      	ldrb	r3, [r7, #4]
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018c8:	edc7 7a00 	vstr	s15, [r7]
 80018cc:	783b      	ldrb	r3, [r7, #0]
 80018ce:	713b      	strb	r3, [r7, #4]

	uint8_t tempBuffer[24];
	uint32_t i;
	uint32_t LEDindex;
	LEDindex = n % LED_NUMBER;
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 8; i++) // GREEN data
 80018d8:	2300      	movs	r3, #0
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018dc:	e013      	b.n	8001906 <neopixel_setPixelColourRGB+0xde>
		tempBuffer[i] = ((g << i) & 0x80) ? WS2812_1 : WS2812_0;
 80018de:	797a      	ldrb	r2, [r7, #5]
 80018e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <neopixel_setPixelColourRGB+0xca>
 80018ee:	2146      	movs	r1, #70	; 0x46
 80018f0:	e000      	b.n	80018f4 <neopixel_setPixelColourRGB+0xcc>
 80018f2:	2123      	movs	r1, #35	; 0x23
 80018f4:	f107 0208 	add.w	r2, r7, #8
 80018f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fa:	4413      	add	r3, r2
 80018fc:	460a      	mov	r2, r1
 80018fe:	701a      	strb	r2, [r3, #0]
	uint8_t tempBuffer[24];
	uint32_t i;
	uint32_t LEDindex;
	LEDindex = n % LED_NUMBER;

	for (i = 0; i < 8; i++) // GREEN data
 8001900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001902:	3301      	adds	r3, #1
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001908:	2b07      	cmp	r3, #7
 800190a:	d9e8      	bls.n	80018de <neopixel_setPixelColourRGB+0xb6>
		tempBuffer[i] = ((g << i) & 0x80) ? WS2812_1 : WS2812_0;
	for (i = 0; i < 8; i++) // RED
 800190c:	2300      	movs	r3, #0
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001910:	e014      	b.n	800193c <neopixel_setPixelColourRGB+0x114>
		tempBuffer[8 + i] = ((r << i) & 0x80) ? WS2812_1 : WS2812_0;
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	3308      	adds	r3, #8
 8001916:	79b9      	ldrb	r1, [r7, #6]
 8001918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800191a:	fa01 f202 	lsl.w	r2, r1, r2
 800191e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001922:	2a00      	cmp	r2, #0
 8001924:	d001      	beq.n	800192a <neopixel_setPixelColourRGB+0x102>
 8001926:	2246      	movs	r2, #70	; 0x46
 8001928:	e000      	b.n	800192c <neopixel_setPixelColourRGB+0x104>
 800192a:	2223      	movs	r2, #35	; 0x23
 800192c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001930:	440b      	add	r3, r1
 8001932:	f803 2c28 	strb.w	r2, [r3, #-40]
	uint32_t LEDindex;
	LEDindex = n % LED_NUMBER;

	for (i = 0; i < 8; i++) // GREEN data
		tempBuffer[i] = ((g << i) & 0x80) ? WS2812_1 : WS2812_0;
	for (i = 0; i < 8; i++) // RED
 8001936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001938:	3301      	adds	r3, #1
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800193c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193e:	2b07      	cmp	r3, #7
 8001940:	d9e7      	bls.n	8001912 <neopixel_setPixelColourRGB+0xea>
		tempBuffer[8 + i] = ((r << i) & 0x80) ? WS2812_1 : WS2812_0;
	for (i = 0; i < 8; i++) // BLUE
 8001942:	2300      	movs	r3, #0
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001946:	e014      	b.n	8001972 <neopixel_setPixelColourRGB+0x14a>
		tempBuffer[16 + i] = ((b << i) & 0x80) ? WS2812_1 : WS2812_0;
 8001948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194a:	3310      	adds	r3, #16
 800194c:	7939      	ldrb	r1, [r7, #4]
 800194e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001950:	fa01 f202 	lsl.w	r2, r1, r2
 8001954:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001958:	2a00      	cmp	r2, #0
 800195a:	d001      	beq.n	8001960 <neopixel_setPixelColourRGB+0x138>
 800195c:	2246      	movs	r2, #70	; 0x46
 800195e:	e000      	b.n	8001962 <neopixel_setPixelColourRGB+0x13a>
 8001960:	2223      	movs	r2, #35	; 0x23
 8001962:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001966:	440b      	add	r3, r1
 8001968:	f803 2c28 	strb.w	r2, [r3, #-40]

	for (i = 0; i < 8; i++) // GREEN data
		tempBuffer[i] = ((g << i) & 0x80) ? WS2812_1 : WS2812_0;
	for (i = 0; i < 8; i++) // RED
		tempBuffer[8 + i] = ((r << i) & 0x80) ? WS2812_1 : WS2812_0;
	for (i = 0; i < 8; i++) // BLUE
 800196c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196e:	3301      	adds	r3, #1
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001974:	2b07      	cmp	r3, #7
 8001976:	d9e7      	bls.n	8001948 <neopixel_setPixelColourRGB+0x120>
		tempBuffer[16 + i] = ((b << i) & 0x80) ? WS2812_1 : WS2812_0;
	TIM_Cmd(TIM2,DISABLE);
 8001978:	2100      	movs	r1, #0
 800197a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800197e:	f001 fb09 	bl	8002f94 <TIM_Cmd>
	for (i = 0; i < 24; i++)
 8001982:	2300      	movs	r3, #0
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001986:	e014      	b.n	80019b2 <neopixel_setPixelColourRGB+0x18a>
		LEDbuffer[RESET_SLOTS_BEGIN + LEDindex * 24 + i] = tempBuffer[i];
 8001988:	6a3a      	ldr	r2, [r7, #32]
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	461a      	mov	r2, r3
 8001994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001996:	4413      	add	r3, r2
 8001998:	3332      	adds	r3, #50	; 0x32
 800199a:	f107 0108 	add.w	r1, r7, #8
 800199e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019a0:	440a      	add	r2, r1
 80019a2:	7812      	ldrb	r2, [r2, #0]
 80019a4:	4611      	mov	r1, r2
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <neopixel_setPixelColourRGB+0x1a8>)
 80019a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < 8; i++) // RED
		tempBuffer[8 + i] = ((r << i) & 0x80) ? WS2812_1 : WS2812_0;
	for (i = 0; i < 8; i++) // BLUE
		tempBuffer[16 + i] = ((b << i) & 0x80) ? WS2812_1 : WS2812_0;
	TIM_Cmd(TIM2,DISABLE);
	for (i = 0; i < 24; i++)
 80019ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ae:	3301      	adds	r3, #1
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b4:	2b17      	cmp	r3, #23
 80019b6:	d9e7      	bls.n	8001988 <neopixel_setPixelColourRGB+0x160>
		LEDbuffer[RESET_SLOTS_BEGIN + LEDindex * 24 + i] = tempBuffer[i];
	TIM_Cmd(TIM2,ENABLE);
 80019b8:	2101      	movs	r1, #1
 80019ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80019be:	f001 fae9 	bl	8002f94 <TIM_Cmd>
}
 80019c2:	bf00      	nop
 80019c4:	3734      	adds	r7, #52	; 0x34
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd90      	pop	{r4, r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000000 	.word	0x20000000
 80019d0:	20000044 	.word	0x20000044

080019d4 <neopixel_setBrightness>:
 * 			- fully bright:	255
 * @param	b: Brightness
 * @retval	None
 */

void neopixel_setBrightness(uint8_t b){
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
	brightness = b;
 80019de:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <neopixel_setBrightness+0x1c>)
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	7013      	strb	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	20000000 	.word	0x20000000

080019f4 <neopixel_colourRGB>:
 * @param	r: RED intensity
 * @param	g: GREEN intensity
 * @param	b: BLUE intensity
 * @retval	None
 */
uint32_t neopixel_colourRGB(uint8_t r,uint8_t g,uint8_t b){
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
 80019fe:	460b      	mov	r3, r1
 8001a00:	71bb      	strb	r3, [r7, #6]
 8001a02:	4613      	mov	r3, r2
 8001a04:	717b      	strb	r3, [r7, #5]
	return (uint32_t)(r<<16 | g<<8 | b);
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	041a      	lsls	r2, r3, #16
 8001a0a:	79bb      	ldrb	r3, [r7, #6]
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	797b      	ldrb	r3, [r7, #5]
 8001a12:	4313      	orrs	r3, r2
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <neopixel_setPixelColour>:
 * @brief 	Set the colour of one led
 * @param	n: Led index
 * @param	c: 32bit RGB colour
 * @retval	None
 */
void neopixel_setPixelColour(uint8_t n, uint32_t c){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	71fb      	strb	r3, [r7, #7]
	neopixel_setPixelColourRGB(n,(uint8_t)(c>>16), (uint8_t)(c>>8), (uint8_t)(c));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	0c1b      	lsrs	r3, r3, #16
 8001a30:	b2d9      	uxtb	r1, r3
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	79f8      	ldrb	r0, [r7, #7]
 8001a3e:	f7ff fef3 	bl	8001828 <neopixel_setPixelColourRGB>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop

08001a4c <temperature_init>:
 * 			3) Configure ADC channel8 pin as analog input
 * 			4) Configure ADC1 channel 1
 * 	@param 	None
 * 	@retval None
 */
void temperature_init(void){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
	// Clock configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8001a52:	2101      	movs	r1, #1
 8001a54:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a58:	f000 ffb0 	bl	80029bc <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	2002      	movs	r0, #2
 8001a60:	f000 ff6c 	bl	800293c <RCC_AHB1PeriphClockCmd>

	// Analogue pin configuration
	{
		GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
 8001a64:	2301      	movs	r3, #1
 8001a66:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AN;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	773b      	strb	r3, [r7, #28]
		GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	77fb      	strb	r3, [r7, #31]
		GPIO_Init(GPIOB,&GPIO_InitStruct);
 8001a70:	f107 0318 	add.w	r3, r7, #24
 8001a74:	4619      	mov	r1, r3
 8001a76:	4813      	ldr	r0, [pc, #76]	; (8001ac4 <temperature_init+0x78>)
 8001a78:	f000 fd5e 	bl	8002538 <GPIO_Init>
	}

	// ADC structure configuration
	{
		ADC_DeInit();
 8001a7c:	f000 fa46 	bl	8001f0c <ADC_DeInit>
		ADC_InitTypeDef ADC_InitStruct;
		ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right;
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
		ADC_InitStruct.ADC_Resolution = ADC_Resolution_12b;
 8001a84:	2300      	movs	r3, #0
 8001a86:	603b      	str	r3, [r7, #0]
		ADC_InitStruct.ADC_ContinuousConvMode = ENABLE;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	717b      	strb	r3, [r7, #5]
		ADC_InitStruct.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
		ADC_InitStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
		ADC_InitStruct.ADC_NbrOfConversion = 1;
 8001a94:	2301      	movs	r3, #1
 8001a96:	753b      	strb	r3, [r7, #20]
		ADC_InitStruct.ADC_ScanConvMode = DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	713b      	strb	r3, [r7, #4]
		ADC_Init(ADC1,&ADC_InitStruct);
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4809      	ldr	r0, [pc, #36]	; (8001ac8 <temperature_init+0x7c>)
 8001aa2:	f000 fa41 	bl	8001f28 <ADC_Init>
		ADC_Cmd(ADC1,ENABLE);
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4807      	ldr	r0, [pc, #28]	; (8001ac8 <temperature_init+0x7c>)
 8001aaa:	f000 fa93 	bl	8001fd4 <ADC_Cmd>
		ADC_RegularChannelConfig(ADC1,ADC_Channel_8,1,ADC_SampleTime_144Cycles);
 8001aae:	2306      	movs	r3, #6
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2108      	movs	r1, #8
 8001ab4:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <temperature_init+0x7c>)
 8001ab6:	f000 faa9 	bl	800200c <ADC_RegularChannelConfig>
	}
}
 8001aba:	bf00      	nop
 8001abc:	3720      	adds	r7, #32
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40020400 	.word	0x40020400
 8001ac8:	40012000 	.word	0x40012000

08001acc <temperature_value>:
/**
 * @brief Read ADC value
 * @param None
 * @retval uint32_t of the ADC value
 */
uint16_t temperature_value(void){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
	ADC_SoftwareStartConv(ADC1);
 8001ad0:	4808      	ldr	r0, [pc, #32]	; (8001af4 <temperature_value+0x28>)
 8001ad2:	f000 fb65 	bl	80021a0 <ADC_SoftwareStartConv>
	while(!ADC_GetFlagStatus(ADC1,ADC_FLAG_EOC));
 8001ad6:	bf00      	nop
 8001ad8:	2102      	movs	r1, #2
 8001ada:	4806      	ldr	r0, [pc, #24]	; (8001af4 <temperature_value+0x28>)
 8001adc:	f000 fb7e 	bl	80021dc <ADC_GetFlagStatus>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f8      	beq.n	8001ad8 <temperature_value+0xc>
	return ADC_GetConversionValue(ADC1);
 8001ae6:	4803      	ldr	r0, [pc, #12]	; (8001af4 <temperature_value+0x28>)
 8001ae8:	f000 fb6a 	bl	80021c0 <ADC_GetConversionValue>
 8001aec:	4603      	mov	r3, r0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40012000 	.word	0x40012000

08001af8 <temperature_read>:
 * @brief Convert the ADC value to its corresponding
 * 			temperature value
 * @param None
 * @retval int32_t of the temperature read
 */
int32_t temperature_read(void){
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
	// Convert digital reading to voltage equivalent
	float gradient = 3000.0/0xFFF;
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <temperature_read+0x58>)
 8001b00:	607b      	str	r3, [r7, #4]
	float voltage = temperature_value()*gradient;
 8001b02:	f7ff ffe3 	bl	8001acc <temperature_value>
 8001b06:	4603      	mov	r3, r0
 8001b08:	ee07 3a90 	vmov	s15, r3
 8001b0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b10:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b18:	edc7 7a00 	vstr	s15, [r7]

	// Convert voltage to temperature
	return (int32_t) ((voltage-500)/10.0);
 8001b1c:	edd7 7a00 	vldr	s15, [r7]
 8001b20:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001b54 <temperature_read+0x5c>
 8001b24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b28:	ee17 0a90 	vmov	r0, s15
 8001b2c:	f7fe fcc2 	bl	80004b4 <__aeabi_f2d>
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <temperature_read+0x60>)
 8001b36:	f7fe fe3b 	bl	80007b0 <__aeabi_ddiv>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	460c      	mov	r4, r1
 8001b3e:	4618      	mov	r0, r3
 8001b40:	4621      	mov	r1, r4
 8001b42:	f7fe ff1d 	bl	8000980 <__aeabi_d2iz>
 8001b46:	4603      	mov	r3, r0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd90      	pop	{r4, r7, pc}
 8001b50:	3f3b8bb9 	.word	0x3f3b8bb9
 8001b54:	43fa0000 	.word	0x43fa0000
 8001b58:	40240000 	.word	0x40240000

08001b5c <max>:
 * @param	a: First value
 * @param	b: second value
 * @param	c: Third value
 * @retval	uint32_t of the maximum value
 */
uint32_t max(uint32_t a, uint32_t b, uint32_t c){
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
	return a>b?(a>c?a:c):(b>c?b:c);
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d905      	bls.n	8001b7c <max+0x20>
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4293      	cmp	r3, r2
 8001b76:	bf38      	it	cc
 8001b78:	4613      	movcc	r3, r2
 8001b7a:	e004      	b.n	8001b86 <max+0x2a>
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	4293      	cmp	r3, r2
 8001b82:	bf38      	it	cc
 8001b84:	4613      	movcc	r3, r2
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop

08001b94 <delay>:
 * @brief	delay for the number of microsecond
 * @note 	TODO use RTOS delay instead
 * @param	microseconds
 * @retval	None
 */
void delay(uint32_t microseconds) {
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Hangs for specified number of microseconds. */
  volatile uint32_t counter = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
  microseconds *= 4;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	607b      	str	r3, [r7, #4]
  for(; counter<microseconds; counter++);
 8001ba6:	e002      	b.n	8001bae <delay+0x1a>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3301      	adds	r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d3f8      	bcc.n	8001ba8 <delay+0x14>
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop

08001bc4 <test_ClockMangement_save_and_load_time>:
/**
 * @brief	Unit testing for time save and load
 * @param	None
 * @retval	None
 */
bool test_ClockMangement_save_and_load_time(void){
 8001bc4:	b590      	push	{r4, r7, lr}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef time1, time2;
	/*
	 * time:	01:27:20 PM
	 */
	time1.RTC_H12 = PM;
 8001bca:	2340      	movs	r3, #64	; 0x40
 8001bcc:	71fb      	strb	r3, [r7, #7]
	time1.RTC_Hours = 01;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	713b      	strb	r3, [r7, #4]
	time1.RTC_Minutes = 27;
 8001bd2:	231b      	movs	r3, #27
 8001bd4:	717b      	strb	r3, [r7, #5]
	time1.RTC_Seconds = 20;
 8001bd6:	2314      	movs	r3, #20
 8001bd8:	71bb      	strb	r3, [r7, #6]

	ClockManagement_saveTime(&time1);
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe ff67 	bl	8000ab0 <ClockManagement_saveTime>
	time2 = ClockManagement_loadTime();
 8001be2:	f7ff f81f 	bl	8000c24 <ClockManagement_loadTime>
 8001be6:	4603      	mov	r3, r0
 8001be8:	603b      	str	r3, [r7, #0]

	return assertEqual(time1.RTC_H12, time2.RTC_H12)\
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	461a      	mov	r2, r3
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	f000 f916 	bl	8001e24 <assertEqual>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461c      	mov	r4, r3
			& assertEqual(time1.RTC_Hours, time2.RTC_Hours)\
 8001bfc:	793b      	ldrb	r3, [r7, #4]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	783b      	ldrb	r3, [r7, #0]
 8001c02:	4619      	mov	r1, r3
 8001c04:	4610      	mov	r0, r2
 8001c06:	f000 f90d 	bl	8001e24 <assertEqual>
 8001c0a:	4603      	mov	r3, r0
	time1.RTC_Seconds = 20;

	ClockManagement_saveTime(&time1);
	time2 = ClockManagement_loadTime();

	return assertEqual(time1.RTC_H12, time2.RTC_H12)\
 8001c0c:	4023      	ands	r3, r4
 8001c0e:	b2dc      	uxtb	r4, r3
			& assertEqual(time1.RTC_Hours, time2.RTC_Hours)\
			& assertEqual(time1.RTC_Minutes, time2.RTC_Minutes)\
 8001c10:	797b      	ldrb	r3, [r7, #5]
 8001c12:	461a      	mov	r2, r3
 8001c14:	787b      	ldrb	r3, [r7, #1]
 8001c16:	4619      	mov	r1, r3
 8001c18:	4610      	mov	r0, r2
 8001c1a:	f000 f903 	bl	8001e24 <assertEqual>
 8001c1e:	4603      	mov	r3, r0
	time1.RTC_Seconds = 20;

	ClockManagement_saveTime(&time1);
	time2 = ClockManagement_loadTime();

	return assertEqual(time1.RTC_H12, time2.RTC_H12)\
 8001c20:	4023      	ands	r3, r4
 8001c22:	b2dc      	uxtb	r4, r3
			& assertEqual(time1.RTC_Hours, time2.RTC_Hours)\
			& assertEqual(time1.RTC_Minutes, time2.RTC_Minutes)\
			& assertEqual(time1.RTC_Seconds, time2.RTC_Seconds);
 8001c24:	79bb      	ldrb	r3, [r7, #6]
 8001c26:	461a      	mov	r2, r3
 8001c28:	78bb      	ldrb	r3, [r7, #2]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	f000 f8f9 	bl	8001e24 <assertEqual>
 8001c32:	4603      	mov	r3, r0
	time1.RTC_Seconds = 20;

	ClockManagement_saveTime(&time1);
	time2 = ClockManagement_loadTime();

	return assertEqual(time1.RTC_H12, time2.RTC_H12)\
 8001c34:	4023      	ands	r3, r4
 8001c36:	b2db      	uxtb	r3, r3
			& assertEqual(time1.RTC_Hours, time2.RTC_Hours)\
			& assertEqual(time1.RTC_Minutes, time2.RTC_Minutes)\
			& assertEqual(time1.RTC_Seconds, time2.RTC_Seconds);
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd90      	pop	{r4, r7, pc}

08001c40 <test_ClockMangement_save_and_load_date>:
/**
 * @brief	Unit testing for date save and load
 * @param	None
 * @retval	None
 */
bool test_ClockMangement_save_and_load_date(void){
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
	RTC_DateTypeDef date1, date2;
	/*
	 * date:	Friday 2017/03/31
	 */
	date1.RTC_Date = 31;
 8001c46:	231f      	movs	r3, #31
 8001c48:	71bb      	strb	r3, [r7, #6]
	date1.RTC_Month = RTC_Month_March;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	717b      	strb	r3, [r7, #5]
	date1.RTC_WeekDay = RTC_Weekday_Friday;
 8001c4e:	2305      	movs	r3, #5
 8001c50:	713b      	strb	r3, [r7, #4]
	date1.RTC_Year = 17;
 8001c52:	2311      	movs	r3, #17
 8001c54:	71fb      	strb	r3, [r7, #7]

	ClockManagement_saveDate(&date1);
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe ff59 	bl	8000b10 <ClockManagement_saveDate>
	date2 = ClockManagement_loadDate();
 8001c5e:	f7ff f80b 	bl	8000c78 <ClockManagement_loadDate>
 8001c62:	4603      	mov	r3, r0
 8001c64:	603b      	str	r3, [r7, #0]

	return assertEqual(date1.RTC_Date, date2.RTC_Date)\
 8001c66:	79bb      	ldrb	r3, [r7, #6]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	78bb      	ldrb	r3, [r7, #2]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4610      	mov	r0, r2
 8001c70:	f000 f8d8 	bl	8001e24 <assertEqual>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461c      	mov	r4, r3
			& assertEqual(date1.RTC_Month, date2.RTC_Month)\
 8001c78:	797b      	ldrb	r3, [r7, #5]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	787b      	ldrb	r3, [r7, #1]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4610      	mov	r0, r2
 8001c82:	f000 f8cf 	bl	8001e24 <assertEqual>
 8001c86:	4603      	mov	r3, r0
	date1.RTC_Year = 17;

	ClockManagement_saveDate(&date1);
	date2 = ClockManagement_loadDate();

	return assertEqual(date1.RTC_Date, date2.RTC_Date)\
 8001c88:	4023      	ands	r3, r4
 8001c8a:	b2dc      	uxtb	r4, r3
			& assertEqual(date1.RTC_Month, date2.RTC_Month)\
			& assertEqual(date1.RTC_WeekDay, date2.RTC_WeekDay)\
 8001c8c:	793b      	ldrb	r3, [r7, #4]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	783b      	ldrb	r3, [r7, #0]
 8001c92:	4619      	mov	r1, r3
 8001c94:	4610      	mov	r0, r2
 8001c96:	f000 f8c5 	bl	8001e24 <assertEqual>
 8001c9a:	4603      	mov	r3, r0
	date1.RTC_Year = 17;

	ClockManagement_saveDate(&date1);
	date2 = ClockManagement_loadDate();

	return assertEqual(date1.RTC_Date, date2.RTC_Date)\
 8001c9c:	4023      	ands	r3, r4
 8001c9e:	b2dc      	uxtb	r4, r3
			& assertEqual(date1.RTC_Month, date2.RTC_Month)\
			& assertEqual(date1.RTC_WeekDay, date2.RTC_WeekDay)\
			& assertEqual(date1.RTC_Year, date2.RTC_Year);
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4610      	mov	r0, r2
 8001caa:	f000 f8bb 	bl	8001e24 <assertEqual>
 8001cae:	4603      	mov	r3, r0
	date1.RTC_Year = 17;

	ClockManagement_saveDate(&date1);
	date2 = ClockManagement_loadDate();

	return assertEqual(date1.RTC_Date, date2.RTC_Date)\
 8001cb0:	4023      	ands	r3, r4
 8001cb2:	b2db      	uxtb	r3, r3
			& assertEqual(date1.RTC_Month, date2.RTC_Month)\
			& assertEqual(date1.RTC_WeekDay, date2.RTC_WeekDay)\
			& assertEqual(date1.RTC_Year, date2.RTC_Year);
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd90      	pop	{r4, r7, pc}

08001cbc <test_ClockMangement_save_and_load_alarm>:
/**
 * @brief	Unit testing for alarm save and load
 * @param	None
 * @retval	None
 */
bool test_ClockMangement_save_and_load_alarm(void){
 8001cbc:	b5b0      	push	{r4, r5, r7, lr}
 8001cbe:	b0a4      	sub	sp, #144	; 0x90
 8001cc0:	af00      	add	r7, sp, #0
	Alarm_Definition alarm1, alarm2;
	/*
	 * alarm:	"Wake up!!!" 05:00:00 AM everyday
	 */
	// TODO when assigning name to the alarm, the non used space should be filled by a char FOR TESTING ONLY
	strcpy(alarm1.alarmName,"Wake up!!!000000000000000000000");
 8001cc2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001cc6:	4a4d      	ldr	r2, [pc, #308]	; (8001dfc <test_ClockMangement_save_and_load_alarm+0x140>)
 8001cc8:	461c      	mov	r4, r3
 8001cca:	4615      	mov	r5, r2
 8001ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	alarm1.alarmParameters.RTC_AlarmDateWeekDay = 31;
 8001cd8:	231f      	movs	r3, #31
 8001cda:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	alarm1.alarmParameters.RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	alarm1.alarmParameters.RTC_AlarmMask = REPEAT_DateWeekDay;
 8001ce4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001ce8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	alarm1.alarmParameters.RTC_AlarmTime.RTC_H12 = AM;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	alarm1.alarmParameters.RTC_AlarmTime.RTC_Hours = 05;
 8001cf2:	2305      	movs	r3, #5
 8001cf4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	alarm1.alarmParameters.RTC_AlarmTime.RTC_Minutes = 00;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
	alarm1.alarmParameters.RTC_AlarmTime.RTC_Seconds = 00;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

	ClockManagement_saveAlarm(&alarm1,ALARM_BASE_ADDRESS);
 8001d04:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001d08:	2108      	movs	r1, #8
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fe60 	bl	80009d0 <ClockManagement_saveAlarm>
	alarm2 = ClockManagement_loadAlarm(ALARM_BASE_ADDRESS);
 8001d10:	463b      	mov	r3, r7
 8001d12:	2108      	movs	r1, #8
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe ff2b 	bl	8000b70 <ClockManagement_loadAlarm>
 8001d1a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001d1e:	463d      	mov	r5, r7
 8001d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return assertTrue(strcmp(alarm1.alarmName,alarm2.alarmName))\
 8001d30:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d34:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001d38:	4611      	mov	r1, r2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fa44 	bl	80001c8 <strcmp>
 8001d40:	4603      	mov	r3, r0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 f85b 	bl	8001e00 <assertTrue>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461c      	mov	r4, r3
			& assertEqual(alarm1.alarmParameters.RTC_AlarmDateWeekDay,alarm2.alarmParameters.RTC_AlarmDateWeekDay )\
 8001d4e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001d52:	461a      	mov	r2, r3
 8001d54:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	f000 f862 	bl	8001e24 <assertEqual>
 8001d60:	4603      	mov	r3, r0
	alarm1.alarmParameters.RTC_AlarmTime.RTC_Minutes = 00;
	alarm1.alarmParameters.RTC_AlarmTime.RTC_Seconds = 00;

	ClockManagement_saveAlarm(&alarm1,ALARM_BASE_ADDRESS);
	alarm2 = ClockManagement_loadAlarm(ALARM_BASE_ADDRESS);
	return assertTrue(strcmp(alarm1.alarmName,alarm2.alarmName))\
 8001d62:	4023      	ands	r3, r4
 8001d64:	b2dc      	uxtb	r4, r3
			& assertEqual(alarm1.alarmParameters.RTC_AlarmDateWeekDay,alarm2.alarmParameters.RTC_AlarmDateWeekDay )\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmDateWeekDaySel,alarm2.alarmParameters.RTC_AlarmDateWeekDaySel)\
 8001d66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4610      	mov	r0, r2
 8001d72:	f000 f857 	bl	8001e24 <assertEqual>
 8001d76:	4603      	mov	r3, r0
	alarm1.alarmParameters.RTC_AlarmTime.RTC_Minutes = 00;
	alarm1.alarmParameters.RTC_AlarmTime.RTC_Seconds = 00;

	ClockManagement_saveAlarm(&alarm1,ALARM_BASE_ADDRESS);
	alarm2 = ClockManagement_loadAlarm(ALARM_BASE_ADDRESS);
	return assertTrue(strcmp(alarm1.alarmName,alarm2.alarmName))\
 8001d78:	4023      	ands	r3, r4
 8001d7a:	b2dc      	uxtb	r4, r3
			& assertEqual(alarm1.alarmParameters.RTC_AlarmDateWeekDay,alarm2.alarmParameters.RTC_AlarmDateWeekDay )\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmDateWeekDaySel,alarm2.alarmParameters.RTC_AlarmDateWeekDaySel)\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmMask,alarm2.alarmParameters.RTC_AlarmMask)\
 8001d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d80:	461a      	mov	r2, r3
 8001d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d84:	4619      	mov	r1, r3
 8001d86:	4610      	mov	r0, r2
 8001d88:	f000 f84c 	bl	8001e24 <assertEqual>
 8001d8c:	4603      	mov	r3, r0
	alarm1.alarmParameters.RTC_AlarmTime.RTC_Minutes = 00;
	alarm1.alarmParameters.RTC_AlarmTime.RTC_Seconds = 00;

	ClockManagement_saveAlarm(&alarm1,ALARM_BASE_ADDRESS);
	alarm2 = ClockManagement_loadAlarm(ALARM_BASE_ADDRESS);
	return assertTrue(strcmp(alarm1.alarmName,alarm2.alarmName))\
 8001d8e:	4023      	ands	r3, r4
 8001d90:	b2dc      	uxtb	r4, r3
			& assertEqual(alarm1.alarmParameters.RTC_AlarmDateWeekDay,alarm2.alarmParameters.RTC_AlarmDateWeekDay )\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmDateWeekDaySel,alarm2.alarmParameters.RTC_AlarmDateWeekDaySel)\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmMask,alarm2.alarmParameters.RTC_AlarmMask)\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmTime.RTC_H12,alarm2.alarmParameters.RTC_AlarmTime.RTC_H12)\
 8001d92:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001d96:	461a      	mov	r2, r3
 8001d98:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4610      	mov	r0, r2
 8001da0:	f000 f840 	bl	8001e24 <assertEqual>
 8001da4:	4603      	mov	r3, r0
	alarm1.alarmParameters.RTC_AlarmTime.RTC_Minutes = 00;
	alarm1.alarmParameters.RTC_AlarmTime.RTC_Seconds = 00;

	ClockManagement_saveAlarm(&alarm1,ALARM_BASE_ADDRESS);
	alarm2 = ClockManagement_loadAlarm(ALARM_BASE_ADDRESS);
	return assertTrue(strcmp(alarm1.alarmName,alarm2.alarmName))\
 8001da6:	4023      	ands	r3, r4
 8001da8:	b2dc      	uxtb	r4, r3
			& assertEqual(alarm1.alarmParameters.RTC_AlarmDateWeekDay,alarm2.alarmParameters.RTC_AlarmDateWeekDay )\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmDateWeekDaySel,alarm2.alarmParameters.RTC_AlarmDateWeekDaySel)\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmMask,alarm2.alarmParameters.RTC_AlarmMask)\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmTime.RTC_H12,alarm2.alarmParameters.RTC_AlarmTime.RTC_H12)\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmTime.RTC_Hours,alarm2.alarmParameters.RTC_AlarmTime.RTC_Hours)\
 8001daa:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8001dae:	461a      	mov	r2, r3
 8001db0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001db4:	4619      	mov	r1, r3
 8001db6:	4610      	mov	r0, r2
 8001db8:	f000 f834 	bl	8001e24 <assertEqual>
 8001dbc:	4603      	mov	r3, r0
	alarm1.alarmParameters.RTC_AlarmTime.RTC_Minutes = 00;
	alarm1.alarmParameters.RTC_AlarmTime.RTC_Seconds = 00;

	ClockManagement_saveAlarm(&alarm1,ALARM_BASE_ADDRESS);
	alarm2 = ClockManagement_loadAlarm(ALARM_BASE_ADDRESS);
	return assertTrue(strcmp(alarm1.alarmName,alarm2.alarmName))\
 8001dbe:	4023      	ands	r3, r4
 8001dc0:	b2dc      	uxtb	r4, r3
			& assertEqual(alarm1.alarmParameters.RTC_AlarmDateWeekDay,alarm2.alarmParameters.RTC_AlarmDateWeekDay )\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmDateWeekDaySel,alarm2.alarmParameters.RTC_AlarmDateWeekDaySel)\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmMask,alarm2.alarmParameters.RTC_AlarmMask)\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmTime.RTC_H12,alarm2.alarmParameters.RTC_AlarmTime.RTC_H12)\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmTime.RTC_Hours,alarm2.alarmParameters.RTC_AlarmTime.RTC_Hours)\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmTime.RTC_Minutes,alarm2.alarmParameters.RTC_AlarmTime.RTC_Minutes)\
 8001dc2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4610      	mov	r0, r2
 8001dd0:	f000 f828 	bl	8001e24 <assertEqual>
 8001dd4:	4603      	mov	r3, r0
	alarm1.alarmParameters.RTC_AlarmTime.RTC_Minutes = 00;
	alarm1.alarmParameters.RTC_AlarmTime.RTC_Seconds = 00;

	ClockManagement_saveAlarm(&alarm1,ALARM_BASE_ADDRESS);
	alarm2 = ClockManagement_loadAlarm(ALARM_BASE_ADDRESS);
	return assertTrue(strcmp(alarm1.alarmName,alarm2.alarmName))\
 8001dd6:	4023      	ands	r3, r4
 8001dd8:	b2dc      	uxtb	r4, r3
			& assertEqual(alarm1.alarmParameters.RTC_AlarmDateWeekDaySel,alarm2.alarmParameters.RTC_AlarmDateWeekDaySel)\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmMask,alarm2.alarmParameters.RTC_AlarmMask)\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmTime.RTC_H12,alarm2.alarmParameters.RTC_AlarmTime.RTC_H12)\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmTime.RTC_Hours,alarm2.alarmParameters.RTC_AlarmTime.RTC_Hours)\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmTime.RTC_Minutes,alarm2.alarmParameters.RTC_AlarmTime.RTC_Minutes)\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmTime.RTC_Seconds,alarm2.alarmParameters.RTC_AlarmTime.RTC_Seconds);
 8001dda:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001dde:	461a      	mov	r2, r3
 8001de0:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001de4:	4619      	mov	r1, r3
 8001de6:	4610      	mov	r0, r2
 8001de8:	f000 f81c 	bl	8001e24 <assertEqual>
 8001dec:	4603      	mov	r3, r0
	alarm1.alarmParameters.RTC_AlarmTime.RTC_Minutes = 00;
	alarm1.alarmParameters.RTC_AlarmTime.RTC_Seconds = 00;

	ClockManagement_saveAlarm(&alarm1,ALARM_BASE_ADDRESS);
	alarm2 = ClockManagement_loadAlarm(ALARM_BASE_ADDRESS);
	return assertTrue(strcmp(alarm1.alarmName,alarm2.alarmName))\
 8001dee:	4023      	ands	r3, r4
 8001df0:	b2db      	uxtb	r3, r3
			& assertEqual(alarm1.alarmParameters.RTC_AlarmMask,alarm2.alarmParameters.RTC_AlarmMask)\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmTime.RTC_H12,alarm2.alarmParameters.RTC_AlarmTime.RTC_H12)\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmTime.RTC_Hours,alarm2.alarmParameters.RTC_AlarmTime.RTC_Hours)\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmTime.RTC_Minutes,alarm2.alarmParameters.RTC_AlarmTime.RTC_Minutes)\
			& assertEqual(alarm1.alarmParameters.RTC_AlarmTime.RTC_Seconds,alarm2.alarmParameters.RTC_AlarmTime.RTC_Seconds);
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3790      	adds	r7, #144	; 0x90
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	08003a70 	.word	0x08003a70

08001e00 <assertTrue>:
/**
 * @brief	Assert than condition is true
 * @param	condition
 * @return bool: result of assertion
 */
bool assertTrue(bool condition){
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
	return condition==true?true:false;
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop

08001e24 <assertEqual>:
 * @brief	Assert than a equals b
 * @param	a
 * @param 	b
 * @return 	bool: result of assertion
 */
bool assertEqual(int a, int b){
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
	return a==b?true:false;
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	bf0c      	ite	eq
 8001e36:	2301      	moveq	r3, #1
 8001e38:	2300      	movne	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	2300      	movs	r3, #0
 8001e56:	73bb      	strb	r3, [r7, #14]
 8001e58:	230f      	movs	r3, #15
 8001e5a:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	78db      	ldrb	r3, [r3, #3]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d038      	beq.n	8001ed6 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001e64:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <NVIC_Init+0xbc>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	f1c3 0304 	rsb	r3, r3, #4
 8001e78:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8001e7a:	7b7a      	ldrb	r2, [r7, #13]
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	fa42 f303 	asr.w	r3, r2, r3
 8001e82:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	785b      	ldrb	r3, [r3, #1]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	7bbb      	ldrb	r3, [r7, #14]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	789a      	ldrb	r2, [r3, #2]
 8001e96:	7b7b      	ldrb	r3, [r7, #13]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001ea8:	4a17      	ldr	r2, [pc, #92]	; (8001f08 <NVIC_Init+0xc0>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001eb6:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <NVIC_Init+0xc0>)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	095b      	lsrs	r3, r3, #5
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	f003 031f 	and.w	r3, r3, #31
 8001eca:	2101      	movs	r1, #1
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001ed0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001ed4:	e00f      	b.n	8001ef6 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001ed6:	490c      	ldr	r1, [pc, #48]	; (8001f08 <NVIC_Init+0xc0>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	095b      	lsrs	r3, r3, #5
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	f003 031f 	and.w	r3, r3, #31
 8001eea:	2201      	movs	r2, #1
 8001eec:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001eee:	f100 0320 	add.w	r3, r0, #32
 8001ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00
 8001f08:	e000e100 	.word	0xe000e100

08001f0c <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8001f10:	2101      	movs	r1, #1
 8001f12:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f16:	f000 fd91 	bl	8002a3c <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f20:	f000 fd8c 	bl	8002a3c <RCC_APB2PeriphResetCmd>
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001f46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f4a:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	791b      	ldrb	r3, [r3, #4]
 8001f50:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8001f56:	4313      	orrs	r3, r2
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <ADC_Init+0xa8>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8001f7a:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8001f80:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	795b      	ldrb	r3, [r3, #5]
 8001f86:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001fa2:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	7d1b      	ldrb	r3, [r3, #20]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	7afb      	ldrb	r3, [r7, #11]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	051b      	lsls	r3, r3, #20
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	c0fff7fd 	.word	0xc0fff7fd

08001fd4 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d006      	beq.n	8001ff4 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f043 0201 	orr.w	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8001ff2:	e005      	b.n	8002000 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 0201 	bic.w	r2, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
  }
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	4608      	mov	r0, r1
 8002016:	4611      	mov	r1, r2
 8002018:	461a      	mov	r2, r3
 800201a:	4603      	mov	r3, r0
 800201c:	70fb      	strb	r3, [r7, #3]
 800201e:	460b      	mov	r3, r1
 8002020:	70bb      	strb	r3, [r7, #2]
 8002022:	4613      	mov	r3, r2
 8002024:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	2b09      	cmp	r3, #9
 8002032:	d923      	bls.n	800207c <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	f1a3 020a 	sub.w	r2, r3, #10
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	2207      	movs	r2, #7
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	43db      	mvns	r3, r3
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4013      	ands	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8002058:	7879      	ldrb	r1, [r7, #1]
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	f1a3 020a 	sub.w	r2, r3, #10
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	4313      	orrs	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	e01e      	b.n	80020ba <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8002082:	78fa      	ldrb	r2, [r7, #3]
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	2207      	movs	r2, #7
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	43db      	mvns	r3, r3
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4013      	ands	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800209c:	7879      	ldrb	r1, [r7, #1]
 800209e:	78fa      	ldrb	r2, [r7, #3]
 80020a0:	4613      	mov	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	4413      	add	r3, r2
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80020ba:	78bb      	ldrb	r3, [r7, #2]
 80020bc:	2b06      	cmp	r3, #6
 80020be:	d821      	bhi.n	8002104 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80020c6:	78bb      	ldrb	r3, [r7, #2]
 80020c8:	1e5a      	subs	r2, r3, #1
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	221f      	movs	r2, #31
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	43db      	mvns	r3, r3
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4013      	ands	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80020e2:	78f9      	ldrb	r1, [r7, #3]
 80020e4:	78bb      	ldrb	r3, [r7, #2]
 80020e6:	1e5a      	subs	r2, r3, #1
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	fa01 f303 	lsl.w	r3, r1, r3
 80020f2:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8002102:	e047      	b.n	8002194 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8002104:	78bb      	ldrb	r3, [r7, #2]
 8002106:	2b0c      	cmp	r3, #12
 8002108:	d821      	bhi.n	800214e <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8002110:	78bb      	ldrb	r3, [r7, #2]
 8002112:	1fda      	subs	r2, r3, #7
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	221f      	movs	r2, #31
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	43db      	mvns	r3, r3
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4013      	ands	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800212c:	78f9      	ldrb	r1, [r7, #3]
 800212e:	78bb      	ldrb	r3, [r7, #2]
 8002130:	1fda      	subs	r2, r3, #7
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	fa01 f303 	lsl.w	r3, r1, r3
 800213c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4313      	orrs	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800214c:	e022      	b.n	8002194 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8002154:	78bb      	ldrb	r3, [r7, #2]
 8002156:	f1a3 020d 	sub.w	r2, r3, #13
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	221f      	movs	r2, #31
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	43db      	mvns	r3, r3
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4013      	ands	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8002172:	78f9      	ldrb	r1, [r7, #3]
 8002174:	78bb      	ldrb	r3, [r7, #2]
 8002176:	f1a3 020d 	sub.w	r2, r3, #13
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	fa01 f303 	lsl.w	r3, r1, r3
 8002184:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	609a      	str	r2, [r3, #8]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021cc:	b29b      	uxth	r3, r3
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop

080021dc <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 80021e8:	2300      	movs	r3, #0
 80021ea:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
 80021fc:	e001      	b.n	8002202 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8002202:	7bfb      	ldrb	r3, [r7, #15]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <DAC_SetChannel1Data+0x34>)
 8002222:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	3308      	adds	r3, #8
 800222c:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	461a      	mov	r2, r3
 8002232:	887b      	ldrh	r3, [r7, #2]
 8002234:	6013      	str	r3, [r2, #0]
}
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40007400 	.word	0x40007400

08002248 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <DMA_Init+0xac>)
 8002260:	4013      	ands	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002272:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800227e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800228a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002296:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229c:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f023 0307 	bic.w	r3, r3, #7
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	4313      	orrs	r3, r2
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	60da      	str	r2, [r3, #12]
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	f01c803f 	.word	0xf01c803f

080022f8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d006      	beq.n	8002318 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f043 0201 	orr.w	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8002316:	e005      	b.n	8002324 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f023 0201 	bic.w	r2, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	601a      	str	r2, [r3, #0]
  }
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	e001      	b.n	8002352 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800234e:	2300      	movs	r3, #0
 8002350:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8002352:	7bfb      	ldrb	r3, [r7, #15]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002360:	b480      	push	{r7}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a15      	ldr	r2, [pc, #84]	; (80023cc <DMA_GetFlagStatus+0x6c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d802      	bhi.n	8002380 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <DMA_GetFlagStatus+0x70>)
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	e001      	b.n	8002384 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <DMA_GetFlagStatus+0x74>)
 8002382:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	e002      	b.n	800239c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80023a2:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80023b2:	2301      	movs	r3, #1
 80023b4:	75fb      	strb	r3, [r7, #23]
 80023b6:	e001      	b.n	80023bc <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80023b8:	2300      	movs	r3, #0
 80023ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	4002640f 	.word	0x4002640f
 80023d0:	40026000 	.word	0x40026000
 80023d4:	40026400 	.word	0x40026400

080023d8 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a10      	ldr	r2, [pc, #64]	; (8002428 <DMA_ClearFlag+0x50>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d802      	bhi.n	80023f0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <DMA_ClearFlag+0x54>)
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	e001      	b.n	80023f4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80023f0:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <DMA_ClearFlag+0x58>)
 80023f2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002404:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 800240c:	e006      	b.n	800241c <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002414:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	6093      	str	r3, [r2, #8]
  }    
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	4002640f 	.word	0x4002640f
 800242c:	40026000 	.word	0x40026000
 8002430:	40026400 	.word	0x40026400

08002434 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8002440:	4b34      	ldr	r3, [pc, #208]	; (8002514 <EXTI_Init+0xe0>)
 8002442:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	799b      	ldrb	r3, [r3, #6]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d04f      	beq.n	80024ec <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800244c:	4931      	ldr	r1, [pc, #196]	; (8002514 <EXTI_Init+0xe0>)
 800244e:	4b31      	ldr	r3, [pc, #196]	; (8002514 <EXTI_Init+0xe0>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	43db      	mvns	r3, r3
 8002458:	4013      	ands	r3, r2
 800245a:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800245c:	492d      	ldr	r1, [pc, #180]	; (8002514 <EXTI_Init+0xe0>)
 800245e:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <EXTI_Init+0xe0>)
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	43db      	mvns	r3, r3
 8002468:	4013      	ands	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	791b      	ldrb	r3, [r3, #4]
 8002470:	461a      	mov	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4413      	add	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	6811      	ldr	r1, [r2, #0]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8002486:	4923      	ldr	r1, [pc, #140]	; (8002514 <EXTI_Init+0xe0>)
 8002488:	4b22      	ldr	r3, [pc, #136]	; (8002514 <EXTI_Init+0xe0>)
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	43db      	mvns	r3, r3
 8002492:	4013      	ands	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8002496:	491f      	ldr	r1, [pc, #124]	; (8002514 <EXTI_Init+0xe0>)
 8002498:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <EXTI_Init+0xe0>)
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	4013      	ands	r3, r2
 80024a4:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	795b      	ldrb	r3, [r3, #5]
 80024aa:	2b10      	cmp	r3, #16
 80024ac:	d10e      	bne.n	80024cc <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80024ae:	4919      	ldr	r1, [pc, #100]	; (8002514 <EXTI_Init+0xe0>)
 80024b0:	4b18      	ldr	r3, [pc, #96]	; (8002514 <EXTI_Init+0xe0>)
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80024bc:	4915      	ldr	r1, [pc, #84]	; (8002514 <EXTI_Init+0xe0>)
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <EXTI_Init+0xe0>)
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80024ca:	e01d      	b.n	8002508 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <EXTI_Init+0xe0>)
 80024ce:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	795b      	ldrb	r3, [r3, #5]
 80024d4:	461a      	mov	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4413      	add	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	6811      	ldr	r1, [r2, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80024ea:	e00d      	b.n	8002508 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	791b      	ldrb	r3, [r3, #4]
 80024f0:	461a      	mov	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4413      	add	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	6811      	ldr	r1, [r2, #0]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	43d2      	mvns	r2, r2
 8002504:	400a      	ands	r2, r1
 8002506:	601a      	str	r2, [r3, #0]
  }
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	40013c00 	.word	0x40013c00

08002518 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <EXTI_ClearITPendingBit+0x1c>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6153      	str	r3, [r2, #20]
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40013c00 	.word	0x40013c00

08002538 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	e076      	b.n	8002642 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002554:	2201      	movs	r2, #1
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4013      	ands	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	429a      	cmp	r2, r3
 800256e:	d165      	bne.n	800263c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	2103      	movs	r1, #3
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	401a      	ands	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	791b      	ldrb	r3, [r3, #4]
 800258e:	4619      	mov	r1, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	791b      	ldrb	r3, [r3, #4]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d003      	beq.n	80025ae <GPIO_Init+0x76>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	791b      	ldrb	r3, [r3, #4]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d12e      	bne.n	800260c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2103      	movs	r1, #3
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	401a      	ands	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	795b      	ldrb	r3, [r3, #5]
 80025cc:	4619      	mov	r1, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2101      	movs	r1, #1
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	401a      	ands	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	799b      	ldrb	r3, [r3, #6]
 80025fa:	4619      	mov	r1, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	b29b      	uxth	r3, r3
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	b29b      	uxth	r3, r3
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2103      	movs	r1, #3
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	401a      	ands	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	79db      	ldrb	r3, [r3, #7]
 800262c:	4619      	mov	r1, r3
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3301      	adds	r3, #1
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b0f      	cmp	r3, #15
 8002646:	d985      	bls.n	8002554 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8002648:	bf00      	nop
 800264a:	371c      	adds	r7, #28
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	831a      	strh	r2, [r3, #24]
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop

08002674 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	887a      	ldrh	r2, [r7, #2]
 8002684:	835a      	strh	r2, [r3, #26]
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop

08002694 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	887b      	ldrh	r3, [r7, #2]
 80026a6:	405a      	eors	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	615a      	str	r2, [r3, #20]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	807b      	strh	r3, [r7, #2]
 80026c4:	4613      	mov	r3, r2
 80026c6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80026d0:	787a      	ldrb	r2, [r7, #1]
 80026d2:	887b      	ldrh	r3, [r7, #2]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80026e0:	887b      	ldrh	r3, [r7, #2]
 80026e2:	08db      	lsrs	r3, r3, #3
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	4618      	mov	r0, r3
 80026e8:	887b      	ldrh	r3, [r7, #2]
 80026ea:	08db      	lsrs	r3, r3, #3
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3208      	adds	r2, #8
 80026f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80026f8:	887b      	ldrh	r3, [r7, #2]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	210f      	movs	r1, #15
 8002702:	fa01 f303 	lsl.w	r3, r1, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	ea02 0103 	and.w	r1, r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f100 0208 	add.w	r2, r0, #8
 8002712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002716:	887b      	ldrh	r3, [r7, #2]
 8002718:	08db      	lsrs	r3, r3, #3
 800271a:	b29b      	uxth	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3208      	adds	r2, #8
 8002722:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800272c:	887b      	ldrh	r3, [r7, #2]
 800272e:	08db      	lsrs	r3, r3, #3
 8002730:	b29b      	uxth	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3208      	adds	r2, #8
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop

0800274c <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the backup domain.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 8002756:	4a04      	ldr	r2, [pc, #16]	; (8002768 <PWR_BackupAccessCmd+0x1c>)
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	6013      	str	r3, [r2, #0]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	420e0020 	.word	0x420e0020

0800276c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	; 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002774:	2300      	movs	r3, #0
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	2300      	movs	r3, #0
 800277e:	61fb      	str	r3, [r7, #28]
 8002780:	2302      	movs	r3, #2
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	2302      	movs	r3, #2
 800278a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800278c:	4b48      	ldr	r3, [pc, #288]	; (80028b0 <RCC_GetClocksFreq+0x144>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 030c 	and.w	r3, r3, #12
 8002794:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	2b04      	cmp	r3, #4
 800279a:	d007      	beq.n	80027ac <RCC_GetClocksFreq+0x40>
 800279c:	2b08      	cmp	r3, #8
 800279e:	d009      	beq.n	80027b4 <RCC_GetClocksFreq+0x48>
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d13f      	bne.n	8002824 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a43      	ldr	r2, [pc, #268]	; (80028b4 <RCC_GetClocksFreq+0x148>)
 80027a8:	601a      	str	r2, [r3, #0]
      break;
 80027aa:	e03f      	b.n	800282c <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a42      	ldr	r2, [pc, #264]	; (80028b8 <RCC_GetClocksFreq+0x14c>)
 80027b0:	601a      	str	r2, [r3, #0]
      break;
 80027b2:	e03b      	b.n	800282c <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80027b4:	4b3e      	ldr	r3, [pc, #248]	; (80028b0 <RCC_GetClocksFreq+0x144>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027bc:	0d9b      	lsrs	r3, r3, #22
 80027be:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027c0:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <RCC_GetClocksFreq+0x144>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027c8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00d      	beq.n	80027ec <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80027d0:	4a39      	ldr	r2, [pc, #228]	; (80028b8 <RCC_GetClocksFreq+0x14c>)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80027d8:	4b35      	ldr	r3, [pc, #212]	; (80028b0 <RCC_GetClocksFreq+0x144>)
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027e0:	400b      	ands	r3, r1
 80027e2:	099b      	lsrs	r3, r3, #6
 80027e4:	fb03 f302 	mul.w	r3, r3, r2
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	e00c      	b.n	8002806 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80027ec:	4a31      	ldr	r2, [pc, #196]	; (80028b4 <RCC_GetClocksFreq+0x148>)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027f4:	4b2e      	ldr	r3, [pc, #184]	; (80028b0 <RCC_GetClocksFreq+0x144>)
 80027f6:	6859      	ldr	r1, [r3, #4]
 80027f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027fc:	400b      	ands	r3, r1
 80027fe:	099b      	lsrs	r3, r3, #6
 8002800:	fb03 f302 	mul.w	r3, r3, r2
 8002804:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002806:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <RCC_GetClocksFreq+0x144>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800280e:	0c1b      	lsrs	r3, r3, #16
 8002810:	3301      	adds	r3, #1
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	fbb2 f2f3 	udiv	r2, r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	601a      	str	r2, [r3, #0]
      break;
 8002822:	e003      	b.n	800282c <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a23      	ldr	r2, [pc, #140]	; (80028b4 <RCC_GetClocksFreq+0x148>)
 8002828:	601a      	str	r2, [r3, #0]
      break;
 800282a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800282c:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <RCC_GetClocksFreq+0x144>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002834:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800283c:	4a1f      	ldr	r2, [pc, #124]	; (80028bc <RCC_GetClocksFreq+0x150>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4413      	add	r3, r2
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	40da      	lsrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8002854:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <RCC_GetClocksFreq+0x144>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800285c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	0a9b      	lsrs	r3, r3, #10
 8002862:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8002864:	4a15      	ldr	r2, [pc, #84]	; (80028bc <RCC_GetClocksFreq+0x150>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4413      	add	r3, r2
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	40da      	lsrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <RCC_GetClocksFreq+0x144>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002884:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	0b5b      	lsrs	r3, r3, #13
 800288a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800288c:	4a0b      	ldr	r2, [pc, #44]	; (80028bc <RCC_GetClocksFreq+0x150>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	4413      	add	r3, r2
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	40da      	lsrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	60da      	str	r2, [r3, #12]
}
 80028a4:	bf00      	nop
 80028a6:	3724      	adds	r7, #36	; 0x24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	40023800 	.word	0x40023800
 80028b4:	00f42400 	.word	0x00f42400
 80028b8:	007a1200 	.word	0x007a1200
 80028bc:	20000004 	.word	0x20000004

080028c0 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028d6:	d111      	bne.n	80028fc <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 80028d8:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <RCC_RTCCLKConfig+0x58>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80028e4:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80028ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 80028f6:	4a08      	ldr	r2, [pc, #32]	; (8002918 <RCC_RTCCLKConfig+0x58>)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6093      	str	r3, [r2, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 80028fc:	4906      	ldr	r1, [pc, #24]	; (8002918 <RCC_RTCCLKConfig+0x58>)
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <RCC_RTCCLKConfig+0x58>)
 8002900:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002908:	4313      	orrs	r3, r2
 800290a:	670b      	str	r3, [r1, #112]	; 0x70
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	40023800 	.word	0x40023800

0800291c <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8002926:	4a04      	ldr	r2, [pc, #16]	; (8002938 <RCC_RTCCLKCmd+0x1c>)
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	6013      	str	r3, [r2, #0]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	42470e3c 	.word	0x42470e3c

0800293c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d006      	beq.n	800295c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800294e:	490a      	ldr	r1, [pc, #40]	; (8002978 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002950:	4b09      	ldr	r3, [pc, #36]	; (8002978 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4313      	orrs	r3, r2
 8002958:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800295a:	e006      	b.n	800296a <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800295c:	4906      	ldr	r1, [pc, #24]	; (8002978 <RCC_AHB1PeriphClockCmd+0x3c>)
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	43db      	mvns	r3, r3
 8002966:	4013      	ands	r3, r2
 8002968:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800

0800297c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d006      	beq.n	800299c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800298e:	490a      	ldr	r1, [pc, #40]	; (80029b8 <RCC_APB1PeriphClockCmd+0x3c>)
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <RCC_APB1PeriphClockCmd+0x3c>)
 8002992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4313      	orrs	r3, r2
 8002998:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800299a:	e006      	b.n	80029aa <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800299c:	4906      	ldr	r1, [pc, #24]	; (80029b8 <RCC_APB1PeriphClockCmd+0x3c>)
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <RCC_APB1PeriphClockCmd+0x3c>)
 80029a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	4013      	ands	r3, r2
 80029a8:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800

080029bc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d006      	beq.n	80029dc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80029ce:	490a      	ldr	r1, [pc, #40]	; (80029f8 <RCC_APB2PeriphClockCmd+0x3c>)
 80029d0:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <RCC_APB2PeriphClockCmd+0x3c>)
 80029d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80029da:	e006      	b.n	80029ea <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80029dc:	4906      	ldr	r1, [pc, #24]	; (80029f8 <RCC_APB2PeriphClockCmd+0x3c>)
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <RCC_APB2PeriphClockCmd+0x3c>)
 80029e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	4013      	ands	r3, r2
 80029e8:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800

080029fc <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002a08:	78fb      	ldrb	r3, [r7, #3]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d006      	beq.n	8002a1c <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8002a0e:	490a      	ldr	r1, [pc, #40]	; (8002a38 <RCC_APB1PeriphResetCmd+0x3c>)
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <RCC_APB1PeriphResetCmd+0x3c>)
 8002a12:	6a1a      	ldr	r2, [r3, #32]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8002a1a:	e006      	b.n	8002a2a <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8002a1c:	4906      	ldr	r1, [pc, #24]	; (8002a38 <RCC_APB1PeriphResetCmd+0x3c>)
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <RCC_APB1PeriphResetCmd+0x3c>)
 8002a20:	6a1a      	ldr	r2, [r3, #32]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	4013      	ands	r3, r2
 8002a28:	620b      	str	r3, [r1, #32]
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800

08002a3c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d006      	beq.n	8002a5c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002a4e:	490a      	ldr	r1, [pc, #40]	; (8002a78 <RCC_APB2PeriphResetCmd+0x3c>)
 8002a50:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <RCC_APB2PeriphResetCmd+0x3c>)
 8002a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8002a5a:	e006      	b.n	8002a6a <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8002a5c:	4906      	ldr	r1, [pc, #24]	; (8002a78 <RCC_APB2PeriphResetCmd+0x3c>)
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <RCC_APB2PeriphResetCmd+0x3c>)
 8002a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	4013      	ands	r3, r2
 8002a68:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800

08002a7c <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 8002a84:	2300      	movs	r3, #0
 8002a86:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <RTC_Init+0x74>)
 8002a8a:	22ca      	movs	r2, #202	; 0xca
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8002a8e:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <RTC_Init+0x74>)
 8002a90:	2253      	movs	r2, #83	; 0x53
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8002a94:	f000 f82e 	bl	8002af4 <RTC_EnterInitMode>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d102      	bne.n	8002aa4 <RTC_Init+0x28>
  {
    status = ERROR;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
 8002aa2:	e01c      	b.n	8002ade <RTC_Init+0x62>
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8002aa4:	4a12      	ldr	r2, [pc, #72]	; (8002af0 <RTC_Init+0x74>)
 8002aa6:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <RTC_Init+0x74>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aae:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 8002ab0:	490f      	ldr	r1, [pc, #60]	; (8002af0 <RTC_Init+0x74>)
 8002ab2:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <RTC_Init+0x74>)
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 8002abe:	4a0c      	ldr	r2, [pc, #48]	; (8002af0 <RTC_Init+0x74>)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	6113      	str	r3, [r2, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 8002ac6:	490a      	ldr	r1, [pc, #40]	; (8002af0 <RTC_Init+0x74>)
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <RTC_Init+0x74>)
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	041b      	lsls	r3, r3, #16
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	610b      	str	r3, [r1, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8002ad6:	f000 f847 	bl	8002b68 <RTC_ExitInitMode>

    status = SUCCESS;    
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8002ade:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <RTC_Init+0x74>)
 8002ae0:	22ff      	movs	r2, #255	; 0xff
 8002ae2:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40002800 	.word	0x40002800

08002af4 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
  __IO uint32_t initcounter = 0x00;
 8002afa:	2300      	movs	r3, #0
 8002afc:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 8002afe:	2300      	movs	r3, #0
 8002b00:	73fb      	strb	r3, [r7, #15]
  uint32_t initstatus = 0x00;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002b06:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <RTC_EnterInitMode+0x70>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d11e      	bne.n	8002b50 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8002b12:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <RTC_EnterInitMode+0x70>)
 8002b14:	f04f 32ff 	mov.w	r2, #4294967295
 8002b18:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8002b1a:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <RTC_EnterInitMode+0x70>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b22:	60bb      	str	r3, [r7, #8]
      initcounter++;  
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3301      	adds	r3, #1
 8002b28:	607b      	str	r3, [r7, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b30:	d002      	beq.n	8002b38 <RTC_EnterInitMode+0x44>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <RTC_EnterInitMode+0x26>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 8002b38:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <RTC_EnterInitMode+0x70>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <RTC_EnterInitMode+0x56>
    {
      status = SUCCESS;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
 8002b48:	e004      	b.n	8002b54 <RTC_EnterInitMode+0x60>
    }
    else
    {
      status = ERROR;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	73fb      	strb	r3, [r7, #15]
 8002b4e:	e001      	b.n	8002b54 <RTC_EnterInitMode+0x60>
    }        
  }
  else
  {
    status = SUCCESS;  
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
  } 
    
  return (status);  
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40002800 	.word	0x40002800

08002b68 <RTC_ExitInitMode>:
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002b6c:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <RTC_ExitInitMode+0x1c>)
 8002b6e:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <RTC_ExitInitMode+0x1c>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b76:	60d3      	str	r3, [r2, #12]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40002800 	.word	0x40002800

08002b88 <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
  __IO uint32_t synchrocounter = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]
  uint32_t synchrostatus = 0x00;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8002b9a:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <RTC_WaitForSynchro+0x74>)
 8002b9c:	22ca      	movs	r2, #202	; 0xca
 8002b9e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8002ba0:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <RTC_WaitForSynchro+0x74>)
 8002ba2:	2253      	movs	r2, #83	; 0x53
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 8002ba6:	4a15      	ldr	r2, [pc, #84]	; (8002bfc <RTC_WaitForSynchro+0x74>)
 8002ba8:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <RTC_WaitForSynchro+0x74>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bb0:	60d3      	str	r3, [r2, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <RTC_WaitForSynchro+0x74>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	60bb      	str	r3, [r7, #8]
    synchrocounter++;  
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	607b      	str	r3, [r7, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bc8:	d002      	beq.n	8002bd0 <RTC_WaitForSynchro+0x48>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <RTC_WaitForSynchro+0x2a>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <RTC_WaitForSynchro+0x74>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <RTC_WaitForSynchro+0x5a>
  {
    status = SUCCESS;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	e001      	b.n	8002be6 <RTC_WaitForSynchro+0x5e>
  }
  else
  {
    status = ERROR;
 8002be2:	2300      	movs	r3, #0
 8002be4:	73fb      	strb	r3, [r7, #15]
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8002be6:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <RTC_WaitForSynchro+0x74>)
 8002be8:	22ff      	movs	r2, #255	; 0xff
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40002800 	.word	0x40002800

08002c00 <RTC_GetITStatus>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 8002c14:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <RTC_GetITStatus+0x64>)
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 8002c1e:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <RTC_GetITStatus+0x64>)
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	401a      	ands	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0bd9      	lsrs	r1, r3, #15
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	400b      	ands	r3, r1
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <RTC_GetITStatus+0x64>)
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	091b      	lsrs	r3, r3, #4
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d006      	beq.n	8002c52 <RTC_GetITStatus+0x52>
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <RTC_GetITStatus+0x52>
  {
    bitstatus = SET;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	75fb      	strb	r3, [r7, #23]
 8002c50:	e001      	b.n	8002c56 <RTC_GetITStatus+0x56>
  }
  else
  {
    bitstatus = RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	371c      	adds	r7, #28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	40002800 	.word	0x40002800

08002c68 <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 8002c7a:	4909      	ldr	r1, [pc, #36]	; (8002ca0 <RTC_ClearITPendingBit+0x38>)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c84:	43da      	mvns	r2, r3
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <RTC_ClearITPendingBit+0x38>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60cb      	str	r3, [r1, #12]
}
 8002c92:	bf00      	nop
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40002800 	.word	0x40002800

08002ca4 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a2e      	ldr	r2, [pc, #184]	; (8002d68 <SPI_I2S_DeInit+0xc4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d10a      	bne.n	8002cca <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002cba:	f7ff febf 	bl	8002a3c <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002cc4:	f7ff feba 	bl	8002a3c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8002cc8:	e049      	b.n	8002d5e <SPI_I2S_DeInit+0xba>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a27      	ldr	r2, [pc, #156]	; (8002d6c <SPI_I2S_DeInit+0xc8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d10a      	bne.n	8002ce8 <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002cd8:	f7ff fe90 	bl	80029fc <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8002cdc:	2100      	movs	r1, #0
 8002cde:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ce2:	f7ff fe8b 	bl	80029fc <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8002ce6:	e03a      	b.n	8002d5e <SPI_I2S_DeInit+0xba>
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else if (SPIx == SPI3)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a21      	ldr	r2, [pc, #132]	; (8002d70 <SPI_I2S_DeInit+0xcc>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d10a      	bne.n	8002d06 <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002cf6:	f7ff fe81 	bl	80029fc <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002d00:	f7ff fe7c 	bl	80029fc <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8002d04:	e02b      	b.n	8002d5e <SPI_I2S_DeInit+0xba>
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  }
  else if (SPIx == SPI4)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a1a      	ldr	r2, [pc, #104]	; (8002d74 <SPI_I2S_DeInit+0xd0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d10a      	bne.n	8002d24 <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 8002d0e:	2101      	movs	r1, #1
 8002d10:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d14:	f7ff fe92 	bl	8002a3c <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8002d18:	2100      	movs	r1, #0
 8002d1a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d1e:	f7ff fe8d 	bl	8002a3c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8002d22:	e01c      	b.n	8002d5e <SPI_I2S_DeInit+0xba>
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
  }
  else if (SPIx == SPI5)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a14      	ldr	r2, [pc, #80]	; (8002d78 <SPI_I2S_DeInit+0xd4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d10a      	bne.n	8002d42 <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002d32:	f7ff fe83 	bl	8002a3c <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8002d36:	2100      	movs	r1, #0
 8002d38:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002d3c:	f7ff fe7e 	bl	8002a3c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8002d40:	e00d      	b.n	8002d5e <SPI_I2S_DeInit+0xba>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
  }
  else 
  {
    if (SPIx == SPI6)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a0d      	ldr	r2, [pc, #52]	; (8002d7c <SPI_I2S_DeInit+0xd8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d109      	bne.n	8002d5e <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002d50:	f7ff fe74 	bl	8002a3c <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8002d54:	2100      	movs	r1, #0
 8002d56:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002d5a:	f7ff fe6f 	bl	8002a3c <RCC_APB2PeriphResetCmd>
    }
  }
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40013000 	.word	0x40013000
 8002d6c:	40003800 	.word	0x40003800
 8002d70:	40003c00 	.word	0x40003c00
 8002d74:	40013400 	.word	0x40013400
 8002d78:	40015000 	.word	0x40015000
 8002d7c:	40015400 	.word	0x40015400

08002d80 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8002d94:	89fb      	ldrh	r3, [r7, #14]
 8002d96:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8002d9a:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	881a      	ldrh	r2, [r3, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	885b      	ldrh	r3, [r3, #2]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002dac:	4313      	orrs	r3, r2
 8002dae:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002db4:	4313      	orrs	r3, r2
 8002db6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	89fb      	ldrh	r3, [r7, #14]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	89fa      	ldrh	r2, [r7, #14]
 8002de2:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	8b9b      	ldrh	r3, [r3, #28]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	8a1a      	ldrh	r2, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	821a      	strh	r2, [r3, #16]
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d008      	beq.n	8002e2c <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8002e2a:	e007      	b.n	8002e3c <SPI_Cmd+0x34>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	801a      	strh	r2, [r3, #0]
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	899b      	ldrh	r3, [r3, #12]
 8002e54:	b29b      	uxth	r3, r3
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop

08002e64 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	819a      	strh	r2, [r3, #12]
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop

08002e84 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002e90:	2300      	movs	r3, #0
 8002e92:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	891b      	ldrh	r3, [r3, #8]
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	887b      	ldrh	r3, [r7, #2]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	73fb      	strb	r3, [r7, #15]
 8002ea8:	e001      	b.n	8002eae <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a29      	ldr	r2, [pc, #164]	; (8002f78 <TIM_TimeBaseInit+0xbc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d013      	beq.n	8002f00 <TIM_TimeBaseInit+0x44>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a28      	ldr	r2, [pc, #160]	; (8002f7c <TIM_TimeBaseInit+0xc0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00f      	beq.n	8002f00 <TIM_TimeBaseInit+0x44>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee6:	d00b      	beq.n	8002f00 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a25      	ldr	r2, [pc, #148]	; (8002f80 <TIM_TimeBaseInit+0xc4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d007      	beq.n	8002f00 <TIM_TimeBaseInit+0x44>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a24      	ldr	r2, [pc, #144]	; (8002f84 <TIM_TimeBaseInit+0xc8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d003      	beq.n	8002f00 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a23      	ldr	r2, [pc, #140]	; (8002f88 <TIM_TimeBaseInit+0xcc>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d108      	bne.n	8002f12 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8002f00:	89fb      	ldrh	r3, [r7, #14]
 8002f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f06:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	885a      	ldrh	r2, [r3, #2]
 8002f0c:	89fb      	ldrh	r3, [r7, #14]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a1d      	ldr	r2, [pc, #116]	; (8002f8c <TIM_TimeBaseInit+0xd0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00c      	beq.n	8002f34 <TIM_TimeBaseInit+0x78>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a1c      	ldr	r2, [pc, #112]	; (8002f90 <TIM_TimeBaseInit+0xd4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d008      	beq.n	8002f34 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8002f22:	89fb      	ldrh	r3, [r7, #14]
 8002f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f28:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	891a      	ldrh	r2, [r3, #8]
 8002f2e:	89fb      	ldrh	r3, [r7, #14]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	89fa      	ldrh	r2, [r7, #14]
 8002f38:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	881a      	ldrh	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a0a      	ldr	r2, [pc, #40]	; (8002f78 <TIM_TimeBaseInit+0xbc>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d003      	beq.n	8002f5a <TIM_TimeBaseInit+0x9e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a09      	ldr	r2, [pc, #36]	; (8002f7c <TIM_TimeBaseInit+0xc0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d104      	bne.n	8002f64 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	7a9b      	ldrb	r3, [r3, #10]
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	829a      	strh	r2, [r3, #20]
}
 8002f6a:	bf00      	nop
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40010000 	.word	0x40010000
 8002f7c:	40010400 	.word	0x40010400
 8002f80:	40000400 	.word	0x40000400
 8002f84:	40000800 	.word	0x40000800
 8002f88:	40000c00 	.word	0x40000c00
 8002f8c:	40001000 	.word	0x40001000
 8002f90:	40001400 	.word	0x40001400

08002f94 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d008      	beq.n	8002fb8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8002fb6:	e007      	b.n	8002fc8 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	f023 0301 	bic.w	r3, r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	801a      	strh	r2, [r3, #0]
  }
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	817b      	strh	r3, [r7, #10]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	81fb      	strh	r3, [r7, #14]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	8c1b      	ldrh	r3, [r3, #32]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	f023 0301 	bic.w	r3, r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	8c1b      	ldrh	r3, [r3, #32]
 8002ffe:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	889b      	ldrh	r3, [r3, #4]
 8003004:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	8b1b      	ldrh	r3, [r3, #24]
 800300a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 800300c:	897b      	ldrh	r3, [r7, #10]
 800300e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003012:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8003014:	897b      	ldrh	r3, [r7, #10]
 8003016:	f023 0303 	bic.w	r3, r3, #3
 800301a:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	881a      	ldrh	r2, [r3, #0]
 8003020:	897b      	ldrh	r3, [r7, #10]
 8003022:	4313      	orrs	r3, r2
 8003024:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8003026:	89fb      	ldrh	r3, [r7, #14]
 8003028:	f023 0302 	bic.w	r3, r3, #2
 800302c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	899a      	ldrh	r2, [r3, #12]
 8003032:	89fb      	ldrh	r3, [r7, #14]
 8003034:	4313      	orrs	r3, r2
 8003036:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	885a      	ldrh	r2, [r3, #2]
 800303c:	89fb      	ldrh	r3, [r7, #14]
 800303e:	4313      	orrs	r3, r2
 8003040:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a1e      	ldr	r2, [pc, #120]	; (80030c0 <TIM_OC1Init+0xec>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d003      	beq.n	8003052 <TIM_OC1Init+0x7e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a1d      	ldr	r2, [pc, #116]	; (80030c4 <TIM_OC1Init+0xf0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d123      	bne.n	800309a <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8003052:	89fb      	ldrh	r3, [r7, #14]
 8003054:	f023 0308 	bic.w	r3, r3, #8
 8003058:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	89da      	ldrh	r2, [r3, #14]
 800305e:	89fb      	ldrh	r3, [r7, #14]
 8003060:	4313      	orrs	r3, r2
 8003062:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8003064:	89fb      	ldrh	r3, [r7, #14]
 8003066:	f023 0304 	bic.w	r3, r3, #4
 800306a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	889a      	ldrh	r2, [r3, #4]
 8003070:	89fb      	ldrh	r3, [r7, #14]
 8003072:	4313      	orrs	r3, r2
 8003074:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 8003076:	89bb      	ldrh	r3, [r7, #12]
 8003078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800307c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800307e:	89bb      	ldrh	r3, [r7, #12]
 8003080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003084:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	8a1a      	ldrh	r2, [r3, #16]
 800308a:	89bb      	ldrh	r3, [r7, #12]
 800308c:	4313      	orrs	r3, r2
 800308e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	8a5a      	ldrh	r2, [r3, #18]
 8003094:	89bb      	ldrh	r3, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	89ba      	ldrh	r2, [r7, #12]
 800309e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	897a      	ldrh	r2, [r7, #10]
 80030a4:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	89fa      	ldrh	r2, [r7, #14]
 80030b2:	841a      	strh	r2, [r3, #32]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	40010000 	.word	0x40010000
 80030c4:	40010400 	.word	0x40010400

080030c8 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	8b1b      	ldrh	r3, [r3, #24]
 80030dc:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 80030de:	89fb      	ldrh	r3, [r7, #14]
 80030e0:	f023 0308 	bic.w	r3, r3, #8
 80030e4:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80030e6:	89fa      	ldrh	r2, [r7, #14]
 80030e8:	887b      	ldrh	r3, [r7, #2]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	89fa      	ldrh	r2, [r7, #14]
 80030f2:	831a      	strh	r2, [r3, #24]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	807b      	strh	r3, [r7, #2]
 800310c:	4613      	mov	r3, r2
 800310e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003110:	787b      	ldrb	r3, [r7, #1]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d008      	beq.n	8003128 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	899b      	ldrh	r3, [r3, #12]
 800311a:	b29a      	uxth	r2, r3
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	4313      	orrs	r3, r2
 8003120:	b29a      	uxth	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8003126:	e009      	b.n	800313c <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	899b      	ldrh	r3, [r3, #12]
 800312c:	b29a      	uxth	r2, r3
 800312e:	887b      	ldrh	r3, [r7, #2]
 8003130:	43db      	mvns	r3, r3
 8003132:	b29b      	uxth	r3, r3
 8003134:	4013      	ands	r3, r2
 8003136:	b29a      	uxth	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	819a      	strh	r2, [r3, #12]
  }
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8003154:	2300      	movs	r3, #0
 8003156:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8003158:	2300      	movs	r3, #0
 800315a:	81bb      	strh	r3, [r7, #12]
 800315c:	2300      	movs	r3, #0
 800315e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	8a1b      	ldrh	r3, [r3, #16]
 8003164:	b29a      	uxth	r2, r3
 8003166:	887b      	ldrh	r3, [r7, #2]
 8003168:	4013      	ands	r3, r2
 800316a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	899b      	ldrh	r3, [r3, #12]
 8003170:	b29a      	uxth	r2, r3
 8003172:	887b      	ldrh	r3, [r7, #2]
 8003174:	4013      	ands	r3, r2
 8003176:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8003178:	89bb      	ldrh	r3, [r7, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <TIM_GetITStatus+0x42>
 800317e:	897b      	ldrh	r3, [r7, #10]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8003184:	2301      	movs	r3, #1
 8003186:	73fb      	strb	r3, [r7, #15]
 8003188:	e001      	b.n	800318e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800318a:	2300      	movs	r3, #0
 800318c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800318e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80031a8:	887b      	ldrh	r3, [r7, #2]
 80031aa:	43db      	mvns	r3, r3
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	821a      	strh	r2, [r3, #16]
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop

080031c0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08a      	sub	sp, #40	; 0x28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80031ca:	2300      	movs	r3, #0
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
 80031ce:	2300      	movs	r3, #0
 80031d0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	8a1b      	ldrh	r3, [r3, #16]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	88db      	ldrh	r3, [r3, #6]
 80031ee:	461a      	mov	r2, r3
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	4313      	orrs	r3, r2
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	899b      	ldrh	r3, [r3, #12]
 8003202:	b29b      	uxth	r3, r3
 8003204:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800320c:	f023 030c 	bic.w	r3, r3, #12
 8003210:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	889a      	ldrh	r2, [r3, #4]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	891b      	ldrh	r3, [r3, #8]
 800321a:	4313      	orrs	r3, r2
 800321c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8003222:	4313      	orrs	r3, r2
 8003224:	b29b      	uxth	r3, r3
 8003226:	461a      	mov	r2, r3
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	4313      	orrs	r3, r2
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	b29a      	uxth	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	8a9b      	ldrh	r3, [r3, #20]
 800323a:	b29b      	uxth	r3, r3
 800323c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003244:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	899b      	ldrh	r3, [r3, #12]
 800324a:	461a      	mov	r2, r3
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	4313      	orrs	r3, r2
 8003250:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	b29a      	uxth	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800325a:	f107 0308 	add.w	r3, r7, #8
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fa84 	bl	800276c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a30      	ldr	r2, [pc, #192]	; (8003328 <USART_Init+0x168>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d003      	beq.n	8003274 <USART_Init+0xb4>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a2f      	ldr	r2, [pc, #188]	; (800332c <USART_Init+0x16c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d102      	bne.n	800327a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	623b      	str	r3, [r7, #32]
 8003278:	e001      	b.n	800327e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	899b      	ldrh	r3, [r3, #12]
 8003282:	b29b      	uxth	r3, r3
 8003284:	b21b      	sxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	da0c      	bge.n	80032a4 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800328a:	6a3a      	ldr	r2, [r7, #32]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	009a      	lsls	r2, r3, #2
 8003294:	441a      	add	r2, r3
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	e00b      	b.n	80032bc <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80032a4:	6a3a      	ldr	r2, [r7, #32]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	009a      	lsls	r2, r3, #2
 80032ae:	441a      	add	r2, r3
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ba:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	4a1c      	ldr	r2, [pc, #112]	; (8003330 <USART_Init+0x170>)
 80032c0:	fba2 2303 	umull	r2, r3, r2, r3
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	091b      	lsrs	r3, r3, #4
 80032ce:	2264      	movs	r2, #100	; 0x64
 80032d0:	fb02 f303 	mul.w	r3, r2, r3
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	899b      	ldrh	r3, [r3, #12]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	b21b      	sxth	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	da0c      	bge.n	8003300 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	3332      	adds	r3, #50	; 0x32
 80032ec:	4a10      	ldr	r2, [pc, #64]	; (8003330 <USART_Init+0x170>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fa:	4313      	orrs	r3, r2
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
 80032fe:	e00b      	b.n	8003318 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	3332      	adds	r3, #50	; 0x32
 8003306:	4a0a      	ldr	r2, [pc, #40]	; (8003330 <USART_Init+0x170>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003314:	4313      	orrs	r3, r2
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	b29a      	uxth	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	811a      	strh	r2, [r3, #8]
}
 8003320:	bf00      	nop
 8003322:	3728      	adds	r7, #40	; 0x28
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40011000 	.word	0x40011000
 800332c:	40011400 	.word	0x40011400
 8003330:	51eb851f 	.word	0x51eb851f

08003334 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d008      	beq.n	8003358 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	899b      	ldrh	r3, [r3, #12]
 800334a:	b29b      	uxth	r3, r3
 800334c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003350:	b29a      	uxth	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8003356:	e007      	b.n	8003368 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	899b      	ldrh	r3, [r3, #12]
 800335c:	b29b      	uxth	r3, r3
 800335e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003362:	b29a      	uxth	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	819a      	strh	r2, [r3, #12]
  }
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8003380:	887b      	ldrh	r3, [r7, #2]
 8003382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003386:	b29a      	uxth	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	809a      	strh	r2, [r3, #4]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	889b      	ldrh	r3, [r3, #4]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033aa:	b29b      	uxth	r3, r3
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	807b      	strh	r3, [r7, #2]
 80033c4:	4613      	mov	r3, r2
 80033c6:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	2300      	movs	r3, #0
 80033d2:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80033dc:	887b      	ldrh	r3, [r7, #2]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80033e6:	887b      	ldrh	r3, [r7, #2]
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80033ee:	2201      	movs	r2, #1
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d103      	bne.n	8003406 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	330c      	adds	r3, #12
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	e009      	b.n	800341a <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d103      	bne.n	8003414 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	3310      	adds	r3, #16
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	e002      	b.n	800341a <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	3314      	adds	r3, #20
 8003418:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800341a:	787b      	ldrb	r3, [r7, #1]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d006      	beq.n	800342e <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	6811      	ldr	r1, [r2, #0]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	430a      	orrs	r2, r1
 800342a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800342c:	e006      	b.n	800343c <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	6811      	ldr	r1, [r2, #0]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	43d2      	mvns	r2, r2
 8003438:	400a      	ands	r2, r1
 800343a:	601a      	str	r2, [r3, #0]
  }
}
 800343c:	bf00      	nop
 800343e:	371c      	adds	r7, #28
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8003454:	2300      	movs	r3, #0
 8003456:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	b29a      	uxth	r2, r3
 800345e:	887b      	ldrh	r3, [r7, #2]
 8003460:	4013      	ands	r3, r2
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
 800346c:	e001      	b.n	8003472 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003472:	7bfb      	ldrb	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8003484:	4b37      	ldr	r3, [pc, #220]	; (8003564 <Audio_MAL_IRQHandler+0xe4>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4b37      	ldr	r3, [pc, #220]	; (8003568 <Audio_MAL_IRQHandler+0xe8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4619      	mov	r1, r3
 800348e:	4610      	mov	r0, r2
 8003490:	f7fe ff66 	bl	8002360 <DMA_GetFlagStatus>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d062      	beq.n	8003560 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800349a:	4b34      	ldr	r3, [pc, #208]	; (800356c <Audio_MAL_IRQHandler+0xec>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d04a      	beq.n	8003538 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80034a2:	bf00      	nop
 80034a4:	4b2f      	ldr	r3, [pc, #188]	; (8003564 <Audio_MAL_IRQHandler+0xe4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe ff41 	bl	8002330 <DMA_GetCmdStatus>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f7      	bne.n	80034a4 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80034b4:	4b2b      	ldr	r3, [pc, #172]	; (8003564 <Audio_MAL_IRQHandler+0xe4>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <Audio_MAL_IRQHandler+0xe8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4619      	mov	r1, r3
 80034be:	4610      	mov	r0, r2
 80034c0:	f7fe ff8a 	bl	80023d8 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80034c4:	4b2a      	ldr	r3, [pc, #168]	; (8003570 <Audio_MAL_IRQHandler+0xf0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	4b2a      	ldr	r3, [pc, #168]	; (8003574 <Audio_MAL_IRQHandler+0xf4>)
 80034cc:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80034ce:	4b27      	ldr	r3, [pc, #156]	; (800356c <Audio_MAL_IRQHandler+0xec>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034d6:	4293      	cmp	r3, r2
 80034d8:	bf28      	it	cs
 80034da:	4613      	movcs	r3, r2
 80034dc:	4a25      	ldr	r2, [pc, #148]	; (8003574 <Audio_MAL_IRQHandler+0xf4>)
 80034de:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80034e0:	4b20      	ldr	r3, [pc, #128]	; (8003564 <Audio_MAL_IRQHandler+0xe4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4923      	ldr	r1, [pc, #140]	; (8003574 <Audio_MAL_IRQHandler+0xf4>)
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe feae 	bl	8002248 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80034ec:	4b1d      	ldr	r3, [pc, #116]	; (8003564 <Audio_MAL_IRQHandler+0xe4>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2101      	movs	r1, #1
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe ff00 	bl	80022f8 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80034f8:	4b1d      	ldr	r3, [pc, #116]	; (8003570 <Audio_MAL_IRQHandler+0xf0>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4b1b      	ldr	r3, [pc, #108]	; (800356c <Audio_MAL_IRQHandler+0xec>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003504:	428b      	cmp	r3, r1
 8003506:	bf28      	it	cs
 8003508:	460b      	movcs	r3, r1
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	4a18      	ldr	r2, [pc, #96]	; (8003570 <Audio_MAL_IRQHandler+0xf0>)
 8003510:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8003512:	4b16      	ldr	r3, [pc, #88]	; (800356c <Audio_MAL_IRQHandler+0xec>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4b15      	ldr	r3, [pc, #84]	; (800356c <Audio_MAL_IRQHandler+0xec>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800351e:	428b      	cmp	r3, r1
 8003520:	bf28      	it	cs
 8003522:	460b      	movcs	r3, r1
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	4a11      	ldr	r2, [pc, #68]	; (800356c <Audio_MAL_IRQHandler+0xec>)
 8003528:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 800352a:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <Audio_MAL_IRQHandler+0xe4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2101      	movs	r1, #1
 8003530:	4618      	mov	r0, r3
 8003532:	f7fe fee1 	bl	80022f8 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8003536:	e013      	b.n	8003560 <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8003538:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <Audio_MAL_IRQHandler+0xe4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2100      	movs	r1, #0
 800353e:	4618      	mov	r0, r3
 8003540:	f7fe feda 	bl	80022f8 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8003544:	4b07      	ldr	r3, [pc, #28]	; (8003564 <Audio_MAL_IRQHandler+0xe4>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4b07      	ldr	r3, [pc, #28]	; (8003568 <Audio_MAL_IRQHandler+0xe8>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f7fe ff42 	bl	80023d8 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <Audio_MAL_IRQHandler+0xf0>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2100      	movs	r1, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f000 f8f8 	bl	8003750 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8003560:	bf00      	nop
 8003562:	bd80      	pop	{r7, pc}
 8003564:	2000001c 	.word	0x2000001c
 8003568:	20000020 	.word	0x20000020
 800356c:	20000014 	.word	0x20000014
 8003570:	20000384 	.word	0x20000384
 8003574:	200003c4 	.word	0x200003c4

08003578 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800357c:	f7ff ff80 	bl	8003480 <Audio_MAL_IRQHandler>
}
 8003580:	bf00      	nop
 8003582:	bd80      	pop	{r7, pc}

08003584 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003588:	f7ff ff7a 	bl	8003480 <Audio_MAL_IRQHandler>
}
 800358c:	bf00      	nop
 800358e:	bd80      	pop	{r7, pc}

08003590 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8003594:	2102      	movs	r1, #2
 8003596:	480d      	ldr	r0, [pc, #52]	; (80035cc <SPI3_IRQHandler+0x3c>)
 8003598:	f7ff fc74 	bl	8002e84 <SPI_I2S_GetFlagStatus>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d011      	beq.n	80035c6 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80035a2:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <SPI3_IRQHandler+0x40>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d106      	bne.n	80035b8 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80035aa:	f000 f8dd 	bl	8003768 <EVAL_AUDIO_GetSampleCallBack>
 80035ae:	4603      	mov	r3, r0
 80035b0:	4619      	mov	r1, r3
 80035b2:	2004      	movs	r0, #4
 80035b4:	f7fe fe2c 	bl	8002210 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80035b8:	f000 f8d6 	bl	8003768 <EVAL_AUDIO_GetSampleCallBack>
 80035bc:	4603      	mov	r3, r0
 80035be:	4619      	mov	r1, r3
 80035c0:	4802      	ldr	r0, [pc, #8]	; (80035cc <SPI3_IRQHandler+0x3c>)
 80035c2:	f7ff fc4f 	bl	8002e64 <SPI_I2S_SendData>
  }
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40003c00 	.word	0x40003c00
 80035d0:	20000018 	.word	0x20000018

080035d4 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
  int i = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
  int32_t temp = 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
  uint32_t color = 0;
 80035e2:	2300      	movs	r3, #0
 80035e4:	613b      	str	r3, [r7, #16]

  /* TODO - Add your application code here */
 /* bluetooth_init();
  GPIO_WriteBit(GPIOD,GPIO_Pin_13,Bit_SET);*/
  /* Infinite loop */
  NPC_init();
 80035e6:	f7fd fcf9 	bl	8000fdc <NPC_init>
/*
  bool time_comp = test_ClockMangement_time_comparison();
  bool date_comp = test_ClockMangement_date_comparison();
  bool alarm_comp = test_ClockMangement_alarm_comparison();
 */
  bool time_save_load = test_ClockMangement_save_and_load_time();
 80035ea:	f7fe faeb 	bl	8001bc4 <test_ClockMangement_save_and_load_time>
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]
  bool date_save_load = test_ClockMangement_save_and_load_date();
 80035f2:	f7fe fb25 	bl	8001c40 <test_ClockMangement_save_and_load_date>
 80035f6:	4603      	mov	r3, r0
 80035f8:	71bb      	strb	r3, [r7, #6]
  bool alarm_save_load = test_ClockMangement_save_and_load_alarm();
 80035fa:	f7fe fb5f 	bl	8001cbc <test_ClockMangement_save_and_load_alarm>
 80035fe:	4603      	mov	r3, r0
 8003600:	717b      	strb	r3, [r7, #5]
  neopixel_setBrightness(100);
 8003602:	2064      	movs	r0, #100	; 0x64
 8003604:	f7fe f9e6 	bl	80019d4 <neopixel_setBrightness>
  while (1)
  {
	i++;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	3301      	adds	r3, #1
 800360c:	617b      	str	r3, [r7, #20]
	temp = temperature_read();
 800360e:	f7fe fa73 	bl	8001af8 <temperature_read>
 8003612:	60b8      	str	r0, [r7, #8]
	switch(pixel_color){
 8003614:	4b4b      	ldr	r3, [pc, #300]	; (8003744 <main+0x170>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	3b42      	subs	r3, #66	; 0x42
 800361a:	2b17      	cmp	r3, #23
 800361c:	d86a      	bhi.n	80036f4 <main+0x120>
 800361e:	a201      	add	r2, pc, #4	; (adr r2, 8003624 <main+0x50>)
 8003620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003624:	080036a1 	.word	0x080036a1
 8003628:	080036bd 	.word	0x080036bd
 800362c:	080036e7 	.word	0x080036e7
 8003630:	080036f5 	.word	0x080036f5
 8003634:	080036f5 	.word	0x080036f5
 8003638:	08003693 	.word	0x08003693
 800363c:	080036f5 	.word	0x080036f5
 8003640:	080036f5 	.word	0x080036f5
 8003644:	080036f5 	.word	0x080036f5
 8003648:	080036f5 	.word	0x080036f5
 800364c:	080036f5 	.word	0x080036f5
 8003650:	080036cb 	.word	0x080036cb
 8003654:	080036f5 	.word	0x080036f5
 8003658:	080036f5 	.word	0x080036f5
 800365c:	080036f5 	.word	0x080036f5
 8003660:	080036f5 	.word	0x080036f5
 8003664:	08003685 	.word	0x08003685
 8003668:	080036f5 	.word	0x080036f5
 800366c:	080036f5 	.word	0x080036f5
 8003670:	080036f5 	.word	0x080036f5
 8003674:	080036f5 	.word	0x080036f5
 8003678:	080036d9 	.word	0x080036d9
 800367c:	080036f5 	.word	0x080036f5
 8003680:	080036af 	.word	0x080036af
	case 'R': color = neopixel_colourRGB(255,0,0); break;
 8003684:	2200      	movs	r2, #0
 8003686:	2100      	movs	r1, #0
 8003688:	20ff      	movs	r0, #255	; 0xff
 800368a:	f7fe f9b3 	bl	80019f4 <neopixel_colourRGB>
 800368e:	6138      	str	r0, [r7, #16]
 8003690:	e030      	b.n	80036f4 <main+0x120>
	case 'G': color = neopixel_colourRGB(0,255,0); break;
 8003692:	2200      	movs	r2, #0
 8003694:	21ff      	movs	r1, #255	; 0xff
 8003696:	2000      	movs	r0, #0
 8003698:	f7fe f9ac 	bl	80019f4 <neopixel_colourRGB>
 800369c:	6138      	str	r0, [r7, #16]
 800369e:	e029      	b.n	80036f4 <main+0x120>
	case 'B': color = neopixel_colourRGB(0,0,255); break;
 80036a0:	22ff      	movs	r2, #255	; 0xff
 80036a2:	2100      	movs	r1, #0
 80036a4:	2000      	movs	r0, #0
 80036a6:	f7fe f9a5 	bl	80019f4 <neopixel_colourRGB>
 80036aa:	6138      	str	r0, [r7, #16]
 80036ac:	e022      	b.n	80036f4 <main+0x120>
	case 'Y': color = neopixel_colourRGB(255,255,0); break;
 80036ae:	2200      	movs	r2, #0
 80036b0:	21ff      	movs	r1, #255	; 0xff
 80036b2:	20ff      	movs	r0, #255	; 0xff
 80036b4:	f7fe f99e 	bl	80019f4 <neopixel_colourRGB>
 80036b8:	6138      	str	r0, [r7, #16]
 80036ba:	e01b      	b.n	80036f4 <main+0x120>
	case 'C': color = neopixel_colourRGB(0,255,255); break;
 80036bc:	22ff      	movs	r2, #255	; 0xff
 80036be:	21ff      	movs	r1, #255	; 0xff
 80036c0:	2000      	movs	r0, #0
 80036c2:	f7fe f997 	bl	80019f4 <neopixel_colourRGB>
 80036c6:	6138      	str	r0, [r7, #16]
 80036c8:	e014      	b.n	80036f4 <main+0x120>
	case 'M': color = neopixel_colourRGB(255,0,255); break;
 80036ca:	22ff      	movs	r2, #255	; 0xff
 80036cc:	2100      	movs	r1, #0
 80036ce:	20ff      	movs	r0, #255	; 0xff
 80036d0:	f7fe f990 	bl	80019f4 <neopixel_colourRGB>
 80036d4:	6138      	str	r0, [r7, #16]
 80036d6:	e00d      	b.n	80036f4 <main+0x120>
	case 'W': color = neopixel_colourRGB(255,255,255); break;
 80036d8:	22ff      	movs	r2, #255	; 0xff
 80036da:	21ff      	movs	r1, #255	; 0xff
 80036dc:	20ff      	movs	r0, #255	; 0xff
 80036de:	f7fe f989 	bl	80019f4 <neopixel_colourRGB>
 80036e2:	6138      	str	r0, [r7, #16]
 80036e4:	e006      	b.n	80036f4 <main+0x120>
	case 'D': color = neopixel_colourRGB(0,0,0); break;
 80036e6:	2200      	movs	r2, #0
 80036e8:	2100      	movs	r1, #0
 80036ea:	2000      	movs	r0, #0
 80036ec:	f7fe f982 	bl	80019f4 <neopixel_colourRGB>
 80036f0:	6138      	str	r0, [r7, #16]
 80036f2:	bf00      	nop
	}
	int j=150000;
 80036f4:	4b14      	ldr	r3, [pc, #80]	; (8003748 <main+0x174>)
 80036f6:	60fb      	str	r3, [r7, #12]
	while(j)j--;
 80036f8:	e002      	b.n	8003700 <main+0x12c>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f9      	bne.n	80036fa <main+0x126>
	neopixel_setPixelColour((i-1)%4,0);
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	1e5a      	subs	r2, r3, #1
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <main+0x178>)
 800370c:	4013      	ands	r3, r2
 800370e:	2b00      	cmp	r3, #0
 8003710:	da03      	bge.n	800371a <main+0x146>
 8003712:	3b01      	subs	r3, #1
 8003714:	f063 0303 	orn	r3, r3, #3
 8003718:	3301      	adds	r3, #1
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2100      	movs	r1, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe f97e 	bl	8001a20 <neopixel_setPixelColour>
	neopixel_setPixelColour(i%4,color);
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <main+0x178>)
 8003728:	4013      	ands	r3, r2
 800372a:	2b00      	cmp	r3, #0
 800372c:	da03      	bge.n	8003736 <main+0x162>
 800372e:	3b01      	subs	r3, #1
 8003730:	f063 0303 	orn	r3, r3, #3
 8003734:	3301      	adds	r3, #1
 8003736:	b2db      	uxtb	r3, r3
 8003738:	6939      	ldr	r1, [r7, #16]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe f970 	bl	8001a20 <neopixel_setPixelColour>
  }
 8003740:	e762      	b.n	8003608 <main+0x34>
 8003742:	bf00      	nop
 8003744:	20000380 	.word	0x20000380
 8003748:	000249f0 	.word	0x000249f0
 800374c:	80000003 	.word	0x80000003

08003750 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 800375a:	bf00      	nop
}
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop

08003768 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 800376c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8003770:	4618      	mov	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop

0800377c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800377c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003780:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003782:	e003      	b.n	800378c <LoopCopyDataInit>

08003784 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003784:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003786:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003788:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800378a:	3104      	adds	r1, #4

0800378c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800378c:	480b      	ldr	r0, [pc, #44]	; (80037bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800378e:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003790:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003792:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003794:	d3f6      	bcc.n	8003784 <CopyDataInit>
  ldr  r2, =_sbss
 8003796:	4a0b      	ldr	r2, [pc, #44]	; (80037c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003798:	e002      	b.n	80037a0 <LoopFillZerobss>

0800379a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800379a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800379c:	f842 3b04 	str.w	r3, [r2], #4

080037a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037a0:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80037a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037a4:	d3f9      	bcc.n	800379a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037a6:	f000 f84b 	bl	8003840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037aa:	f000 f8fb 	bl	80039a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037ae:	f7ff ff11 	bl	80035d4 <main>
  bx  lr    
 80037b2:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80037b4:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80037b8:	08003bac 	.word	0x08003bac
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80037bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037c0:	20000028 	.word	0x20000028
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80037c4:	20000028 	.word	0x20000028
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037c8:	20000400 	.word	0x20000400

080037cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037cc:	e7fe      	b.n	80037cc <ADC_IRQHandler>
	...

080037d0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
}
 80037d4:	bf00      	nop
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop

080037e0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80037e4:	e7fe      	b.n	80037e4 <HardFault_Handler+0x4>
 80037e6:	bf00      	nop

080037e8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80037ec:	e7fe      	b.n	80037ec <MemManage_Handler+0x4>
 80037ee:	bf00      	nop

080037f0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80037f4:	e7fe      	b.n	80037f4 <BusFault_Handler+0x4>
 80037f6:	bf00      	nop

080037f8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80037fc:	e7fe      	b.n	80037fc <UsageFault_Handler+0x4>
 80037fe:	bf00      	nop

08003800 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop

08003810 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
}
 8003814:	bf00      	nop
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop

08003820 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop

08003830 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8003834:	bf00      	nop
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop

08003840 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003844:	4a16      	ldr	r2, [pc, #88]	; (80038a0 <SystemInit+0x60>)
 8003846:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <SystemInit+0x60>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003854:	4a13      	ldr	r2, [pc, #76]	; (80038a4 <SystemInit+0x64>)
 8003856:	4b13      	ldr	r3, [pc, #76]	; (80038a4 <SystemInit+0x64>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003860:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <SystemInit+0x64>)
 8003862:	2200      	movs	r2, #0
 8003864:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003866:	4a0f      	ldr	r2, [pc, #60]	; (80038a4 <SystemInit+0x64>)
 8003868:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <SystemInit+0x64>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003874:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003876:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <SystemInit+0x64>)
 8003878:	4a0b      	ldr	r2, [pc, #44]	; (80038a8 <SystemInit+0x68>)
 800387a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800387c:	4a09      	ldr	r2, [pc, #36]	; (80038a4 <SystemInit+0x64>)
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <SystemInit+0x64>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003886:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <SystemInit+0x64>)
 800388a:	2200      	movs	r2, #0
 800388c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800388e:	f000 f80d 	bl	80038ac <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003892:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <SystemInit+0x60>)
 8003894:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003898:	609a      	str	r2, [r3, #8]
#endif
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	e000ed00 	.word	0xe000ed00
 80038a4:	40023800 	.word	0x40023800
 80038a8:	24003010 	.word	0x24003010

080038ac <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	2300      	movs	r3, #0
 80038b8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80038ba:	4a36      	ldr	r2, [pc, #216]	; (8003994 <SetSysClock+0xe8>)
 80038bc:	4b35      	ldr	r3, [pc, #212]	; (8003994 <SetSysClock+0xe8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80038c6:	4b33      	ldr	r3, [pc, #204]	; (8003994 <SetSysClock+0xe8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3301      	adds	r3, #1
 80038d4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d103      	bne.n	80038e4 <SetSysClock+0x38>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80038e2:	d1f0      	bne.n	80038c6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80038e4:	4b2b      	ldr	r3, [pc, #172]	; (8003994 <SetSysClock+0xe8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80038f0:	2301      	movs	r3, #1
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	e001      	b.n	80038fa <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80038f6:	2300      	movs	r3, #0
 80038f8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d142      	bne.n	8003986 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003900:	4a24      	ldr	r2, [pc, #144]	; (8003994 <SetSysClock+0xe8>)
 8003902:	4b24      	ldr	r3, [pc, #144]	; (8003994 <SetSysClock+0xe8>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 800390c:	4a22      	ldr	r2, [pc, #136]	; (8003998 <SetSysClock+0xec>)
 800390e:	4b22      	ldr	r3, [pc, #136]	; (8003998 <SetSysClock+0xec>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003916:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003918:	4a1e      	ldr	r2, [pc, #120]	; (8003994 <SetSysClock+0xe8>)
 800391a:	4b1e      	ldr	r3, [pc, #120]	; (8003994 <SetSysClock+0xe8>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003920:	4a1c      	ldr	r2, [pc, #112]	; (8003994 <SetSysClock+0xe8>)
 8003922:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <SetSysClock+0xe8>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800392a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800392c:	4a19      	ldr	r2, [pc, #100]	; (8003994 <SetSysClock+0xe8>)
 800392e:	4b19      	ldr	r3, [pc, #100]	; (8003994 <SetSysClock+0xe8>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003936:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003938:	4b16      	ldr	r3, [pc, #88]	; (8003994 <SetSysClock+0xe8>)
 800393a:	4a18      	ldr	r2, [pc, #96]	; (800399c <SetSysClock+0xf0>)
 800393c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800393e:	4a15      	ldr	r2, [pc, #84]	; (8003994 <SetSysClock+0xe8>)
 8003940:	4b14      	ldr	r3, [pc, #80]	; (8003994 <SetSysClock+0xe8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003948:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800394a:	bf00      	nop
 800394c:	4b11      	ldr	r3, [pc, #68]	; (8003994 <SetSysClock+0xe8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f9      	beq.n	800394c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003958:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <SetSysClock+0xf4>)
 800395a:	f240 6205 	movw	r2, #1541	; 0x605
 800395e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003960:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <SetSysClock+0xe8>)
 8003962:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <SetSysClock+0xe8>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f023 0303 	bic.w	r3, r3, #3
 800396a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800396c:	4a09      	ldr	r2, [pc, #36]	; (8003994 <SetSysClock+0xe8>)
 800396e:	4b09      	ldr	r3, [pc, #36]	; (8003994 <SetSysClock+0xe8>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f043 0302 	orr.w	r3, r3, #2
 8003976:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003978:	bf00      	nop
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <SetSysClock+0xe8>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b08      	cmp	r3, #8
 8003984:	d1f9      	bne.n	800397a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
 8003998:	40007000 	.word	0x40007000
 800399c:	07405408 	.word	0x07405408
 80039a0:	40023c00 	.word	0x40023c00

080039a4 <__libc_init_array>:
 80039a4:	b570      	push	{r4, r5, r6, lr}
 80039a6:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <__libc_init_array+0x3c>)
 80039a8:	4c0e      	ldr	r4, [pc, #56]	; (80039e4 <__libc_init_array+0x40>)
 80039aa:	1ae4      	subs	r4, r4, r3
 80039ac:	10a4      	asrs	r4, r4, #2
 80039ae:	2500      	movs	r5, #0
 80039b0:	461e      	mov	r6, r3
 80039b2:	42a5      	cmp	r5, r4
 80039b4:	d004      	beq.n	80039c0 <__libc_init_array+0x1c>
 80039b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039ba:	4798      	blx	r3
 80039bc:	3501      	adds	r5, #1
 80039be:	e7f8      	b.n	80039b2 <__libc_init_array+0xe>
 80039c0:	f000 f816 	bl	80039f0 <_init>
 80039c4:	4c08      	ldr	r4, [pc, #32]	; (80039e8 <__libc_init_array+0x44>)
 80039c6:	4b09      	ldr	r3, [pc, #36]	; (80039ec <__libc_init_array+0x48>)
 80039c8:	1ae4      	subs	r4, r4, r3
 80039ca:	10a4      	asrs	r4, r4, #2
 80039cc:	2500      	movs	r5, #0
 80039ce:	461e      	mov	r6, r3
 80039d0:	42a5      	cmp	r5, r4
 80039d2:	d004      	beq.n	80039de <__libc_init_array+0x3a>
 80039d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039d8:	4798      	blx	r3
 80039da:	3501      	adds	r5, #1
 80039dc:	e7f8      	b.n	80039d0 <__libc_init_array+0x2c>
 80039de:	bd70      	pop	{r4, r5, r6, pc}
 80039e0:	08003ba4 	.word	0x08003ba4
 80039e4:	08003ba4 	.word	0x08003ba4
 80039e8:	08003ba8 	.word	0x08003ba8
 80039ec:	08003ba4 	.word	0x08003ba4

080039f0 <_init>:
 80039f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f2:	bf00      	nop
 80039f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039f6:	bc08      	pop	{r3}
 80039f8:	469e      	mov	lr, r3
 80039fa:	4770      	bx	lr

080039fc <_fini>:
 80039fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fe:	bf00      	nop
 8003a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a02:	bc08      	pop	{r3}
 8003a04:	469e      	mov	lr, r3
 8003a06:	4770      	bx	lr
