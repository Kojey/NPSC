
C:\Users\user\Desktop\NPC\NeoPixelClock_Software\Code\Master\Debug\NeoPixelClock_Software_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d20  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08002ea8  08002ea8  00012ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003014  08003014  00013014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003018  08003018  00013018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000000  0800301c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  7 .bss          000003d8  20000028  20000028  00020028  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000400  20000400  00020028  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c876  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000228c  00000000  00000000  0002c8ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000010b0  00000000  00000000  0002eb60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f28  00000000  00000000  0002fc10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005c46  00000000  00000000  00030b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004ae1  00000000  00000000  0003677e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0003b25f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004634  00000000  00000000  0003b2e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0003f914  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e90 	.word	0x08002e90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08002e90 	.word	0x08002e90

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <bluetooth_init>:
/**
 * @brief	Initialize the bluetooth and set baudrate to 9600
 * @param 	None
 * @retval	None
 */
void bluetooth_init(void){
 80009bc:	b5b0      	push	{r4, r5, r7, lr}
 80009be:	b090      	sub	sp, #64	; 0x40
 80009c0:	af00      	add	r7, sp, #0
	// Enable RCC for USART1, GPIOB
	RCC_APB2PeriphClockCmd(BLUETOOTH_PERIPH_USARTX,ENABLE);
 80009c2:	2101      	movs	r1, #1
 80009c4:	2010      	movs	r0, #16
 80009c6:	f001 fa63 	bl	8001e90 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(BLUETOOTH_PERIPH_GPIOX,ENABLE);
 80009ca:	2101      	movs	r1, #1
 80009cc:	2002      	movs	r0, #2
 80009ce:	f001 fa1f 	bl	8001e10 <RCC_AHB1PeriphClockCmd>
	// GPIO Configuration
	{
		GPIO_InitTypeDef GPIO_InitStructure;

		// Configure USART1 TX (PB6) as alternate function push-pull
		GPIO_InitStructure.GPIO_Pin = BLUETOOTH_TX_PIN | BLUETOOTH_RX_PIN;
 80009d2:	23c0      	movs	r3, #192	; 0xc0
 80009d4:	61bb      	str	r3, [r7, #24]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80009d6:	2302      	movs	r3, #2
 80009d8:	773b      	strb	r3, [r7, #28]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80009da:	2300      	movs	r3, #0
 80009dc:	77bb      	strb	r3, [r7, #30]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80009de:	2301      	movs	r3, #1
 80009e0:	77fb      	strb	r3, [r7, #31]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80009e2:	2302      	movs	r3, #2
 80009e4:	777b      	strb	r3, [r7, #29]

		GPIO_Init(BLUETOOTH_GPIOX, &GPIO_InitStructure);
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	4619      	mov	r1, r3
 80009ec:	4824      	ldr	r0, [pc, #144]	; (8000a80 <bluetooth_init+0xc4>)
 80009ee:	f001 f81d 	bl	8001a2c <GPIO_Init>

		GPIO_PinAFConfig(BLUETOOTH_GPIOX, BLUETOOTH_TX_PINSOURCE, BLUETOOTH_AF_USART);
 80009f2:	2207      	movs	r2, #7
 80009f4:	2106      	movs	r1, #6
 80009f6:	4822      	ldr	r0, [pc, #136]	; (8000a80 <bluetooth_init+0xc4>)
 80009f8:	f001 f8c8 	bl	8001b8c <GPIO_PinAFConfig>
		GPIO_PinAFConfig(BLUETOOTH_GPIOX, BLUETOOTH_RX_PINSOURCE, BLUETOOTH_AF_USART);
 80009fc:	2207      	movs	r2, #7
 80009fe:	2107      	movs	r1, #7
 8000a00:	481f      	ldr	r0, [pc, #124]	; (8000a80 <bluetooth_init+0xc4>)
 8000a02:	f001 f8c3 	bl	8001b8c <GPIO_PinAFConfig>

	// NVIC Configuration
	{
		NVIC_InitTypeDef NVIC_InitStructure;

		NVIC_InitStructure.NVIC_IRQChannel = BLUETOOTH_USARTX_IRQ;
 8000a06:	2325      	movs	r3, #37	; 0x25
 8000a08:	753b      	strb	r3, [r7, #20]
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	757b      	strb	r3, [r7, #21]
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	75bb      	strb	r3, [r7, #22]
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000a12:	2301      	movs	r3, #1
 8000a14:	75fb      	strb	r3, [r7, #23]

		NVIC_Init(&NVIC_InitStructure);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 fc8e 	bl	800133c <NVIC_Init>

	// USART Configuration
	{
		USART_InitTypeDef USART_InitStructure;

		USART_InitStructure.USART_BaudRate = BLUETOOTH_BAUDRATE;
 8000a20:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000a24:	607b      	str	r3, [r7, #4]
		USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000a26:	2300      	movs	r3, #0
 8000a28:	813b      	strh	r3, [r7, #8]
		USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	817b      	strh	r3, [r7, #10]
		USART_InitStructure.USART_Parity = USART_Parity_No;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	81bb      	strh	r3, [r7, #12]
		USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000a32:	2300      	movs	r3, #0
 8000a34:	823b      	strh	r3, [r7, #16]
		USART_InitStructure.USART_Mode = USART_Mode_Tx|USART_Mode_Rx;
 8000a36:	230c      	movs	r3, #12
 8000a38:	81fb      	strh	r3, [r7, #14]

		USART_Init(BLUETOOTH_USARTX,&USART_InitStructure);
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4811      	ldr	r0, [pc, #68]	; (8000a84 <bluetooth_init+0xc8>)
 8000a40:	f001 fe1a 	bl	8002678 <USART_Init>

		// Enable USART1 receive and transmission complete interrupts
		USART_ITConfig(BLUETOOTH_USARTX,USART_IT_RXNE,ENABLE);
 8000a44:	2201      	movs	r2, #1
 8000a46:	f240 5125 	movw	r1, #1317	; 0x525
 8000a4a:	480e      	ldr	r0, [pc, #56]	; (8000a84 <bluetooth_init+0xc8>)
 8000a4c:	f001 ff10 	bl	8002870 <USART_ITConfig>

		USART_Cmd(BLUETOOTH_USARTX,ENABLE);
 8000a50:	2101      	movs	r1, #1
 8000a52:	480c      	ldr	r0, [pc, #48]	; (8000a84 <bluetooth_init+0xc8>)
 8000a54:	f001 feca 	bl	80027ec <USART_Cmd>

	}

	uint8_t welcome_str[] = " Welcome to NeoPixelClock!\r\n";
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <bluetooth_init+0xcc>)
 8000a5a:	f107 0420 	add.w	r4, r7, #32
 8000a5e:	461d      	mov	r5, r3
 8000a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a68:	c407      	stmia	r4!, {r0, r1, r2}
 8000a6a:	7023      	strb	r3, [r4, #0]
	bluetooth_send(welcome_str);
 8000a6c:	f107 0320 	add.w	r3, r7, #32
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 f893 	bl	8000b9c <bluetooth_send>
}
 8000a76:	bf00      	nop
 8000a78:	3740      	adds	r7, #64	; 0x40
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40020400 	.word	0x40020400
 8000a84:	40011000 	.word	0x40011000
 8000a88:	08002ea8 	.word	0x08002ea8

08000a8c <USART1_IRQHandler>:
/**
 * @brief	USART1 Interrupt Handler
 * @param 	None
 * @retval	none
 */
void USART1_IRQHandler(void){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
	// Wait until reception
	while(USART_GetFlagStatus(BLUETOOTH_USARTX, USART_FLAG_RXNE)==RESET);
 8000a92:	bf00      	nop
 8000a94:	2120      	movs	r1, #32
 8000a96:	4836      	ldr	r0, [pc, #216]	; (8000b70 <USART1_IRQHandler+0xe4>)
 8000a98:	f001 ff32 	bl	8002900 <USART_GetFlagStatus>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0f8      	beq.n	8000a94 <USART1_IRQHandler+0x8>
	uint8_t data = toupper(bluetooth_receive());
 8000aa2:	f000 f8a1 	bl	8000be8 <bluetooth_receive>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
 8000aaa:	4b32      	ldr	r3, [pc, #200]	; (8000b74 <USART1_IRQHandler+0xe8>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	4413      	add	r3, r2
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	f003 0303 	and.w	r3, r3, #3
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d102      	bne.n	8000ac4 <USART1_IRQHandler+0x38>
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	3b20      	subs	r3, #32
 8000ac2:	e000      	b.n	8000ac6 <USART1_IRQHandler+0x3a>
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	71bb      	strb	r3, [r7, #6]
	if(data=='R'){
 8000ac8:	79bb      	ldrb	r3, [r7, #6]
 8000aca:	2b52      	cmp	r3, #82	; 0x52
 8000acc:	d106      	bne.n	8000adc <USART1_IRQHandler+0x50>
		pixel_color='R';
 8000ace:	4b2a      	ldr	r3, [pc, #168]	; (8000b78 <USART1_IRQHandler+0xec>)
 8000ad0:	2252      	movs	r2, #82	; 0x52
 8000ad2:	701a      	strb	r2, [r3, #0]
		bluetooth_send((uint8_t *)"Red\n\r");
 8000ad4:	4829      	ldr	r0, [pc, #164]	; (8000b7c <USART1_IRQHandler+0xf0>)
 8000ad6:	f000 f861 	bl	8000b9c <bluetooth_send>
	}
	else if(data=='W'){
		pixel_color='W';
		bluetooth_send((uint8_t *)"White\n\r");
	}
}
 8000ada:	e044      	b.n	8000b66 <USART1_IRQHandler+0xda>
	uint8_t data = toupper(bluetooth_receive());
	if(data=='R'){
		pixel_color='R';
		bluetooth_send((uint8_t *)"Red\n\r");
	}
	else if(data=='G'){
 8000adc:	79bb      	ldrb	r3, [r7, #6]
 8000ade:	2b47      	cmp	r3, #71	; 0x47
 8000ae0:	d106      	bne.n	8000af0 <USART1_IRQHandler+0x64>
		pixel_color='G';
 8000ae2:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <USART1_IRQHandler+0xec>)
 8000ae4:	2247      	movs	r2, #71	; 0x47
 8000ae6:	701a      	strb	r2, [r3, #0]
		bluetooth_send((uint8_t *)"Green\n\r");
 8000ae8:	4825      	ldr	r0, [pc, #148]	; (8000b80 <USART1_IRQHandler+0xf4>)
 8000aea:	f000 f857 	bl	8000b9c <bluetooth_send>
	}
	else if(data=='W'){
		pixel_color='W';
		bluetooth_send((uint8_t *)"White\n\r");
	}
}
 8000aee:	e03a      	b.n	8000b66 <USART1_IRQHandler+0xda>
	}
	else if(data=='G'){
		pixel_color='G';
		bluetooth_send((uint8_t *)"Green\n\r");
	}
	else if(data=='B'){
 8000af0:	79bb      	ldrb	r3, [r7, #6]
 8000af2:	2b42      	cmp	r3, #66	; 0x42
 8000af4:	d106      	bne.n	8000b04 <USART1_IRQHandler+0x78>
		pixel_color='B';
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <USART1_IRQHandler+0xec>)
 8000af8:	2242      	movs	r2, #66	; 0x42
 8000afa:	701a      	strb	r2, [r3, #0]
		bluetooth_send((uint8_t *)"Blue\n\r");
 8000afc:	4821      	ldr	r0, [pc, #132]	; (8000b84 <USART1_IRQHandler+0xf8>)
 8000afe:	f000 f84d 	bl	8000b9c <bluetooth_send>
	}
	else if(data=='W'){
		pixel_color='W';
		bluetooth_send((uint8_t *)"White\n\r");
	}
}
 8000b02:	e030      	b.n	8000b66 <USART1_IRQHandler+0xda>
	}
	else if(data=='B'){
		pixel_color='B';
		bluetooth_send((uint8_t *)"Blue\n\r");
	}
	else if(data=='Y'){
 8000b04:	79bb      	ldrb	r3, [r7, #6]
 8000b06:	2b59      	cmp	r3, #89	; 0x59
 8000b08:	d106      	bne.n	8000b18 <USART1_IRQHandler+0x8c>
		pixel_color='Y';
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <USART1_IRQHandler+0xec>)
 8000b0c:	2259      	movs	r2, #89	; 0x59
 8000b0e:	701a      	strb	r2, [r3, #0]
		bluetooth_send((uint8_t *)"Yellow\n\r");
 8000b10:	481d      	ldr	r0, [pc, #116]	; (8000b88 <USART1_IRQHandler+0xfc>)
 8000b12:	f000 f843 	bl	8000b9c <bluetooth_send>
	}
	else if(data=='W'){
		pixel_color='W';
		bluetooth_send((uint8_t *)"White\n\r");
	}
}
 8000b16:	e026      	b.n	8000b66 <USART1_IRQHandler+0xda>
	}
	else if(data=='Y'){
		pixel_color='Y';
		bluetooth_send((uint8_t *)"Yellow\n\r");
	}
	else if(data=='M'){
 8000b18:	79bb      	ldrb	r3, [r7, #6]
 8000b1a:	2b4d      	cmp	r3, #77	; 0x4d
 8000b1c:	d106      	bne.n	8000b2c <USART1_IRQHandler+0xa0>
		pixel_color='M';
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <USART1_IRQHandler+0xec>)
 8000b20:	224d      	movs	r2, #77	; 0x4d
 8000b22:	701a      	strb	r2, [r3, #0]
		bluetooth_send((uint8_t *)"Magenta\n\r");
 8000b24:	4819      	ldr	r0, [pc, #100]	; (8000b8c <USART1_IRQHandler+0x100>)
 8000b26:	f000 f839 	bl	8000b9c <bluetooth_send>
	}
	else if(data=='W'){
		pixel_color='W';
		bluetooth_send((uint8_t *)"White\n\r");
	}
}
 8000b2a:	e01c      	b.n	8000b66 <USART1_IRQHandler+0xda>
	}
	else if(data=='M'){
		pixel_color='M';
		bluetooth_send((uint8_t *)"Magenta\n\r");
	}
	else if(data=='C'){
 8000b2c:	79bb      	ldrb	r3, [r7, #6]
 8000b2e:	2b43      	cmp	r3, #67	; 0x43
 8000b30:	d106      	bne.n	8000b40 <USART1_IRQHandler+0xb4>
		pixel_color='C';
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <USART1_IRQHandler+0xec>)
 8000b34:	2243      	movs	r2, #67	; 0x43
 8000b36:	701a      	strb	r2, [r3, #0]
		bluetooth_send((uint8_t *)"Cyan\n\r");
 8000b38:	4815      	ldr	r0, [pc, #84]	; (8000b90 <USART1_IRQHandler+0x104>)
 8000b3a:	f000 f82f 	bl	8000b9c <bluetooth_send>
	}
	else if(data=='W'){
		pixel_color='W';
		bluetooth_send((uint8_t *)"White\n\r");
	}
}
 8000b3e:	e012      	b.n	8000b66 <USART1_IRQHandler+0xda>
	}
	else if(data=='C'){
		pixel_color='C';
		bluetooth_send((uint8_t *)"Cyan\n\r");
	}
	else if(data=='D'){
 8000b40:	79bb      	ldrb	r3, [r7, #6]
 8000b42:	2b44      	cmp	r3, #68	; 0x44
 8000b44:	d106      	bne.n	8000b54 <USART1_IRQHandler+0xc8>
		pixel_color='D';
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <USART1_IRQHandler+0xec>)
 8000b48:	2244      	movs	r2, #68	; 0x44
 8000b4a:	701a      	strb	r2, [r3, #0]
		bluetooth_send((uint8_t *)"Dark\n\r");
 8000b4c:	4811      	ldr	r0, [pc, #68]	; (8000b94 <USART1_IRQHandler+0x108>)
 8000b4e:	f000 f825 	bl	8000b9c <bluetooth_send>
	}
	else if(data=='W'){
		pixel_color='W';
		bluetooth_send((uint8_t *)"White\n\r");
	}
}
 8000b52:	e008      	b.n	8000b66 <USART1_IRQHandler+0xda>
	}
	else if(data=='D'){
		pixel_color='D';
		bluetooth_send((uint8_t *)"Dark\n\r");
	}
	else if(data=='W'){
 8000b54:	79bb      	ldrb	r3, [r7, #6]
 8000b56:	2b57      	cmp	r3, #87	; 0x57
 8000b58:	d105      	bne.n	8000b66 <USART1_IRQHandler+0xda>
		pixel_color='W';
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <USART1_IRQHandler+0xec>)
 8000b5c:	2257      	movs	r2, #87	; 0x57
 8000b5e:	701a      	strb	r2, [r3, #0]
		bluetooth_send((uint8_t *)"White\n\r");
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <USART1_IRQHandler+0x10c>)
 8000b62:	f000 f81b 	bl	8000b9c <bluetooth_send>
	}
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40011000 	.word	0x40011000
 8000b74:	20000024 	.word	0x20000024
 8000b78:	20000380 	.word	0x20000380
 8000b7c:	08002ec8 	.word	0x08002ec8
 8000b80:	08002ed0 	.word	0x08002ed0
 8000b84:	08002ed8 	.word	0x08002ed8
 8000b88:	08002ee0 	.word	0x08002ee0
 8000b8c:	08002eec 	.word	0x08002eec
 8000b90:	08002ef8 	.word	0x08002ef8
 8000b94:	08002f00 	.word	0x08002f00
 8000b98:	08002f08 	.word	0x08002f08

08000b9c <bluetooth_send>:
/**
 * @brief 	send string to the hc-06
 * @param	data: string to be sent
 * @retval	None
 */
void bluetooth_send(uint8_t * data){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	uint32_t size = strlen((char *)data);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff fb0f 	bl	80001c8 <strlen>
 8000baa:	60f8      	str	r0, [r7, #12]
	while(size--){
 8000bac:	e010      	b.n	8000bd0 <bluetooth_send+0x34>
		USART_SendData(BLUETOOTH_USARTX,(uint16_t)*data++);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	1c5a      	adds	r2, r3, #1
 8000bb2:	607a      	str	r2, [r7, #4]
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480a      	ldr	r0, [pc, #40]	; (8000be4 <bluetooth_send+0x48>)
 8000bbc:	f001 fe36 	bl	800282c <USART_SendData>
		while(USART_GetFlagStatus(BLUETOOTH_USARTX,USART_FLAG_TC)==RESET);
 8000bc0:	bf00      	nop
 8000bc2:	2140      	movs	r1, #64	; 0x40
 8000bc4:	4807      	ldr	r0, [pc, #28]	; (8000be4 <bluetooth_send+0x48>)
 8000bc6:	f001 fe9b 	bl	8002900 <USART_GetFlagStatus>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d0f8      	beq.n	8000bc2 <bluetooth_send+0x26>
 * @param	data: string to be sent
 * @retval	None
 */
void bluetooth_send(uint8_t * data){
	uint32_t size = strlen((char *)data);
	while(size--){
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	1e5a      	subs	r2, r3, #1
 8000bd4:	60fa      	str	r2, [r7, #12]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1e9      	bne.n	8000bae <bluetooth_send+0x12>
		USART_SendData(BLUETOOTH_USARTX,(uint16_t)*data++);
		while(USART_GetFlagStatus(BLUETOOTH_USARTX,USART_FLAG_TC)==RESET);
	}
}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40011000 	.word	0x40011000

08000be8 <bluetooth_receive>:
/**
 * @brief	receive a byte from hc-06
 * @param	None
 * @retval	An uint8_t byte of data
 */
uint8_t bluetooth_receive(void){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	return USART_ReceiveData(BLUETOOTH_USARTX);
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <bluetooth_receive+0x14>)
 8000bee:	f001 fe2f 	bl	8002850 <USART_ReceiveData>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	b2db      	uxtb	r3, r3
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40011000 	.word	0x40011000

08000c00 <clock_init>:
/**
 * @brief	Initialise the clock to 1Hz and setup peripherals for Alarm
 * @param	None
 * @retval	None
 */
void clock_init(void){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0

	/* RTC domain access */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE); // Power controller
 8000c06:	2101      	movs	r1, #1
 8000c08:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000c0c:	f001 f920 	bl	8001e50 <RCC_APB1PeriphClockCmd>
	PWR_BackupAccessCmd(ENABLE); // Backup access
 8000c10:	2001      	movs	r0, #1
 8000c12:	f001 f805 	bl	8001c20 <PWR_BackupAccessCmd>

	RCC_RTCCLKConfig(RCC_RTCCLKSource_HSE_Div8); // RTC Clock source
 8000c16:	481c      	ldr	r0, [pc, #112]	; (8000c88 <clock_init+0x88>)
 8000c18:	f001 f8bc 	bl	8001d94 <RCC_RTCCLKConfig>

	RCC_RTCCLKCmd(ENABLE); // Enable clock
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f001 f8e7 	bl	8001df0 <RCC_RTCCLKCmd>
	RTC_WaitForSynchro();
 8000c22:	f001 fa1b 	bl	800205c <RTC_WaitForSynchro>

	/* Set clock frequency to 1Hz */
	{
		RTC_InitStruct.RTC_AsynchPrediv = RTC_PREDIV_A;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <clock_init+0x8c>)
 8000c28:	227c      	movs	r2, #124	; 0x7c
 8000c2a:	605a      	str	r2, [r3, #4]
		RTC_InitStruct.RTC_SynchPrediv = RTC_PREDIV_S;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <clock_init+0x8c>)
 8000c2e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c32:	609a      	str	r2, [r3, #8]
		RTC_InitStruct.RTC_HourFormat = RTC_HourFormat_12;
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <clock_init+0x8c>)
 8000c36:	2240      	movs	r2, #64	; 0x40
 8000c38:	601a      	str	r2, [r3, #0]
		RTC_Init(&RTC_InitStruct);
 8000c3a:	4814      	ldr	r0, [pc, #80]	; (8000c8c <clock_init+0x8c>)
 8000c3c:	f001 f988 	bl	8001f50 <RTC_Init>
	}

	/* EXTI configuration */
	{
		EXTI_ClearITPendingBit(EXTI_Line17);
 8000c40:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c44:	f000 fee2 	bl	8001a0c <EXTI_ClearITPendingBit>
		EXTI_InitStruct.EXTI_Line = EXTI_Line17;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <clock_init+0x90>)
 8000c4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c4e:	601a      	str	r2, [r3, #0]
		EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <clock_init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	711a      	strb	r2, [r3, #4]
		EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <clock_init+0x90>)
 8000c58:	2208      	movs	r2, #8
 8000c5a:	715a      	strb	r2, [r3, #5]
		EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <clock_init+0x90>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	719a      	strb	r2, [r3, #6]
		EXTI_Init(&EXTI_InitStruct);
 8000c62:	480b      	ldr	r0, [pc, #44]	; (8000c90 <clock_init+0x90>)
 8000c64:	f000 fe60 	bl	8001928 <EXTI_Init>
	}
	/* Enable Alarm interrupt */
	{
		NVIC_InitTypeDef NVIC_InitStruct;
		NVIC_InitStruct.NVIC_IRQChannel = RTC_Alarm_IRQn;
 8000c68:	2329      	movs	r3, #41	; 0x29
 8000c6a:	713b      	strb	r3, [r7, #4]
		NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	717b      	strb	r3, [r7, #5]
		NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	71bb      	strb	r3, [r7, #6]
		NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000c74:	2301      	movs	r3, #1
 8000c76:	71fb      	strb	r3, [r7, #7]
		NVIC_Init(&NVIC_InitStruct);
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 fb5e 	bl	800133c <NVIC_Init>
	}
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	00080300 	.word	0x00080300
 8000c8c:	2000035c 	.word	0x2000035c
 8000c90:	20000378 	.word	0x20000378

08000c94 <RTC_Alarm_IRQHandler>:
 * @brief	Alarm Handler
 * @param	None
 * @retval	None
 */

void RTC_Alarm_IRQHandler(void){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	/* ALARM A Detection */
	while(RTC_GetITStatus(RTC_IT_ALRA)==RESET);	// Wait for Alarm A event
 8000c98:	bf00      	nop
 8000c9a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c9e:	f001 fa19 	bl	80020d4 <RTC_GetITStatus>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0f8      	beq.n	8000c9a <RTC_Alarm_IRQHandler+0x6>
	RTC_ClearITPendingBit(RTC_IT_ALRA);			// Clear Alarm A interrupt pending bit
 8000ca8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000cac:	f001 fa46 	bl	800213c <RTC_ClearITPendingBit>
	EXTI_ClearITPendingBit(EXTI_Line17);		// Clear External Interrupt pending bit
 8000cb0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000cb4:	f000 feaa 	bl	8001a0c <EXTI_ClearITPendingBit>

	/* TODO What need to be done when Alarm event occurs*/
	GPIO_ToggleBits(GPIOD, GPIO_Pin_13);
 8000cb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <RTC_Alarm_IRQHandler+0x34>)
 8000cbe:	f000 ff53 	bl	8001b68 <GPIO_ToggleBits>
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40020c00 	.word	0x40020c00

08000ccc <NPC_init>:
/**
 * @brief	Initialize all firmwares used by the NPC
 * @param	None
 * @retval	None
 */
void NPC_init(void){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	/* Initialise bluetooth */
	bluetooth_init();
 8000cd0:	f7ff fe74 	bl	80009bc <bluetooth_init>
	/* Initialise neopixel */
	neopixel_init();
 8000cd4:	f000 f870 	bl	8000db8 <neopixel_init>
	/* Initialise clock */
	clock_init();
 8000cd8:	f7ff ff92 	bl	8000c00 <clock_init>
	/* Initialise eeprom*/
	eeprom_init();
 8000cdc:	f000 f804 	bl	8000ce8 <eeprom_init>
	/* Initialise temperature */
	temperature_init();
 8000ce0:	f000 fa88 	bl	80011f4 <temperature_init>
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <eeprom_init>:
/**
 * @brief Initialise communication to the eeprom
 * @param None
 * @retval None
 */
void eeprom_init(void){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
	/* RCC Configuration */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000cee:	2101      	movs	r1, #1
 8000cf0:	2002      	movs	r0, #2
 8000cf2:	f001 f88d 	bl	8001e10 <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000cfc:	f001 f8a8 	bl	8001e50 <RCC_APB1PeriphClockCmd>

	/* GPIO Configuration */
	// MOSI, MISO, CLK configuration
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000d00:	2302      	movs	r3, #2
 8000d02:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000d04:	2300      	movs	r3, #0
 8000d06:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15;
 8000d10:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d14:	61bb      	str	r3, [r7, #24]
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d16:	f107 0318 	add.w	r3, r7, #24
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4824      	ldr	r0, [pc, #144]	; (8000db0 <eeprom_init+0xc8>)
 8000d1e:	f000 fe85 	bl	8001a2c <GPIO_Init>
	// CS configuration
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12;
 8000d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d26:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000d30:	2302      	movs	r3, #2
 8000d32:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d34:	f107 0318 	add.w	r3, r7, #24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	481d      	ldr	r0, [pc, #116]	; (8000db0 <eeprom_init+0xc8>)
 8000d3c:	f000 fe76 	bl	8001a2c <GPIO_Init>

	GPIO_SetBits(GPIOB, GPIO_Pin_12); // set CS High
 8000d40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d44:	481a      	ldr	r0, [pc, #104]	; (8000db0 <eeprom_init+0xc8>)
 8000d46:	f000 feff 	bl	8001b48 <GPIO_SetBits>
	// Configuring MISO,MOSI,CLK as Alternate function of SPI2
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource13, GPIO_AF_SPI2);
 8000d4a:	2205      	movs	r2, #5
 8000d4c:	210d      	movs	r1, #13
 8000d4e:	4818      	ldr	r0, [pc, #96]	; (8000db0 <eeprom_init+0xc8>)
 8000d50:	f000 ff1c 	bl	8001b8c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource14, GPIO_AF_SPI2);
 8000d54:	2205      	movs	r2, #5
 8000d56:	210e      	movs	r1, #14
 8000d58:	4815      	ldr	r0, [pc, #84]	; (8000db0 <eeprom_init+0xc8>)
 8000d5a:	f000 ff17 	bl	8001b8c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource15, GPIO_AF_SPI2);
 8000d5e:	2205      	movs	r2, #5
 8000d60:	210f      	movs	r1, #15
 8000d62:	4813      	ldr	r0, [pc, #76]	; (8000db0 <eeprom_init+0xc8>)
 8000d64:	f000 ff12 	bl	8001b8c <GPIO_PinAFConfig>

	/* SPI Configuration */
	SPI_InitTypeDef SPI_InitStrcut;
	SPI_I2S_DeInit(SPI2);
 8000d68:	4812      	ldr	r0, [pc, #72]	; (8000db4 <eeprom_init+0xcc>)
 8000d6a:	f001 fa05 	bl	8002178 <SPI_I2S_DeInit>
	SPI_InitStrcut.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8000d6e:	2318      	movs	r3, #24
 8000d70:	823b      	strh	r3, [r7, #16]
	SPI_InitStrcut.SPI_CPHA = SPI_CPHA_1Edge;
 8000d72:	2300      	movs	r3, #0
 8000d74:	81bb      	strh	r3, [r7, #12]
	SPI_InitStrcut.SPI_CPOL = SPI_CPOL_Low;
 8000d76:	2300      	movs	r3, #0
 8000d78:	817b      	strh	r3, [r7, #10]
	SPI_InitStrcut.SPI_CRCPolynomial = 7;
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	82bb      	strh	r3, [r7, #20]
	SPI_InitStrcut.SPI_DataSize = SPI_DataSize_8b;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	813b      	strh	r3, [r7, #8]
	SPI_InitStrcut.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000d82:	2300      	movs	r3, #0
 8000d84:	80bb      	strh	r3, [r7, #4]
	SPI_InitStrcut.SPI_FirstBit = SPI_FirstBit_MSB;
 8000d86:	2300      	movs	r3, #0
 8000d88:	827b      	strh	r3, [r7, #18]
	SPI_InitStrcut.SPI_Mode = SPI_Mode_Master;
 8000d8a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000d8e:	80fb      	strh	r3, [r7, #6]
	SPI_InitStrcut.SPI_NSS = SPI_NSS_Soft;
 8000d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d94:	81fb      	strh	r3, [r7, #14]

	SPI_Init(SPI2, &SPI_InitStrcut);
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4806      	ldr	r0, [pc, #24]	; (8000db4 <eeprom_init+0xcc>)
 8000d9c:	f001 fa5a 	bl	8002254 <SPI_Init>
	SPI_Cmd(SPI2, ENABLE);
 8000da0:	2101      	movs	r1, #1
 8000da2:	4804      	ldr	r0, [pc, #16]	; (8000db4 <eeprom_init+0xcc>)
 8000da4:	f001 fa9a 	bl	80022dc <SPI_Cmd>
}
 8000da8:	bf00      	nop
 8000daa:	3720      	adds	r7, #32
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40020400 	.word	0x40020400
 8000db4:	40003800 	.word	0x40003800

08000db8 <neopixel_init>:
/**
 * @brief	Initialise the neopixel
 * @param	None
 * @retval	None
 */
void neopixel_init(void){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08c      	sub	sp, #48	; 0x30
 8000dbc:	af00      	add	r7, sp, #0

	// Init data
	neopixel_dataInit();
 8000dbe:	f000 f89f 	bl	8000f00 <neopixel_dataInit>

	// Enable RCC for timer TIM2, GPIOA and DMA1
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f001 f843 	bl	8001e50 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000dca:	2101      	movs	r1, #1
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f001 f81f 	bl	8001e10 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000dd8:	f001 f81a 	bl	8001e10 <RCC_AHB1PeriphClockCmd>

	// GPIO management
	{
		GPIO_InitTypeDef GPIO_InitStruct;

		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		GPIO_InitStruct.GPIO_Pin = GPIO_Pin_5;
 8000de8:	2320      	movs	r3, #32
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000dec:	2302      	movs	r3, #2
 8000dee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		GPIO_PinAFConfig(GPIOA,GPIO_PinSource5,GPIO_AF_TIM2);
 8000df2:	2201      	movs	r2, #1
 8000df4:	2105      	movs	r1, #5
 8000df6:	4825      	ldr	r0, [pc, #148]	; (8000e8c <neopixel_init+0xd4>)
 8000df8:	f000 fec8 	bl	8001b8c <GPIO_PinAFConfig>
		GPIO_Init(GPIOA,&GPIO_InitStruct);
 8000dfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e00:	4619      	mov	r1, r3
 8000e02:	4822      	ldr	r0, [pc, #136]	; (8000e8c <neopixel_init+0xd4>)
 8000e04:	f000 fe12 	bl	8001a2c <GPIO_Init>

	// TIM Timebase management
	{
		TIM_TimeBaseInitTypeDef TIM_BaseStruct;

		TIM_BaseStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	83fb      	strh	r3, [r7, #30]
		TIM_BaseStruct.TIM_Period = TIMER_PERIOD - 1;
 8000e10:	2368      	movs	r3, #104	; 0x68
 8000e12:	623b      	str	r3, [r7, #32]
		TIM_BaseStruct.TIM_Prescaler = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	83bb      	strh	r3, [r7, #28]
		TIM_BaseStruct.TIM_RepetitionCounter = LED_BUFFER_SIZE+1;
 8000e18:	23c6      	movs	r3, #198	; 0xc6
 8000e1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		// Initialise TIM2
		TIM_TimeBaseInit(TIM2,&TIM_BaseStruct);
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e28:	f001 faa4 	bl	8002374 <TIM_TimeBaseInit>
		//
		TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2101      	movs	r1, #1
 8000e30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e34:	f001 fbc0 	bl	80025b8 <TIM_ITConfig>

	// TIM Output Compare management
	{
		TIM_OCInitTypeDef TIM_OCStruct;

		TIM_OCStruct.TIM_OCMode = TIM_OCMode_PWM1;
 8000e38:	2360      	movs	r3, #96	; 0x60
 8000e3a:	813b      	strh	r3, [r7, #8]
		TIM_OCStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	82bb      	strh	r3, [r7, #20]
		TIM_OCStruct.TIM_OutputState = TIM_OutputState_Enable;
 8000e40:	2301      	movs	r3, #1
 8000e42:	817b      	strh	r3, [r7, #10]
		TIM_OCStruct.TIM_Pulse = WS2812_0;
 8000e44:	2323      	movs	r3, #35	; 0x23
 8000e46:	613b      	str	r3, [r7, #16]
		// Initialise TIM2 PWM1
		TIM_OC1Init(TIM2,&TIM_OCStruct);
 8000e48:	f107 0308 	add.w	r3, r7, #8
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e52:	f001 fb1b 	bl	800248c <TIM_OC1Init>
		// Activate OCPreload
		TIM_OC1PreloadConfig(TIM2,TIM_OCPreload_Disable);
 8000e56:	2100      	movs	r1, #0
 8000e58:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e5c:	f001 fb90 	bl	8002580 <TIM_OC1PreloadConfig>

	// TIM interrupt DMA and FLAG management
	{
		NVIC_InitTypeDef NVIC_InitStruct;

		NVIC_InitStruct.NVIC_IRQChannel = TIM2_IRQn;
 8000e60:	231c      	movs	r3, #28
 8000e62:	713b      	strb	r3, [r7, #4]
		NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	717b      	strb	r3, [r7, #5]
		NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	71bb      	strb	r3, [r7, #6]
		NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	71fb      	strb	r3, [r7, #7]
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8000e70:	2101      	movs	r1, #1
 8000e72:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e76:	f001 fbed 	bl	8002654 <TIM_ClearITPendingBit>
		NVIC_Init(&NVIC_InitStruct);
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 fa5d 	bl	800133c <NVIC_Init>
		// Enable TIM DMA
		TIM_DMACmd(TIM2,TIM_DMA_CC1,ENABLE);
		//
		//TIM_CtrlPWMOutputs(TIM2,DISABLE);
	}*/
}
 8000e82:	bf00      	nop
 8000e84:	3730      	adds	r7, #48	; 0x30
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40020000 	.word	0x40020000

08000e90 <TIM2_IRQHandler>:
 * @brief	Timer Handler for neopixel
 * @note	LEDBuffer is pushed every time the handle is called
 * @param	None
 * @retval	None
 */
void TIM2_IRQHandler(void){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	static int index = 0;

	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
 8000e94:	2101      	movs	r1, #1
 8000e96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e9a:	f001 fbb1 	bl	8002600 <TIM_GetITStatus>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d024      	beq.n	8000eee <TIM2_IRQHandler+0x5e>
	{
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000eaa:	f001 fbd3 	bl	8002654 <TIM_ClearITPendingBit>
	    TIM2->CCR1 = LEDbuffer[index];
 8000eae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <TIM2_IRQHandler+0x64>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4910      	ldr	r1, [pc, #64]	; (8000ef8 <TIM2_IRQHandler+0x68>)
 8000eb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ebc:	6353      	str	r3, [r2, #52]	; 0x34
	    if(index==LED_BUFFER_SIZE)
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <TIM2_IRQHandler+0x64>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2bc5      	cmp	r3, #197	; 0xc5
 8000ec4:	d104      	bne.n	8000ed0 <TIM2_IRQHandler+0x40>
	    	// Start count of TIM2
			TIM_Cmd(TIM2,DISABLE);
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ecc:	f001 fabe 	bl	800244c <TIM_Cmd>
	    index = (index + 1)% LED_BUFFER_SIZE;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <TIM2_IRQHandler+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <TIM2_IRQHandler+0x6c>)
 8000ed8:	fb83 1302 	smull	r1, r3, r3, r2
 8000edc:	1199      	asrs	r1, r3, #6
 8000ede:	17d3      	asrs	r3, r2, #31
 8000ee0:	1acb      	subs	r3, r1, r3
 8000ee2:	21c5      	movs	r1, #197	; 0xc5
 8000ee4:	fb01 f303 	mul.w	r3, r1, r3
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	4a02      	ldr	r2, [pc, #8]	; (8000ef4 <TIM2_IRQHandler+0x64>)
 8000eec:	6013      	str	r3, [r2, #0]
	 }

	//GPIO_ToggleBits(GPIOD,GPIO_Pin_13);
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000358 	.word	0x20000358
 8000ef8:	20000044 	.word	0x20000044
 8000efc:	532ae21d 	.word	0x532ae21d

08000f00 <neopixel_dataInit>:
/**
 * @brief  	Initialise the LEDbuffer
 * @param 	None
 * @retval	None
 */
void neopixel_dataInit(void){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
	uint32_t index, buffIndex;
	buffIndex = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]

	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	e00a      	b.n	8000f26 <neopixel_dataInit+0x26>
		LEDbuffer[buffIndex] = WS2812_RESET;
 8000f10:	4a20      	ldr	r2, [pc, #128]	; (8000f94 <neopixel_dataInit+0x94>)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	2100      	movs	r1, #0
 8000f16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		buffIndex++;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	603b      	str	r3, [r7, #0]
 */
void neopixel_dataInit(void){
	uint32_t index, buffIndex;
	buffIndex = 0;

	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3301      	adds	r3, #1
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b31      	cmp	r3, #49	; 0x31
 8000f2a:	d9f1      	bls.n	8000f10 <neopixel_dataInit+0x10>
		LEDbuffer[buffIndex] = WS2812_RESET;
		buffIndex++;
	}
	for (index = 0; index < LED_DATA_SIZE; index++) {
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	e00a      	b.n	8000f48 <neopixel_dataInit+0x48>
		LEDbuffer[buffIndex] = WS2812_0;
 8000f32:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <neopixel_dataInit+0x94>)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	2123      	movs	r1, #35	; 0x23
 8000f38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		buffIndex++;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	603b      	str	r3, [r7, #0]

	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
		LEDbuffer[buffIndex] = WS2812_RESET;
		buffIndex++;
	}
	for (index = 0; index < LED_DATA_SIZE; index++) {
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3301      	adds	r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b5f      	cmp	r3, #95	; 0x5f
 8000f4c:	d9f1      	bls.n	8000f32 <neopixel_dataInit+0x32>
		LEDbuffer[buffIndex] = WS2812_0;
		buffIndex++;
	}
	LEDbuffer[buffIndex] = WS2812_0;
 8000f4e:	4a11      	ldr	r2, [pc, #68]	; (8000f94 <neopixel_dataInit+0x94>)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	2123      	movs	r1, #35	; 0x23
 8000f54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	buffIndex++;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	e00a      	b.n	8000f7a <neopixel_dataInit+0x7a>
		LEDbuffer[buffIndex] = WS2812_RESET;
 8000f64:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <neopixel_dataInit+0x94>)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2100      	movs	r1, #0
 8000f6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		buffIndex++;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	603b      	str	r3, [r7, #0]
		LEDbuffer[buffIndex] = WS2812_0;
		buffIndex++;
	}
	LEDbuffer[buffIndex] = WS2812_0;
	buffIndex++;
	for (index = 0; index < RESET_SLOTS_END; index++) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3301      	adds	r3, #1
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b31      	cmp	r3, #49	; 0x31
 8000f7e:	d9f1      	bls.n	8000f64 <neopixel_dataInit+0x64>
		LEDbuffer[buffIndex] = WS2812_RESET;
		buffIndex++;
	}
	// Start count of TIM2
	TIM_Cmd(TIM2,ENABLE);
 8000f80:	2101      	movs	r1, #1
 8000f82:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f86:	f001 fa61 	bl	800244c <TIM_Cmd>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000044 	.word	0x20000044

08000f98 <neopixel_setPixelColourRGB>:
 * @param	r: RED intensity
 * @param	g: GREEN intensity
 * @param	b: BLUE intensity
 * @retval	None
 */
void neopixel_setPixelColourRGB(uint8_t n, uint8_t r, uint8_t g, uint8_t b){
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b08d      	sub	sp, #52	; 0x34
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	71fb      	strb	r3, [r7, #7]
 8000faa:	4603      	mov	r3, r0
 8000fac:	71bb      	strb	r3, [r7, #6]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	717b      	strb	r3, [r7, #5]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	713b      	strb	r3, [r7, #4]
	// scale according to brightness
	float _max = (float)max(r,g,b);
 8000fb6:	79bb      	ldrb	r3, [r7, #6]
 8000fb8:	7979      	ldrb	r1, [r7, #5]
 8000fba:	793a      	ldrb	r2, [r7, #4]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f9a1 	bl	8001304 <max>
 8000fc2:	ee07 0a90 	vmov	s15, r0
 8000fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float b_scale = brightness/_max;
 8000fce:	4b5b      	ldr	r3, [pc, #364]	; (800113c <neopixel_setPixelColourRGB+0x1a4>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fda:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fe2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	// scale RGB
	r = (uint8_t) ((float)r*b_scale);
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ff0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ffc:	edc7 7a00 	vstr	s15, [r7]
 8001000:	783b      	ldrb	r3, [r7, #0]
 8001002:	71bb      	strb	r3, [r7, #6]
	g = (uint8_t) ((float)g*b_scale);
 8001004:	797b      	ldrb	r3, [r7, #5]
 8001006:	ee07 3a90 	vmov	s15, r3
 800100a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800100e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800101a:	edc7 7a00 	vstr	s15, [r7]
 800101e:	783b      	ldrb	r3, [r7, #0]
 8001020:	717b      	strb	r3, [r7, #5]
	b = (uint8_t) ((float)b*b_scale);
 8001022:	793b      	ldrb	r3, [r7, #4]
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800102c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001038:	edc7 7a00 	vstr	s15, [r7]
 800103c:	783b      	ldrb	r3, [r7, #0]
 800103e:	713b      	strb	r3, [r7, #4]

	uint8_t tempBuffer[24];
	uint32_t i;
	uint32_t LEDindex;
	LEDindex = n % LED_NUMBER;
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 8; i++) // GREEN data
 8001048:	2300      	movs	r3, #0
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800104c:	e013      	b.n	8001076 <neopixel_setPixelColourRGB+0xde>
		tempBuffer[i] = ((g << i) & 0x80) ? WS2812_1 : WS2812_0;
 800104e:	797a      	ldrb	r2, [r7, #5]
 8001050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <neopixel_setPixelColourRGB+0xca>
 800105e:	2146      	movs	r1, #70	; 0x46
 8001060:	e000      	b.n	8001064 <neopixel_setPixelColourRGB+0xcc>
 8001062:	2123      	movs	r1, #35	; 0x23
 8001064:	f107 0208 	add.w	r2, r7, #8
 8001068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106a:	4413      	add	r3, r2
 800106c:	460a      	mov	r2, r1
 800106e:	701a      	strb	r2, [r3, #0]
	uint8_t tempBuffer[24];
	uint32_t i;
	uint32_t LEDindex;
	LEDindex = n % LED_NUMBER;

	for (i = 0; i < 8; i++) // GREEN data
 8001070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001072:	3301      	adds	r3, #1
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001078:	2b07      	cmp	r3, #7
 800107a:	d9e8      	bls.n	800104e <neopixel_setPixelColourRGB+0xb6>
		tempBuffer[i] = ((g << i) & 0x80) ? WS2812_1 : WS2812_0;
	for (i = 0; i < 8; i++) // RED
 800107c:	2300      	movs	r3, #0
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001080:	e014      	b.n	80010ac <neopixel_setPixelColourRGB+0x114>
		tempBuffer[8 + i] = ((r << i) & 0x80) ? WS2812_1 : WS2812_0;
 8001082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001084:	3308      	adds	r3, #8
 8001086:	79b9      	ldrb	r1, [r7, #6]
 8001088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800108a:	fa01 f202 	lsl.w	r2, r1, r2
 800108e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001092:	2a00      	cmp	r2, #0
 8001094:	d001      	beq.n	800109a <neopixel_setPixelColourRGB+0x102>
 8001096:	2246      	movs	r2, #70	; 0x46
 8001098:	e000      	b.n	800109c <neopixel_setPixelColourRGB+0x104>
 800109a:	2223      	movs	r2, #35	; 0x23
 800109c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80010a0:	440b      	add	r3, r1
 80010a2:	f803 2c28 	strb.w	r2, [r3, #-40]
	uint32_t LEDindex;
	LEDindex = n % LED_NUMBER;

	for (i = 0; i < 8; i++) // GREEN data
		tempBuffer[i] = ((g << i) & 0x80) ? WS2812_1 : WS2812_0;
	for (i = 0; i < 8; i++) // RED
 80010a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a8:	3301      	adds	r3, #1
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ae:	2b07      	cmp	r3, #7
 80010b0:	d9e7      	bls.n	8001082 <neopixel_setPixelColourRGB+0xea>
		tempBuffer[8 + i] = ((r << i) & 0x80) ? WS2812_1 : WS2812_0;
	for (i = 0; i < 8; i++) // BLUE
 80010b2:	2300      	movs	r3, #0
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010b6:	e014      	b.n	80010e2 <neopixel_setPixelColourRGB+0x14a>
		tempBuffer[16 + i] = ((b << i) & 0x80) ? WS2812_1 : WS2812_0;
 80010b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ba:	3310      	adds	r3, #16
 80010bc:	7939      	ldrb	r1, [r7, #4]
 80010be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010c0:	fa01 f202 	lsl.w	r2, r1, r2
 80010c4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80010c8:	2a00      	cmp	r2, #0
 80010ca:	d001      	beq.n	80010d0 <neopixel_setPixelColourRGB+0x138>
 80010cc:	2246      	movs	r2, #70	; 0x46
 80010ce:	e000      	b.n	80010d2 <neopixel_setPixelColourRGB+0x13a>
 80010d0:	2223      	movs	r2, #35	; 0x23
 80010d2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80010d6:	440b      	add	r3, r1
 80010d8:	f803 2c28 	strb.w	r2, [r3, #-40]

	for (i = 0; i < 8; i++) // GREEN data
		tempBuffer[i] = ((g << i) & 0x80) ? WS2812_1 : WS2812_0;
	for (i = 0; i < 8; i++) // RED
		tempBuffer[8 + i] = ((r << i) & 0x80) ? WS2812_1 : WS2812_0;
	for (i = 0; i < 8; i++) // BLUE
 80010dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010de:	3301      	adds	r3, #1
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e4:	2b07      	cmp	r3, #7
 80010e6:	d9e7      	bls.n	80010b8 <neopixel_setPixelColourRGB+0x120>
		tempBuffer[16 + i] = ((b << i) & 0x80) ? WS2812_1 : WS2812_0;
	TIM_Cmd(TIM2,DISABLE);
 80010e8:	2100      	movs	r1, #0
 80010ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010ee:	f001 f9ad 	bl	800244c <TIM_Cmd>
	for (i = 0; i < 24; i++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010f6:	e014      	b.n	8001122 <neopixel_setPixelColourRGB+0x18a>
		LEDbuffer[RESET_SLOTS_BEGIN + LEDindex * 24 + i] = tempBuffer[i];
 80010f8:	6a3a      	ldr	r2, [r7, #32]
 80010fa:	4613      	mov	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4413      	add	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	461a      	mov	r2, r3
 8001104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001106:	4413      	add	r3, r2
 8001108:	3332      	adds	r3, #50	; 0x32
 800110a:	f107 0108 	add.w	r1, r7, #8
 800110e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001110:	440a      	add	r2, r1
 8001112:	7812      	ldrb	r2, [r2, #0]
 8001114:	4611      	mov	r1, r2
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <neopixel_setPixelColourRGB+0x1a8>)
 8001118:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < 8; i++) // RED
		tempBuffer[8 + i] = ((r << i) & 0x80) ? WS2812_1 : WS2812_0;
	for (i = 0; i < 8; i++) // BLUE
		tempBuffer[16 + i] = ((b << i) & 0x80) ? WS2812_1 : WS2812_0;
	TIM_Cmd(TIM2,DISABLE);
	for (i = 0; i < 24; i++)
 800111c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111e:	3301      	adds	r3, #1
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001124:	2b17      	cmp	r3, #23
 8001126:	d9e7      	bls.n	80010f8 <neopixel_setPixelColourRGB+0x160>
		LEDbuffer[RESET_SLOTS_BEGIN + LEDindex * 24 + i] = tempBuffer[i];
	TIM_Cmd(TIM2,ENABLE);
 8001128:	2101      	movs	r1, #1
 800112a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800112e:	f001 f98d 	bl	800244c <TIM_Cmd>
}
 8001132:	bf00      	nop
 8001134:	3734      	adds	r7, #52	; 0x34
 8001136:	46bd      	mov	sp, r7
 8001138:	bd90      	pop	{r4, r7, pc}
 800113a:	bf00      	nop
 800113c:	20000000 	.word	0x20000000
 8001140:	20000044 	.word	0x20000044

08001144 <neopixel_setBrightness>:
 * 			- fully bright:	255
 * @param	b: Brightness
 * @retval	None
 */

void neopixel_setBrightness(uint8_t b){
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	brightness = b;
 800114e:	4a04      	ldr	r2, [pc, #16]	; (8001160 <neopixel_setBrightness+0x1c>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	7013      	strb	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	20000000 	.word	0x20000000

08001164 <neopixel_colourRGB>:
 * @param	r: RED intensity
 * @param	g: GREEN intensity
 * @param	b: BLUE intensity
 * @retval	None
 */
uint32_t neopixel_colourRGB(uint8_t r,uint8_t g,uint8_t b){
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	460b      	mov	r3, r1
 8001170:	71bb      	strb	r3, [r7, #6]
 8001172:	4613      	mov	r3, r2
 8001174:	717b      	strb	r3, [r7, #5]
	return (uint32_t)(r<<16 | g<<8 | b);
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	041a      	lsls	r2, r3, #16
 800117a:	79bb      	ldrb	r3, [r7, #6]
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	431a      	orrs	r2, r3
 8001180:	797b      	ldrb	r3, [r7, #5]
 8001182:	4313      	orrs	r3, r2
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <neopixel_setPixelColour>:
 * @brief 	Set the colour of one led
 * @param	n: Led index
 * @param	c: 32bit RGB colour
 * @retval	None
 */
void neopixel_setPixelColour(uint8_t n, uint32_t c){
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
	neopixel_setPixelColourRGB(n,(uint8_t)(c>>16), (uint8_t)(c>>8), (uint8_t)(c));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	0c1b      	lsrs	r3, r3, #16
 80011a0:	b2d9      	uxtb	r1, r3
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	79f8      	ldrb	r0, [r7, #7]
 80011ae:	f7ff fef3 	bl	8000f98 <neopixel_setPixelColourRGB>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop

080011bc <USART2_IRQHandler>:
/**
 * @brief	USART2 Interrupt Handler
 * @param 	None
 * @retval	none
 */
void USART2_IRQHandler(void){
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	// Wait until reception
	while(USART_GetFlagStatus(SLAVE_USARTX, USART_FLAG_RXNE)==RESET);
 80011c0:	bf00      	nop
 80011c2:	2120      	movs	r1, #32
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <USART2_IRQHandler+0x1c>)
 80011c6:	f001 fb9b 	bl	8002900 <USART_GetFlagStatus>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0f8      	beq.n	80011c2 <USART2_IRQHandler+0x6>
	slave_receive();
 80011d0:	f000 f804 	bl	80011dc <slave_receive>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40004400 	.word	0x40004400

080011dc <slave_receive>:
/**
 * @brief	receive a byte from slave
 * @param	None
 * @retval	An uint8_t byte of data
 */
uint8_t slave_receive(void){
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	return USART_ReceiveData(SLAVE_USARTX);
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <slave_receive+0x14>)
 80011e2:	f001 fb35 	bl	8002850 <USART_ReceiveData>
 80011e6:	4603      	mov	r3, r0
 80011e8:	b2db      	uxtb	r3, r3
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40004400 	.word	0x40004400

080011f4 <temperature_init>:
 * 			3) Configure ADC channel8 pin as analog input
 * 			4) Configure ADC1 channel 1
 * 	@param 	None
 * 	@retval None
 */
void temperature_init(void){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0
	// Clock configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80011fa:	2101      	movs	r1, #1
 80011fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001200:	f000 fe46 	bl	8001e90 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);
 8001204:	2101      	movs	r1, #1
 8001206:	2002      	movs	r0, #2
 8001208:	f000 fe02 	bl	8001e10 <RCC_AHB1PeriphClockCmd>

	// Analogue pin configuration
	{
		GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
 800120c:	2301      	movs	r3, #1
 800120e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AN;
 8001210:	2303      	movs	r3, #3
 8001212:	773b      	strb	r3, [r7, #28]
		GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	77fb      	strb	r3, [r7, #31]
		GPIO_Init(GPIOB,&GPIO_InitStruct);
 8001218:	f107 0318 	add.w	r3, r7, #24
 800121c:	4619      	mov	r1, r3
 800121e:	4813      	ldr	r0, [pc, #76]	; (800126c <temperature_init+0x78>)
 8001220:	f000 fc04 	bl	8001a2c <GPIO_Init>
	}

	// ADC structure configuration
	{
		ADC_DeInit();
 8001224:	f000 f8ec 	bl	8001400 <ADC_DeInit>
		ADC_InitTypeDef ADC_InitStruct;
		ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right;
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
		ADC_InitStruct.ADC_Resolution = ADC_Resolution_12b;
 800122c:	2300      	movs	r3, #0
 800122e:	603b      	str	r3, [r7, #0]
		ADC_InitStruct.ADC_ContinuousConvMode = ENABLE;
 8001230:	2301      	movs	r3, #1
 8001232:	717b      	strb	r3, [r7, #5]
		ADC_InitStruct.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
		ADC_InitStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
		ADC_InitStruct.ADC_NbrOfConversion = 1;
 800123c:	2301      	movs	r3, #1
 800123e:	753b      	strb	r3, [r7, #20]
		ADC_InitStruct.ADC_ScanConvMode = DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	713b      	strb	r3, [r7, #4]
		ADC_Init(ADC1,&ADC_InitStruct);
 8001244:	463b      	mov	r3, r7
 8001246:	4619      	mov	r1, r3
 8001248:	4809      	ldr	r0, [pc, #36]	; (8001270 <temperature_init+0x7c>)
 800124a:	f000 f8e7 	bl	800141c <ADC_Init>
		ADC_Cmd(ADC1,ENABLE);
 800124e:	2101      	movs	r1, #1
 8001250:	4807      	ldr	r0, [pc, #28]	; (8001270 <temperature_init+0x7c>)
 8001252:	f000 f939 	bl	80014c8 <ADC_Cmd>
		ADC_RegularChannelConfig(ADC1,ADC_Channel_8,1,ADC_SampleTime_144Cycles);
 8001256:	2306      	movs	r3, #6
 8001258:	2201      	movs	r2, #1
 800125a:	2108      	movs	r1, #8
 800125c:	4804      	ldr	r0, [pc, #16]	; (8001270 <temperature_init+0x7c>)
 800125e:	f000 f94f 	bl	8001500 <ADC_RegularChannelConfig>
	}
}
 8001262:	bf00      	nop
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40020400 	.word	0x40020400
 8001270:	40012000 	.word	0x40012000

08001274 <temperature_value>:
/**
 * @brief Read ADC value
 * @param None
 * @retval uint32_t of the ADC value
 */
uint16_t temperature_value(void){
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	ADC_SoftwareStartConv(ADC1);
 8001278:	4808      	ldr	r0, [pc, #32]	; (800129c <temperature_value+0x28>)
 800127a:	f000 fa0b 	bl	8001694 <ADC_SoftwareStartConv>
	while(!ADC_GetFlagStatus(ADC1,ADC_FLAG_EOC));
 800127e:	bf00      	nop
 8001280:	2102      	movs	r1, #2
 8001282:	4806      	ldr	r0, [pc, #24]	; (800129c <temperature_value+0x28>)
 8001284:	f000 fa24 	bl	80016d0 <ADC_GetFlagStatus>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f8      	beq.n	8001280 <temperature_value+0xc>
	return ADC_GetConversionValue(ADC1);
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <temperature_value+0x28>)
 8001290:	f000 fa10 	bl	80016b4 <ADC_GetConversionValue>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40012000 	.word	0x40012000

080012a0 <temperature_read>:
 * @brief Convert the ADC value to its corresponding
 * 			temperature value
 * @param None
 * @retval int32_t of the temperature read
 */
int32_t temperature_read(void){
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
	// Convert digital reading to voltage equivalent
	float gradient = 3000.0/0xFFF;
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <temperature_read+0x58>)
 80012a8:	607b      	str	r3, [r7, #4]
	float voltage = temperature_value()*gradient;
 80012aa:	f7ff ffe3 	bl	8001274 <temperature_value>
 80012ae:	4603      	mov	r3, r0
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c0:	edc7 7a00 	vstr	s15, [r7]

	// Convert voltage to temperature
	return (int32_t) ((voltage-500)/10.0);
 80012c4:	edd7 7a00 	vldr	s15, [r7]
 80012c8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80012fc <temperature_read+0x5c>
 80012cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012d0:	ee17 0a90 	vmov	r0, s15
 80012d4:	f7ff f8e4 	bl	80004a0 <__aeabi_f2d>
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <temperature_read+0x60>)
 80012de:	f7ff fa5d 	bl	800079c <__aeabi_ddiv>
 80012e2:	4603      	mov	r3, r0
 80012e4:	460c      	mov	r4, r1
 80012e6:	4618      	mov	r0, r3
 80012e8:	4621      	mov	r1, r4
 80012ea:	f7ff fb3f 	bl	800096c <__aeabi_d2iz>
 80012ee:	4603      	mov	r3, r0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd90      	pop	{r4, r7, pc}
 80012f8:	3f3b8bb9 	.word	0x3f3b8bb9
 80012fc:	43fa0000 	.word	0x43fa0000
 8001300:	40240000 	.word	0x40240000

08001304 <max>:
 * @param	a: First value
 * @param	b: second value
 * @param	c: Third value
 * @retval	uint32_t of the maximum value
 */
uint32_t max(uint32_t a, uint32_t b, uint32_t c){
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
	return a>b?(a>c?a:c):(b>c?b:c);
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	429a      	cmp	r2, r3
 8001316:	d905      	bls.n	8001324 <max+0x20>
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4293      	cmp	r3, r2
 800131e:	bf38      	it	cc
 8001320:	4613      	movcc	r3, r2
 8001322:	e004      	b.n	800132e <max+0x2a>
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	4293      	cmp	r3, r2
 800132a:	bf38      	it	cc
 800132c:	4613      	movcc	r3, r2
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop

0800133c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001344:	2300      	movs	r3, #0
 8001346:	73fb      	strb	r3, [r7, #15]
 8001348:	2300      	movs	r3, #0
 800134a:	73bb      	strb	r3, [r7, #14]
 800134c:	230f      	movs	r3, #15
 800134e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	78db      	ldrb	r3, [r3, #3]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d038      	beq.n	80013ca <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <NVIC_Init+0xbc>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	43db      	mvns	r3, r3
 800135e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001362:	0a1b      	lsrs	r3, r3, #8
 8001364:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	f1c3 0304 	rsb	r3, r3, #4
 800136c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800136e:	7b7a      	ldrb	r2, [r7, #13]
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	fa42 f303 	asr.w	r3, r2, r3
 8001376:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	785b      	ldrb	r3, [r3, #1]
 800137c:	461a      	mov	r2, r3
 800137e:	7bbb      	ldrb	r3, [r7, #14]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	789a      	ldrb	r2, [r3, #2]
 800138a:	7b7b      	ldrb	r3, [r7, #13]
 800138c:	4013      	ands	r3, r2
 800138e:	b2da      	uxtb	r2, r3
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	4313      	orrs	r3, r2
 8001394:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800139c:	4a17      	ldr	r2, [pc, #92]	; (80013fc <NVIC_Init+0xc0>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80013aa:	4a14      	ldr	r2, [pc, #80]	; (80013fc <NVIC_Init+0xc0>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	095b      	lsrs	r3, r3, #5
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	f003 031f 	and.w	r3, r3, #31
 80013be:	2101      	movs	r1, #1
 80013c0:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80013c4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80013c8:	e00f      	b.n	80013ea <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80013ca:	490c      	ldr	r1, [pc, #48]	; (80013fc <NVIC_Init+0xc0>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	095b      	lsrs	r3, r3, #5
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	2201      	movs	r2, #1
 80013e0:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80013e2:	f100 0320 	add.w	r3, r0, #32
 80013e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00
 80013fc:	e000e100 	.word	0xe000e100

08001400 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8001404:	2101      	movs	r1, #1
 8001406:	f44f 7080 	mov.w	r0, #256	; 0x100
 800140a:	f000 fd81 	bl	8001f10 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 800140e:	2100      	movs	r1, #0
 8001410:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001414:	f000 fd7c 	bl	8001f10 <RCC_APB2PeriphResetCmd>
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}

0800141c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800143a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800143e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	791b      	ldrb	r3, [r3, #4]
 8001444:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800144a:	4313      	orrs	r3, r2
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4313      	orrs	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <ADC_Init+0xa8>)
 8001462:	4013      	ands	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800146e:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8001474:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	795b      	ldrb	r3, [r3, #5]
 800147a:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800147c:	4313      	orrs	r3, r2
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148e:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001496:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	7d1b      	ldrb	r3, [r3, #20]
 800149c:	3b01      	subs	r3, #1
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	7afb      	ldrb	r3, [r7, #11]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80014a6:	7afb      	ldrb	r3, [r7, #11]
 80014a8:	051b      	lsls	r3, r3, #20
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	c0fff7fd 	.word	0xc0fff7fd

080014c8 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f043 0201 	orr.w	r2, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80014e6:	e005      	b.n	80014f4 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f023 0201 	bic.w	r2, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	609a      	str	r2, [r3, #8]
  }
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	4608      	mov	r0, r1
 800150a:	4611      	mov	r1, r2
 800150c:	461a      	mov	r2, r3
 800150e:	4603      	mov	r3, r0
 8001510:	70fb      	strb	r3, [r7, #3]
 8001512:	460b      	mov	r3, r1
 8001514:	70bb      	strb	r3, [r7, #2]
 8001516:	4613      	mov	r3, r2
 8001518:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001522:	78fb      	ldrb	r3, [r7, #3]
 8001524:	2b09      	cmp	r3, #9
 8001526:	d923      	bls.n	8001570 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	f1a3 020a 	sub.w	r2, r3, #10
 8001534:	4613      	mov	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	2207      	movs	r2, #7
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	43db      	mvns	r3, r3
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	4013      	ands	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 800154c:	7879      	ldrb	r1, [r7, #1]
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	f1a3 020a 	sub.w	r2, r3, #10
 8001554:	4613      	mov	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4413      	add	r3, r2
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	4313      	orrs	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	e01e      	b.n	80015ae <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8001576:	78fa      	ldrb	r2, [r7, #3]
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	2207      	movs	r2, #7
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	43db      	mvns	r3, r3
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	4013      	ands	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8001590:	7879      	ldrb	r1, [r7, #1]
 8001592:	78fa      	ldrb	r2, [r7, #3]
 8001594:	4613      	mov	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80015ae:	78bb      	ldrb	r3, [r7, #2]
 80015b0:	2b06      	cmp	r3, #6
 80015b2:	d821      	bhi.n	80015f8 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80015ba:	78bb      	ldrb	r3, [r7, #2]
 80015bc:	1e5a      	subs	r2, r3, #1
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	221f      	movs	r2, #31
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	4013      	ands	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80015d6:	78f9      	ldrb	r1, [r7, #3]
 80015d8:	78bb      	ldrb	r3, [r7, #2]
 80015da:	1e5a      	subs	r2, r3, #1
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80015f6:	e047      	b.n	8001688 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80015f8:	78bb      	ldrb	r3, [r7, #2]
 80015fa:	2b0c      	cmp	r3, #12
 80015fc:	d821      	bhi.n	8001642 <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8001604:	78bb      	ldrb	r3, [r7, #2]
 8001606:	1fda      	subs	r2, r3, #7
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	221f      	movs	r2, #31
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	43db      	mvns	r3, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4013      	ands	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8001620:	78f9      	ldrb	r1, [r7, #3]
 8001622:	78bb      	ldrb	r3, [r7, #2]
 8001624:	1fda      	subs	r2, r3, #7
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	fa01 f303 	lsl.w	r3, r1, r3
 8001630:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4313      	orrs	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8001640:	e022      	b.n	8001688 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8001648:	78bb      	ldrb	r3, [r7, #2]
 800164a:	f1a3 020d 	sub.w	r2, r3, #13
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	221f      	movs	r2, #31
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	43db      	mvns	r3, r3
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	4013      	ands	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8001666:	78f9      	ldrb	r1, [r7, #3]
 8001668:	78bb      	ldrb	r3, [r7, #2]
 800166a:	f1a3 020d 	sub.w	r2, r3, #13
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	fa01 f303 	lsl.w	r3, r1, r3
 8001678:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	4313      	orrs	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	609a      	str	r2, [r3, #8]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c0:	b29b      	uxth	r3, r3
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop

080016d0 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d002      	beq.n	80016f2 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	e001      	b.n	80016f6 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <DAC_SetChannel1Data+0x34>)
 8001716:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	3308      	adds	r3, #8
 8001720:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	461a      	mov	r2, r3
 8001726:	887b      	ldrh	r3, [r7, #2]
 8001728:	6013      	str	r3, [r2, #0]
}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40007400 	.word	0x40007400

0800173c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <DMA_Init+0xac>)
 8001754:	4013      	ands	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001766:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001772:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800177e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001784:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800178a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001790:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	4313      	orrs	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f023 0307 	bic.w	r3, r3, #7
 80017aa:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b4:	4313      	orrs	r3, r2
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	691a      	ldr	r2, [r3, #16]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60da      	str	r2, [r3, #12]
}
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	f01c803f 	.word	0xf01c803f

080017ec <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d006      	beq.n	800180c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f043 0201 	orr.w	r2, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800180a:	e005      	b.n	8001818 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 0201 	bic.w	r2, r3, #1
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	601a      	str	r2, [r3, #0]
  }
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d002      	beq.n	8001842 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	e001      	b.n	8001846 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8001846:	7bfb      	ldrb	r3, [r7, #15]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a15      	ldr	r2, [pc, #84]	; (80018c0 <DMA_GetFlagStatus+0x6c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d802      	bhi.n	8001874 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <DMA_GetFlagStatus+0x70>)
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	e001      	b.n	8001878 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <DMA_GetFlagStatus+0x74>)
 8001876:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	e002      	b.n	8001890 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001896:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800189a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80018a6:	2301      	movs	r3, #1
 80018a8:	75fb      	strb	r3, [r7, #23]
 80018aa:	e001      	b.n	80018b0 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80018ac:	2300      	movs	r3, #0
 80018ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80018b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	371c      	adds	r7, #28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	4002640f 	.word	0x4002640f
 80018c4:	40026000 	.word	0x40026000
 80018c8:	40026400 	.word	0x40026400

080018cc <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a10      	ldr	r2, [pc, #64]	; (800191c <DMA_ClearFlag+0x50>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d802      	bhi.n	80018e4 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <DMA_ClearFlag+0x54>)
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	e001      	b.n	80018e8 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <DMA_ClearFlag+0x58>)
 80018e6:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80018f8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8001900:	e006      	b.n	8001910 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001908:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	6093      	str	r3, [r2, #8]
  }    
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	4002640f 	.word	0x4002640f
 8001920:	40026000 	.word	0x40026000
 8001924:	40026400 	.word	0x40026400

08001928 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8001934:	4b34      	ldr	r3, [pc, #208]	; (8001a08 <EXTI_Init+0xe0>)
 8001936:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	799b      	ldrb	r3, [r3, #6]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d04f      	beq.n	80019e0 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001940:	4931      	ldr	r1, [pc, #196]	; (8001a08 <EXTI_Init+0xe0>)
 8001942:	4b31      	ldr	r3, [pc, #196]	; (8001a08 <EXTI_Init+0xe0>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	43db      	mvns	r3, r3
 800194c:	4013      	ands	r3, r2
 800194e:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001950:	492d      	ldr	r1, [pc, #180]	; (8001a08 <EXTI_Init+0xe0>)
 8001952:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <EXTI_Init+0xe0>)
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	43db      	mvns	r3, r3
 800195c:	4013      	ands	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	791b      	ldrb	r3, [r3, #4]
 8001964:	461a      	mov	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4413      	add	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	6811      	ldr	r1, [r2, #0]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800197a:	4923      	ldr	r1, [pc, #140]	; (8001a08 <EXTI_Init+0xe0>)
 800197c:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <EXTI_Init+0xe0>)
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	43db      	mvns	r3, r3
 8001986:	4013      	ands	r3, r2
 8001988:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800198a:	491f      	ldr	r1, [pc, #124]	; (8001a08 <EXTI_Init+0xe0>)
 800198c:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <EXTI_Init+0xe0>)
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	43db      	mvns	r3, r3
 8001996:	4013      	ands	r3, r2
 8001998:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	795b      	ldrb	r3, [r3, #5]
 800199e:	2b10      	cmp	r3, #16
 80019a0:	d10e      	bne.n	80019c0 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80019a2:	4919      	ldr	r1, [pc, #100]	; (8001a08 <EXTI_Init+0xe0>)
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <EXTI_Init+0xe0>)
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80019b0:	4915      	ldr	r1, [pc, #84]	; (8001a08 <EXTI_Init+0xe0>)
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <EXTI_Init+0xe0>)
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80019be:	e01d      	b.n	80019fc <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <EXTI_Init+0xe0>)
 80019c2:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	795b      	ldrb	r3, [r3, #5]
 80019c8:	461a      	mov	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4413      	add	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	6811      	ldr	r1, [r2, #0]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80019de:	e00d      	b.n	80019fc <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	791b      	ldrb	r3, [r3, #4]
 80019e4:	461a      	mov	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4413      	add	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	6811      	ldr	r1, [r2, #0]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	43d2      	mvns	r2, r2
 80019f8:	400a      	ands	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]
  }
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	40013c00 	.word	0x40013c00

08001a0c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <EXTI_ClearITPendingBit+0x1c>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6153      	str	r3, [r2, #20]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40013c00 	.word	0x40013c00

08001a2c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	e076      	b.n	8001b36 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001a48:	2201      	movs	r2, #1
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d165      	bne.n	8001b30 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	2103      	movs	r1, #3
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	401a      	ands	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	791b      	ldrb	r3, [r3, #4]
 8001a82:	4619      	mov	r1, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	791b      	ldrb	r3, [r3, #4]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d003      	beq.n	8001aa2 <GPIO_Init+0x76>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	791b      	ldrb	r3, [r3, #4]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d12e      	bne.n	8001b00 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2103      	movs	r1, #3
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	795b      	ldrb	r3, [r3, #5]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	2101      	movs	r1, #1
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	799b      	ldrb	r3, [r3, #6]
 8001aee:	4619      	mov	r1, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	fa01 f303 	lsl.w	r3, r1, r3
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2103      	movs	r1, #3
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	401a      	ands	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	79db      	ldrb	r3, [r3, #7]
 8001b20:	4619      	mov	r1, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d985      	bls.n	8001a48 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	371c      	adds	r7, #28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	831a      	strh	r2, [r3, #24]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop

08001b68 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	695a      	ldr	r2, [r3, #20]
 8001b78:	887b      	ldrh	r3, [r7, #2]
 8001b7a:	405a      	eors	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	615a      	str	r2, [r3, #20]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	807b      	strh	r3, [r7, #2]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001ba4:	787a      	ldrb	r2, [r7, #1]
 8001ba6:	887b      	ldrh	r3, [r7, #2]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	08db      	lsrs	r3, r3, #3
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	887b      	ldrh	r3, [r7, #2]
 8001bbe:	08db      	lsrs	r3, r3, #3
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3208      	adds	r2, #8
 8001bc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001bcc:	887b      	ldrh	r3, [r7, #2]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	210f      	movs	r1, #15
 8001bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	ea02 0103 	and.w	r1, r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f100 0208 	add.w	r2, r0, #8
 8001be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001bea:	887b      	ldrh	r3, [r7, #2]
 8001bec:	08db      	lsrs	r3, r3, #3
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3208      	adds	r2, #8
 8001bf6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	08db      	lsrs	r3, r3, #3
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3208      	adds	r2, #8
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop

08001c20 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the backup domain.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 8001c2a:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <PWR_BackupAccessCmd+0x1c>)
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	420e0020 	.word	0x420e0020

08001c40 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
 8001c54:	2302      	movs	r3, #2
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001c60:	4b48      	ldr	r3, [pc, #288]	; (8001d84 <RCC_GetClocksFreq+0x144>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d007      	beq.n	8001c80 <RCC_GetClocksFreq+0x40>
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d009      	beq.n	8001c88 <RCC_GetClocksFreq+0x48>
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d13f      	bne.n	8001cf8 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a43      	ldr	r2, [pc, #268]	; (8001d88 <RCC_GetClocksFreq+0x148>)
 8001c7c:	601a      	str	r2, [r3, #0]
      break;
 8001c7e:	e03f      	b.n	8001d00 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a42      	ldr	r2, [pc, #264]	; (8001d8c <RCC_GetClocksFreq+0x14c>)
 8001c84:	601a      	str	r2, [r3, #0]
      break;
 8001c86:	e03b      	b.n	8001d00 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001c88:	4b3e      	ldr	r3, [pc, #248]	; (8001d84 <RCC_GetClocksFreq+0x144>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c90:	0d9b      	lsrs	r3, r3, #22
 8001c92:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c94:	4b3b      	ldr	r3, [pc, #236]	; (8001d84 <RCC_GetClocksFreq+0x144>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c9c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00d      	beq.n	8001cc0 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001ca4:	4a39      	ldr	r2, [pc, #228]	; (8001d8c <RCC_GetClocksFreq+0x14c>)
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cac:	4b35      	ldr	r3, [pc, #212]	; (8001d84 <RCC_GetClocksFreq+0x144>)
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cb4:	400b      	ands	r3, r1
 8001cb6:	099b      	lsrs	r3, r3, #6
 8001cb8:	fb03 f302 	mul.w	r3, r3, r2
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	e00c      	b.n	8001cda <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001cc0:	4a31      	ldr	r2, [pc, #196]	; (8001d88 <RCC_GetClocksFreq+0x148>)
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cc8:	4b2e      	ldr	r3, [pc, #184]	; (8001d84 <RCC_GetClocksFreq+0x144>)
 8001cca:	6859      	ldr	r1, [r3, #4]
 8001ccc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cd0:	400b      	ands	r3, r1
 8001cd2:	099b      	lsrs	r3, r3, #6
 8001cd4:	fb03 f302 	mul.w	r3, r3, r2
 8001cd8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001cda:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <RCC_GetClocksFreq+0x144>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ce2:	0c1b      	lsrs	r3, r3, #16
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	601a      	str	r2, [r3, #0]
      break;
 8001cf6:	e003      	b.n	8001d00 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a23      	ldr	r2, [pc, #140]	; (8001d88 <RCC_GetClocksFreq+0x148>)
 8001cfc:	601a      	str	r2, [r3, #0]
      break;
 8001cfe:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001d00:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <RCC_GetClocksFreq+0x144>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d08:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001d10:	4a1f      	ldr	r2, [pc, #124]	; (8001d90 <RCC_GetClocksFreq+0x150>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	4413      	add	r3, r2
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	40da      	lsrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001d28:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <RCC_GetClocksFreq+0x144>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001d30:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	0a9b      	lsrs	r3, r3, #10
 8001d36:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001d38:	4a15      	ldr	r2, [pc, #84]	; (8001d90 <RCC_GetClocksFreq+0x150>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	40da      	lsrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <RCC_GetClocksFreq+0x144>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001d58:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	0b5b      	lsrs	r3, r3, #13
 8001d5e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001d60:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <RCC_GetClocksFreq+0x150>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	4413      	add	r3, r2
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	40da      	lsrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	60da      	str	r2, [r3, #12]
}
 8001d78:	bf00      	nop
 8001d7a:	3724      	adds	r7, #36	; 0x24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	40023800 	.word	0x40023800
 8001d88:	00f42400 	.word	0x00f42400
 8001d8c:	007a1200 	.word	0x007a1200
 8001d90:	20000004 	.word	0x20000004

08001d94 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001daa:	d111      	bne.n	8001dd0 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <RCC_RTCCLKConfig+0x58>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001db8:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8001dca:	4a08      	ldr	r2, [pc, #32]	; (8001dec <RCC_RTCCLKConfig+0x58>)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6093      	str	r3, [r2, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8001dd0:	4906      	ldr	r1, [pc, #24]	; (8001dec <RCC_RTCCLKConfig+0x58>)
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <RCC_RTCCLKConfig+0x58>)
 8001dd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	670b      	str	r3, [r1, #112]	; 0x70
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	40023800 	.word	0x40023800

08001df0 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <RCC_RTCCLKCmd+0x1c>)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	42470e3c 	.word	0x42470e3c

08001e10 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d006      	beq.n	8001e30 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001e22:	490a      	ldr	r1, [pc, #40]	; (8001e4c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001e2e:	e006      	b.n	8001e3e <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001e30:	4906      	ldr	r1, [pc, #24]	; (8001e4c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800

08001e50 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d006      	beq.n	8001e70 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001e62:	490a      	ldr	r1, [pc, #40]	; (8001e8c <RCC_APB1PeriphClockCmd+0x3c>)
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <RCC_APB1PeriphClockCmd+0x3c>)
 8001e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001e6e:	e006      	b.n	8001e7e <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001e70:	4906      	ldr	r1, [pc, #24]	; (8001e8c <RCC_APB1PeriphClockCmd+0x3c>)
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <RCC_APB1PeriphClockCmd+0x3c>)
 8001e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800

08001e90 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d006      	beq.n	8001eb0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001ea2:	490a      	ldr	r1, [pc, #40]	; (8001ecc <RCC_APB2PeriphClockCmd+0x3c>)
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <RCC_APB2PeriphClockCmd+0x3c>)
 8001ea6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001eae:	e006      	b.n	8001ebe <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001eb0:	4906      	ldr	r1, [pc, #24]	; (8001ecc <RCC_APB2PeriphClockCmd+0x3c>)
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <RCC_APB2PeriphClockCmd+0x3c>)
 8001eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	4013      	ands	r3, r2
 8001ebc:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800

08001ed0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d006      	beq.n	8001ef0 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001ee2:	490a      	ldr	r1, [pc, #40]	; (8001f0c <RCC_APB1PeriphResetCmd+0x3c>)
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <RCC_APB1PeriphResetCmd+0x3c>)
 8001ee6:	6a1a      	ldr	r2, [r3, #32]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001eee:	e006      	b.n	8001efe <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001ef0:	4906      	ldr	r1, [pc, #24]	; (8001f0c <RCC_APB1PeriphResetCmd+0x3c>)
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <RCC_APB1PeriphResetCmd+0x3c>)
 8001ef4:	6a1a      	ldr	r2, [r3, #32]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	4013      	ands	r3, r2
 8001efc:	620b      	str	r3, [r1, #32]
  }
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800

08001f10 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d006      	beq.n	8001f30 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001f22:	490a      	ldr	r1, [pc, #40]	; (8001f4c <RCC_APB2PeriphResetCmd+0x3c>)
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <RCC_APB2PeriphResetCmd+0x3c>)
 8001f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001f2e:	e006      	b.n	8001f3e <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001f30:	4906      	ldr	r1, [pc, #24]	; (8001f4c <RCC_APB2PeriphResetCmd+0x3c>)
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <RCC_APB2PeriphResetCmd+0x3c>)
 8001f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <RTC_Init+0x74>)
 8001f5e:	22ca      	movs	r2, #202	; 0xca
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8001f62:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <RTC_Init+0x74>)
 8001f64:	2253      	movs	r2, #83	; 0x53
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8001f68:	f000 f82e 	bl	8001fc8 <RTC_EnterInitMode>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <RTC_Init+0x28>
  {
    status = ERROR;
 8001f72:	2300      	movs	r3, #0
 8001f74:	73fb      	strb	r3, [r7, #15]
 8001f76:	e01c      	b.n	8001fb2 <RTC_Init+0x62>
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8001f78:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <RTC_Init+0x74>)
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <RTC_Init+0x74>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f82:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 8001f84:	490f      	ldr	r1, [pc, #60]	; (8001fc4 <RTC_Init+0x74>)
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <RTC_Init+0x74>)
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	608b      	str	r3, [r1, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 8001f92:	4a0c      	ldr	r2, [pc, #48]	; (8001fc4 <RTC_Init+0x74>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	6113      	str	r3, [r2, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 8001f9a:	490a      	ldr	r1, [pc, #40]	; (8001fc4 <RTC_Init+0x74>)
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <RTC_Init+0x74>)
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	041b      	lsls	r3, r3, #16
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	610b      	str	r3, [r1, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8001faa:	f000 f847 	bl	800203c <RTC_ExitInitMode>

    status = SUCCESS;    
 8001fae:	2301      	movs	r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <RTC_Init+0x74>)
 8001fb4:	22ff      	movs	r2, #255	; 0xff
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40002800 	.word	0x40002800

08001fc8 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
  __IO uint32_t initcounter = 0x00;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t initstatus = 0x00;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <RTC_EnterInitMode+0x70>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d11e      	bne.n	8002024 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8001fe6:	4b14      	ldr	r3, [pc, #80]	; (8002038 <RTC_EnterInitMode+0x70>)
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <RTC_EnterInitMode+0x70>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff6:	60bb      	str	r3, [r7, #8]
      initcounter++;  
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	607b      	str	r3, [r7, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002004:	d002      	beq.n	800200c <RTC_EnterInitMode+0x44>
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <RTC_EnterInitMode+0x26>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <RTC_EnterInitMode+0x70>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <RTC_EnterInitMode+0x56>
    {
      status = SUCCESS;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	e004      	b.n	8002028 <RTC_EnterInitMode+0x60>
    }
    else
    {
      status = ERROR;
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
 8002022:	e001      	b.n	8002028 <RTC_EnterInitMode+0x60>
    }        
  }
  else
  {
    status = SUCCESS;  
 8002024:	2301      	movs	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
  } 
    
  return (status);  
 8002028:	7bfb      	ldrb	r3, [r7, #15]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40002800 	.word	0x40002800

0800203c <RTC_ExitInitMode>:
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002040:	4a05      	ldr	r2, [pc, #20]	; (8002058 <RTC_ExitInitMode+0x1c>)
 8002042:	4b05      	ldr	r3, [pc, #20]	; (8002058 <RTC_ExitInitMode+0x1c>)
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800204a:	60d3      	str	r3, [r2, #12]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40002800 	.word	0x40002800

0800205c <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
  __IO uint32_t synchrocounter = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 8002066:	2300      	movs	r3, #0
 8002068:	73fb      	strb	r3, [r7, #15]
  uint32_t synchrostatus = 0x00;
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800206e:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <RTC_WaitForSynchro+0x74>)
 8002070:	22ca      	movs	r2, #202	; 0xca
 8002072:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8002074:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <RTC_WaitForSynchro+0x74>)
 8002076:	2253      	movs	r2, #83	; 0x53
 8002078:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 800207a:	4a15      	ldr	r2, [pc, #84]	; (80020d0 <RTC_WaitForSynchro+0x74>)
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <RTC_WaitForSynchro+0x74>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002084:	60d3      	str	r3, [r2, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <RTC_WaitForSynchro+0x74>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f003 0320 	and.w	r3, r3, #32
 800208e:	60bb      	str	r3, [r7, #8]
    synchrocounter++;  
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3301      	adds	r3, #1
 8002094:	607b      	str	r3, [r7, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800209c:	d002      	beq.n	80020a4 <RTC_WaitForSynchro+0x48>
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <RTC_WaitForSynchro+0x2a>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 80020a4:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <RTC_WaitForSynchro+0x74>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <RTC_WaitForSynchro+0x5a>
  {
    status = SUCCESS;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	e001      	b.n	80020ba <RTC_WaitForSynchro+0x5e>
  }
  else
  {
    status = ERROR;
 80020b6:	2300      	movs	r3, #0
 80020b8:	73fb      	strb	r3, [r7, #15]
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <RTC_WaitForSynchro+0x74>)
 80020bc:	22ff      	movs	r2, #255	; 0xff
 80020be:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40002800 	.word	0x40002800

080020d4 <RTC_GetITStatus>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80020dc:	2300      	movs	r3, #0
 80020de:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <RTC_GetITStatus+0x64>)
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <RTC_GetITStatus+0x64>)
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	401a      	ands	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	0bd9      	lsrs	r1, r3, #15
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	400b      	ands	r3, r1
 8002102:	4313      	orrs	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 8002106:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <RTC_GetITStatus+0x64>)
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	091b      	lsrs	r3, r3, #4
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d006      	beq.n	8002126 <RTC_GetITStatus+0x52>
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <RTC_GetITStatus+0x52>
  {
    bitstatus = SET;
 8002120:	2301      	movs	r3, #1
 8002122:	75fb      	strb	r3, [r7, #23]
 8002124:	e001      	b.n	800212a <RTC_GetITStatus+0x56>
  }
  else
  {
    bitstatus = RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 800212a:	7dfb      	ldrb	r3, [r7, #23]
}
 800212c:	4618      	mov	r0, r3
 800212e:	371c      	adds	r7, #28
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	40002800 	.word	0x40002800

0800213c <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 800214e:	4909      	ldr	r1, [pc, #36]	; (8002174 <RTC_ClearITPendingBit+0x38>)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	b29b      	uxth	r3, r3
 8002154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002158:	43da      	mvns	r2, r3
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <RTC_ClearITPendingBit+0x38>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002162:	4313      	orrs	r3, r2
 8002164:	60cb      	str	r3, [r1, #12]
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40002800 	.word	0x40002800

08002178 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a2e      	ldr	r2, [pc, #184]	; (800223c <SPI_I2S_DeInit+0xc4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d10a      	bne.n	800219e <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8002188:	2101      	movs	r1, #1
 800218a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800218e:	f7ff febf 	bl	8001f10 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8002192:	2100      	movs	r1, #0
 8002194:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002198:	f7ff feba 	bl	8001f10 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 800219c:	e049      	b.n	8002232 <SPI_I2S_DeInit+0xba>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a27      	ldr	r2, [pc, #156]	; (8002240 <SPI_I2S_DeInit+0xc8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d10a      	bne.n	80021bc <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80021a6:	2101      	movs	r1, #1
 80021a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021ac:	f7ff fe90 	bl	8001ed0 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80021b0:	2100      	movs	r1, #0
 80021b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021b6:	f7ff fe8b 	bl	8001ed0 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 80021ba:	e03a      	b.n	8002232 <SPI_I2S_DeInit+0xba>
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else if (SPIx == SPI3)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a21      	ldr	r2, [pc, #132]	; (8002244 <SPI_I2S_DeInit+0xcc>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d10a      	bne.n	80021da <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80021c4:	2101      	movs	r1, #1
 80021c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80021ca:	f7ff fe81 	bl	8001ed0 <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80021ce:	2100      	movs	r1, #0
 80021d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80021d4:	f7ff fe7c 	bl	8001ed0 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 80021d8:	e02b      	b.n	8002232 <SPI_I2S_DeInit+0xba>
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  }
  else if (SPIx == SPI4)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a1a      	ldr	r2, [pc, #104]	; (8002248 <SPI_I2S_DeInit+0xd0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d10a      	bne.n	80021f8 <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 80021e2:	2101      	movs	r1, #1
 80021e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021e8:	f7ff fe92 	bl	8001f10 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 80021ec:	2100      	movs	r1, #0
 80021ee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021f2:	f7ff fe8d 	bl	8001f10 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 80021f6:	e01c      	b.n	8002232 <SPI_I2S_DeInit+0xba>
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
  }
  else if (SPIx == SPI5)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a14      	ldr	r2, [pc, #80]	; (800224c <SPI_I2S_DeInit+0xd4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d10a      	bne.n	8002216 <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8002200:	2101      	movs	r1, #1
 8002202:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002206:	f7ff fe83 	bl	8001f10 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 800220a:	2100      	movs	r1, #0
 800220c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002210:	f7ff fe7e 	bl	8001f10 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8002214:	e00d      	b.n	8002232 <SPI_I2S_DeInit+0xba>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
  }
  else 
  {
    if (SPIx == SPI6)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a0d      	ldr	r2, [pc, #52]	; (8002250 <SPI_I2S_DeInit+0xd8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d109      	bne.n	8002232 <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 800221e:	2101      	movs	r1, #1
 8002220:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002224:	f7ff fe74 	bl	8001f10 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8002228:	2100      	movs	r1, #0
 800222a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800222e:	f7ff fe6f 	bl	8001f10 <RCC_APB2PeriphResetCmd>
    }
  }
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40013000 	.word	0x40013000
 8002240:	40003800 	.word	0x40003800
 8002244:	40003c00 	.word	0x40003c00
 8002248:	40013400 	.word	0x40013400
 800224c:	40015000 	.word	0x40015000
 8002250:	40015400 	.word	0x40015400

08002254 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8002268:	89fb      	ldrh	r3, [r7, #14]
 800226a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800226e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	881a      	ldrh	r2, [r3, #0]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	885b      	ldrh	r3, [r3, #2]
 8002278:	4313      	orrs	r3, r2
 800227a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002280:	4313      	orrs	r3, r2
 8002282:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002288:	4313      	orrs	r3, r2
 800228a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002290:	4313      	orrs	r3, r2
 8002292:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002298:	4313      	orrs	r3, r2
 800229a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80022a0:	4313      	orrs	r3, r2
 80022a2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80022a8:	4313      	orrs	r3, r2
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	89fb      	ldrh	r3, [r7, #14]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	89fa      	ldrh	r2, [r7, #14]
 80022b6:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	8b9b      	ldrh	r3, [r3, #28]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	8a1a      	ldrh	r2, [r3, #16]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	821a      	strh	r2, [r3, #16]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d008      	beq.n	8002300 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 80022fe:	e007      	b.n	8002310 <SPI_Cmd+0x34>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800230a:	b29a      	uxth	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	801a      	strh	r2, [r3, #0]
  }
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	819a      	strh	r2, [r3, #12]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop

0800233c <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	891b      	ldrh	r3, [r3, #8]
 8002350:	b29a      	uxth	r2, r3
 8002352:	887b      	ldrh	r3, [r7, #2]
 8002354:	4013      	ands	r3, r2
 8002356:	b29b      	uxth	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	e001      	b.n	8002366 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002366:	7bfb      	ldrb	r3, [r7, #15]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a29      	ldr	r2, [pc, #164]	; (8002430 <TIM_TimeBaseInit+0xbc>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d013      	beq.n	80023b8 <TIM_TimeBaseInit+0x44>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a28      	ldr	r2, [pc, #160]	; (8002434 <TIM_TimeBaseInit+0xc0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00f      	beq.n	80023b8 <TIM_TimeBaseInit+0x44>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800239e:	d00b      	beq.n	80023b8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a25      	ldr	r2, [pc, #148]	; (8002438 <TIM_TimeBaseInit+0xc4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d007      	beq.n	80023b8 <TIM_TimeBaseInit+0x44>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a24      	ldr	r2, [pc, #144]	; (800243c <TIM_TimeBaseInit+0xc8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d003      	beq.n	80023b8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a23      	ldr	r2, [pc, #140]	; (8002440 <TIM_TimeBaseInit+0xcc>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d108      	bne.n	80023ca <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80023b8:	89fb      	ldrh	r3, [r7, #14]
 80023ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023be:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	885a      	ldrh	r2, [r3, #2]
 80023c4:	89fb      	ldrh	r3, [r7, #14]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a1d      	ldr	r2, [pc, #116]	; (8002444 <TIM_TimeBaseInit+0xd0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00c      	beq.n	80023ec <TIM_TimeBaseInit+0x78>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a1c      	ldr	r2, [pc, #112]	; (8002448 <TIM_TimeBaseInit+0xd4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d008      	beq.n	80023ec <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80023da:	89fb      	ldrh	r3, [r7, #14]
 80023dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	891a      	ldrh	r2, [r3, #8]
 80023e6:	89fb      	ldrh	r3, [r7, #14]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	89fa      	ldrh	r2, [r7, #14]
 80023f0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	881a      	ldrh	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <TIM_TimeBaseInit+0xbc>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d003      	beq.n	8002412 <TIM_TimeBaseInit+0x9e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a09      	ldr	r2, [pc, #36]	; (8002434 <TIM_TimeBaseInit+0xc0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d104      	bne.n	800241c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	7a9b      	ldrb	r3, [r3, #10]
 8002416:	b29a      	uxth	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	829a      	strh	r2, [r3, #20]
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40010000 	.word	0x40010000
 8002434:	40010400 	.word	0x40010400
 8002438:	40000400 	.word	0x40000400
 800243c:	40000800 	.word	0x40000800
 8002440:	40000c00 	.word	0x40000c00
 8002444:	40001000 	.word	0x40001000
 8002448:	40001400 	.word	0x40001400

0800244c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d008      	beq.n	8002470 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800246e:	e007      	b.n	8002480 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	b29b      	uxth	r3, r3
 8002476:	f023 0301 	bic.w	r3, r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	801a      	strh	r2, [r3, #0]
  }
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	817b      	strh	r3, [r7, #10]
 800249a:	2300      	movs	r3, #0
 800249c:	81fb      	strh	r3, [r7, #14]
 800249e:	2300      	movs	r3, #0
 80024a0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	8c1b      	ldrh	r3, [r3, #32]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	8c1b      	ldrh	r3, [r3, #32]
 80024b6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	889b      	ldrh	r3, [r3, #4]
 80024bc:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	8b1b      	ldrh	r3, [r3, #24]
 80024c2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 80024c4:	897b      	ldrh	r3, [r7, #10]
 80024c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ca:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80024cc:	897b      	ldrh	r3, [r7, #10]
 80024ce:	f023 0303 	bic.w	r3, r3, #3
 80024d2:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	881a      	ldrh	r2, [r3, #0]
 80024d8:	897b      	ldrh	r3, [r7, #10]
 80024da:	4313      	orrs	r3, r2
 80024dc:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80024de:	89fb      	ldrh	r3, [r7, #14]
 80024e0:	f023 0302 	bic.w	r3, r3, #2
 80024e4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	899a      	ldrh	r2, [r3, #12]
 80024ea:	89fb      	ldrh	r3, [r7, #14]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	885a      	ldrh	r2, [r3, #2]
 80024f4:	89fb      	ldrh	r3, [r7, #14]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a1e      	ldr	r2, [pc, #120]	; (8002578 <TIM_OC1Init+0xec>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d003      	beq.n	800250a <TIM_OC1Init+0x7e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a1d      	ldr	r2, [pc, #116]	; (800257c <TIM_OC1Init+0xf0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d123      	bne.n	8002552 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800250a:	89fb      	ldrh	r3, [r7, #14]
 800250c:	f023 0308 	bic.w	r3, r3, #8
 8002510:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	89da      	ldrh	r2, [r3, #14]
 8002516:	89fb      	ldrh	r3, [r7, #14]
 8002518:	4313      	orrs	r3, r2
 800251a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800251c:	89fb      	ldrh	r3, [r7, #14]
 800251e:	f023 0304 	bic.w	r3, r3, #4
 8002522:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	889a      	ldrh	r2, [r3, #4]
 8002528:	89fb      	ldrh	r3, [r7, #14]
 800252a:	4313      	orrs	r3, r2
 800252c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 800252e:	89bb      	ldrh	r3, [r7, #12]
 8002530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002534:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8002536:	89bb      	ldrh	r3, [r7, #12]
 8002538:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800253c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	8a1a      	ldrh	r2, [r3, #16]
 8002542:	89bb      	ldrh	r3, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	8a5a      	ldrh	r2, [r3, #18]
 800254c:	89bb      	ldrh	r3, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	89ba      	ldrh	r2, [r7, #12]
 8002556:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	897a      	ldrh	r2, [r7, #10]
 800255c:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	89fa      	ldrh	r2, [r7, #14]
 800256a:	841a      	strh	r2, [r3, #32]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	40010000 	.word	0x40010000
 800257c:	40010400 	.word	0x40010400

08002580 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	8b1b      	ldrh	r3, [r3, #24]
 8002594:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8002596:	89fb      	ldrh	r3, [r7, #14]
 8002598:	f023 0308 	bic.w	r3, r3, #8
 800259c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800259e:	89fa      	ldrh	r2, [r7, #14]
 80025a0:	887b      	ldrh	r3, [r7, #2]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	89fa      	ldrh	r2, [r7, #14]
 80025aa:	831a      	strh	r2, [r3, #24]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
 80025c4:	4613      	mov	r3, r2
 80025c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80025c8:	787b      	ldrb	r3, [r7, #1]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d008      	beq.n	80025e0 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	899b      	ldrh	r3, [r3, #12]
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	887b      	ldrh	r3, [r7, #2]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	b29a      	uxth	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80025de:	e009      	b.n	80025f4 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	899b      	ldrh	r3, [r3, #12]
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4013      	ands	r3, r2
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	819a      	strh	r2, [r3, #12]
  }
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800260c:	2300      	movs	r3, #0
 800260e:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8002610:	2300      	movs	r3, #0
 8002612:	81bb      	strh	r3, [r7, #12]
 8002614:	2300      	movs	r3, #0
 8002616:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	8a1b      	ldrh	r3, [r3, #16]
 800261c:	b29a      	uxth	r2, r3
 800261e:	887b      	ldrh	r3, [r7, #2]
 8002620:	4013      	ands	r3, r2
 8002622:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	899b      	ldrh	r3, [r3, #12]
 8002628:	b29a      	uxth	r2, r3
 800262a:	887b      	ldrh	r3, [r7, #2]
 800262c:	4013      	ands	r3, r2
 800262e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002630:	89bb      	ldrh	r3, [r7, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <TIM_GetITStatus+0x42>
 8002636:	897b      	ldrh	r3, [r7, #10]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	e001      	b.n	8002646 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8002660:	887b      	ldrh	r3, [r7, #2]
 8002662:	43db      	mvns	r3, r3
 8002664:	b29a      	uxth	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	821a      	strh	r2, [r3, #16]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop

08002678 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	; 0x28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
 8002686:	2300      	movs	r3, #0
 8002688:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800268e:	2300      	movs	r3, #0
 8002690:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	8a1b      	ldrh	r3, [r3, #16]
 8002696:	b29b      	uxth	r3, r3
 8002698:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	88db      	ldrh	r3, [r3, #6]
 80026a6:	461a      	mov	r2, r3
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	4313      	orrs	r3, r2
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	899b      	ldrh	r3, [r3, #12]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80026c4:	f023 030c 	bic.w	r3, r3, #12
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	889a      	ldrh	r2, [r3, #4]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	891b      	ldrh	r3, [r3, #8]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80026da:	4313      	orrs	r3, r2
 80026dc:	b29b      	uxth	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	4313      	orrs	r3, r2
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	8a9b      	ldrh	r3, [r3, #20]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	899b      	ldrh	r3, [r3, #12]
 8002702:	461a      	mov	r2, r3
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	4313      	orrs	r3, r2
 8002708:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	b29a      	uxth	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002712:	f107 0308 	add.w	r3, r7, #8
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fa92 	bl	8001c40 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a30      	ldr	r2, [pc, #192]	; (80027e0 <USART_Init+0x168>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d003      	beq.n	800272c <USART_Init+0xb4>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a2f      	ldr	r2, [pc, #188]	; (80027e4 <USART_Init+0x16c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d102      	bne.n	8002732 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	623b      	str	r3, [r7, #32]
 8002730:	e001      	b.n	8002736 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	899b      	ldrh	r3, [r3, #12]
 800273a:	b29b      	uxth	r3, r3
 800273c:	b21b      	sxth	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	da0c      	bge.n	800275c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002742:	6a3a      	ldr	r2, [r7, #32]
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	009a      	lsls	r2, r3, #2
 800274c:	441a      	add	r2, r3
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	fbb2 f3f3 	udiv	r3, r2, r3
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	e00b      	b.n	8002774 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800275c:	6a3a      	ldr	r2, [r7, #32]
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	009a      	lsls	r2, r3, #2
 8002766:	441a      	add	r2, r3
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002772:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	4a1c      	ldr	r2, [pc, #112]	; (80027e8 <USART_Init+0x170>)
 8002778:	fba2 2303 	umull	r2, r3, r2, r3
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	2264      	movs	r2, #100	; 0x64
 8002788:	fb02 f303 	mul.w	r3, r2, r3
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	899b      	ldrh	r3, [r3, #12]
 8002796:	b29b      	uxth	r3, r3
 8002798:	b21b      	sxth	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	da0c      	bge.n	80027b8 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	3332      	adds	r3, #50	; 0x32
 80027a4:	4a10      	ldr	r2, [pc, #64]	; (80027e8 <USART_Init+0x170>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b2:	4313      	orrs	r3, r2
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
 80027b6:	e00b      	b.n	80027d0 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	3332      	adds	r3, #50	; 0x32
 80027be:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <USART_Init+0x170>)
 80027c0:	fba2 2303 	umull	r2, r3, r2, r3
 80027c4:	095b      	lsrs	r3, r3, #5
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027cc:	4313      	orrs	r3, r2
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	811a      	strh	r2, [r3, #8]
}
 80027d8:	bf00      	nop
 80027da:	3728      	adds	r7, #40	; 0x28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40011000 	.word	0x40011000
 80027e4:	40011400 	.word	0x40011400
 80027e8:	51eb851f 	.word	0x51eb851f

080027ec <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d008      	beq.n	8002810 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	899b      	ldrh	r3, [r3, #12]
 8002802:	b29b      	uxth	r3, r3
 8002804:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002808:	b29a      	uxth	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800280e:	e007      	b.n	8002820 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	899b      	ldrh	r3, [r3, #12]
 8002814:	b29b      	uxth	r3, r3
 8002816:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800281a:	b29a      	uxth	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	819a      	strh	r2, [r3, #12]
  }
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002838:	887b      	ldrh	r3, [r7, #2]
 800283a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800283e:	b29a      	uxth	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	809a      	strh	r2, [r3, #4]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	889b      	ldrh	r3, [r3, #4]
 800285c:	b29b      	uxth	r3, r3
 800285e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002862:	b29b      	uxth	r3, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8002870:	b480      	push	{r7}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
 800287c:	4613      	mov	r3, r2
 800287e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8002880:	2300      	movs	r3, #0
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002894:	887b      	ldrh	r3, [r7, #2]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	095b      	lsrs	r3, r3, #5
 800289a:	b2db      	uxtb	r3, r3
 800289c:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800289e:	887b      	ldrh	r3, [r7, #2]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80028a6:	2201      	movs	r2, #1
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d103      	bne.n	80028be <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	330c      	adds	r3, #12
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	e009      	b.n	80028d2 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d103      	bne.n	80028cc <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	3310      	adds	r3, #16
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	e002      	b.n	80028d2 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	3314      	adds	r3, #20
 80028d0:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80028d2:	787b      	ldrb	r3, [r7, #1]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d006      	beq.n	80028e6 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	6811      	ldr	r1, [r2, #0]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80028e4:	e006      	b.n	80028f4 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	6811      	ldr	r1, [r2, #0]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	43d2      	mvns	r2, r2
 80028f0:	400a      	ands	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]
  }
}
 80028f4:	bf00      	nop
 80028f6:	371c      	adds	r7, #28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800290c:	2300      	movs	r3, #0
 800290e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	b29a      	uxth	r2, r3
 8002916:	887b      	ldrh	r3, [r7, #2]
 8002918:	4013      	ands	r3, r2
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
 8002924:	e001      	b.n	800292a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800292a:	7bfb      	ldrb	r3, [r7, #15]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 800293c:	4b37      	ldr	r3, [pc, #220]	; (8002a1c <Audio_MAL_IRQHandler+0xe4>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b37      	ldr	r3, [pc, #220]	; (8002a20 <Audio_MAL_IRQHandler+0xe8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f7fe ff84 	bl	8001854 <DMA_GetFlagStatus>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d062      	beq.n	8002a18 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8002952:	4b34      	ldr	r3, [pc, #208]	; (8002a24 <Audio_MAL_IRQHandler+0xec>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d04a      	beq.n	80029f0 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800295a:	bf00      	nop
 800295c:	4b2f      	ldr	r3, [pc, #188]	; (8002a1c <Audio_MAL_IRQHandler+0xe4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe ff5f 	bl	8001824 <DMA_GetCmdStatus>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f7      	bne.n	800295c <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 800296c:	4b2b      	ldr	r3, [pc, #172]	; (8002a1c <Audio_MAL_IRQHandler+0xe4>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <Audio_MAL_IRQHandler+0xe8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4619      	mov	r1, r3
 8002976:	4610      	mov	r0, r2
 8002978:	f7fe ffa8 	bl	80018cc <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 800297c:	4b2a      	ldr	r3, [pc, #168]	; (8002a28 <Audio_MAL_IRQHandler+0xf0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	4b2a      	ldr	r3, [pc, #168]	; (8002a2c <Audio_MAL_IRQHandler+0xf4>)
 8002984:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8002986:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <Audio_MAL_IRQHandler+0xec>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800298e:	4293      	cmp	r3, r2
 8002990:	bf28      	it	cs
 8002992:	4613      	movcs	r3, r2
 8002994:	4a25      	ldr	r2, [pc, #148]	; (8002a2c <Audio_MAL_IRQHandler+0xf4>)
 8002996:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8002998:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <Audio_MAL_IRQHandler+0xe4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4923      	ldr	r1, [pc, #140]	; (8002a2c <Audio_MAL_IRQHandler+0xf4>)
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fe fecc 	bl	800173c <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80029a4:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <Audio_MAL_IRQHandler+0xe4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2101      	movs	r1, #1
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe ff1e 	bl	80017ec <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80029b0:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <Audio_MAL_IRQHandler+0xf0>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <Audio_MAL_IRQHandler+0xec>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029bc:	428b      	cmp	r3, r1
 80029be:	bf28      	it	cs
 80029c0:	460b      	movcs	r3, r1
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <Audio_MAL_IRQHandler+0xf0>)
 80029c8:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80029ca:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <Audio_MAL_IRQHandler+0xec>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <Audio_MAL_IRQHandler+0xec>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029d6:	428b      	cmp	r3, r1
 80029d8:	bf28      	it	cs
 80029da:	460b      	movcs	r3, r1
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	4a11      	ldr	r2, [pc, #68]	; (8002a24 <Audio_MAL_IRQHandler+0xec>)
 80029e0:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80029e2:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <Audio_MAL_IRQHandler+0xe4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2101      	movs	r1, #1
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fe feff 	bl	80017ec <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80029ee:	e013      	b.n	8002a18 <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80029f0:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <Audio_MAL_IRQHandler+0xe4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe fef8 	bl	80017ec <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80029fc:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <Audio_MAL_IRQHandler+0xe4>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <Audio_MAL_IRQHandler+0xe8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4619      	mov	r1, r3
 8002a06:	4610      	mov	r0, r2
 8002a08:	f7fe ff60 	bl	80018cc <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <Audio_MAL_IRQHandler+0xf0>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f8ec 	bl	8002bf0 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8002a18:	bf00      	nop
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	2000001c 	.word	0x2000001c
 8002a20:	20000020 	.word	0x20000020
 8002a24:	20000014 	.word	0x20000014
 8002a28:	20000384 	.word	0x20000384
 8002a2c:	200003c4 	.word	0x200003c4

08002a30 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002a34:	f7ff ff80 	bl	8002938 <Audio_MAL_IRQHandler>
}
 8002a38:	bf00      	nop
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002a40:	f7ff ff7a 	bl	8002938 <Audio_MAL_IRQHandler>
}
 8002a44:	bf00      	nop
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	480d      	ldr	r0, [pc, #52]	; (8002a84 <SPI3_IRQHandler+0x3c>)
 8002a50:	f7ff fc74 	bl	800233c <SPI_I2S_GetFlagStatus>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d011      	beq.n	8002a7e <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <SPI3_IRQHandler+0x40>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d106      	bne.n	8002a70 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8002a62:	f000 f8d1 	bl	8002c08 <EVAL_AUDIO_GetSampleCallBack>
 8002a66:	4603      	mov	r3, r0
 8002a68:	4619      	mov	r1, r3
 8002a6a:	2004      	movs	r0, #4
 8002a6c:	f7fe fe4a 	bl	8001704 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8002a70:	f000 f8ca 	bl	8002c08 <EVAL_AUDIO_GetSampleCallBack>
 8002a74:	4603      	mov	r3, r0
 8002a76:	4619      	mov	r1, r3
 8002a78:	4802      	ldr	r0, [pc, #8]	; (8002a84 <SPI3_IRQHandler+0x3c>)
 8002a7a:	f7ff fc4f 	bl	800231c <SPI_I2S_SendData>
  }
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40003c00 	.word	0x40003c00
 8002a88:	20000018 	.word	0x20000018

08002a8c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
  int i = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
  int32_t temp = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	603b      	str	r3, [r7, #0]
  uint32_t color = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]

  /* TODO - Add your application code here */
 /* bluetooth_init();
  GPIO_WriteBit(GPIOD,GPIO_Pin_13,Bit_SET);*/
  /* Infinite loop */
  NPC_init();
 8002a9e:	f7fe f915 	bl	8000ccc <NPC_init>
  bool alarm_comp = test_ClockMangement_alarm_comparison();
 */
  //bool time_save_load = test_ClockMangement_save_and_load_time();
  //bool date_save_load = test_ClockMangement_save_and_load_date();
  //bool alarm_save_load = test_ClockMangement_save_and_load_alarm();
  neopixel_setBrightness(100);
 8002aa2:	2064      	movs	r0, #100	; 0x64
 8002aa4:	f7fe fb4e 	bl	8001144 <neopixel_setBrightness>
  while (1)
  {
	i++;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]
	temp = temperature_read();
 8002aae:	f7fe fbf7 	bl	80012a0 <temperature_read>
 8002ab2:	6038      	str	r0, [r7, #0]
	switch(pixel_color){
 8002ab4:	4b4b      	ldr	r3, [pc, #300]	; (8002be4 <main+0x158>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	3b42      	subs	r3, #66	; 0x42
 8002aba:	2b17      	cmp	r3, #23
 8002abc:	d86a      	bhi.n	8002b94 <main+0x108>
 8002abe:	a201      	add	r2, pc, #4	; (adr r2, 8002ac4 <main+0x38>)
 8002ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac4:	08002b41 	.word	0x08002b41
 8002ac8:	08002b5d 	.word	0x08002b5d
 8002acc:	08002b87 	.word	0x08002b87
 8002ad0:	08002b95 	.word	0x08002b95
 8002ad4:	08002b95 	.word	0x08002b95
 8002ad8:	08002b33 	.word	0x08002b33
 8002adc:	08002b95 	.word	0x08002b95
 8002ae0:	08002b95 	.word	0x08002b95
 8002ae4:	08002b95 	.word	0x08002b95
 8002ae8:	08002b95 	.word	0x08002b95
 8002aec:	08002b95 	.word	0x08002b95
 8002af0:	08002b6b 	.word	0x08002b6b
 8002af4:	08002b95 	.word	0x08002b95
 8002af8:	08002b95 	.word	0x08002b95
 8002afc:	08002b95 	.word	0x08002b95
 8002b00:	08002b95 	.word	0x08002b95
 8002b04:	08002b25 	.word	0x08002b25
 8002b08:	08002b95 	.word	0x08002b95
 8002b0c:	08002b95 	.word	0x08002b95
 8002b10:	08002b95 	.word	0x08002b95
 8002b14:	08002b95 	.word	0x08002b95
 8002b18:	08002b79 	.word	0x08002b79
 8002b1c:	08002b95 	.word	0x08002b95
 8002b20:	08002b4f 	.word	0x08002b4f
	case 'R': color = neopixel_colourRGB(255,0,0); break;
 8002b24:	2200      	movs	r2, #0
 8002b26:	2100      	movs	r1, #0
 8002b28:	20ff      	movs	r0, #255	; 0xff
 8002b2a:	f7fe fb1b 	bl	8001164 <neopixel_colourRGB>
 8002b2e:	60b8      	str	r0, [r7, #8]
 8002b30:	e030      	b.n	8002b94 <main+0x108>
	case 'G': color = neopixel_colourRGB(0,255,0); break;
 8002b32:	2200      	movs	r2, #0
 8002b34:	21ff      	movs	r1, #255	; 0xff
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7fe fb14 	bl	8001164 <neopixel_colourRGB>
 8002b3c:	60b8      	str	r0, [r7, #8]
 8002b3e:	e029      	b.n	8002b94 <main+0x108>
	case 'B': color = neopixel_colourRGB(0,0,255); break;
 8002b40:	22ff      	movs	r2, #255	; 0xff
 8002b42:	2100      	movs	r1, #0
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7fe fb0d 	bl	8001164 <neopixel_colourRGB>
 8002b4a:	60b8      	str	r0, [r7, #8]
 8002b4c:	e022      	b.n	8002b94 <main+0x108>
	case 'Y': color = neopixel_colourRGB(255,255,0); break;
 8002b4e:	2200      	movs	r2, #0
 8002b50:	21ff      	movs	r1, #255	; 0xff
 8002b52:	20ff      	movs	r0, #255	; 0xff
 8002b54:	f7fe fb06 	bl	8001164 <neopixel_colourRGB>
 8002b58:	60b8      	str	r0, [r7, #8]
 8002b5a:	e01b      	b.n	8002b94 <main+0x108>
	case 'C': color = neopixel_colourRGB(0,255,255); break;
 8002b5c:	22ff      	movs	r2, #255	; 0xff
 8002b5e:	21ff      	movs	r1, #255	; 0xff
 8002b60:	2000      	movs	r0, #0
 8002b62:	f7fe faff 	bl	8001164 <neopixel_colourRGB>
 8002b66:	60b8      	str	r0, [r7, #8]
 8002b68:	e014      	b.n	8002b94 <main+0x108>
	case 'M': color = neopixel_colourRGB(255,0,255); break;
 8002b6a:	22ff      	movs	r2, #255	; 0xff
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	20ff      	movs	r0, #255	; 0xff
 8002b70:	f7fe faf8 	bl	8001164 <neopixel_colourRGB>
 8002b74:	60b8      	str	r0, [r7, #8]
 8002b76:	e00d      	b.n	8002b94 <main+0x108>
	case 'W': color = neopixel_colourRGB(255,255,255); break;
 8002b78:	22ff      	movs	r2, #255	; 0xff
 8002b7a:	21ff      	movs	r1, #255	; 0xff
 8002b7c:	20ff      	movs	r0, #255	; 0xff
 8002b7e:	f7fe faf1 	bl	8001164 <neopixel_colourRGB>
 8002b82:	60b8      	str	r0, [r7, #8]
 8002b84:	e006      	b.n	8002b94 <main+0x108>
	case 'D': color = neopixel_colourRGB(0,0,0); break;
 8002b86:	2200      	movs	r2, #0
 8002b88:	2100      	movs	r1, #0
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	f7fe faea 	bl	8001164 <neopixel_colourRGB>
 8002b90:	60b8      	str	r0, [r7, #8]
 8002b92:	bf00      	nop
	}
	int j=150000;
 8002b94:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <main+0x15c>)
 8002b96:	607b      	str	r3, [r7, #4]
	while(j)j--;
 8002b98:	e002      	b.n	8002ba0 <main+0x114>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f9      	bne.n	8002b9a <main+0x10e>
	neopixel_setPixelColour((i-1)%4,0);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	1e5a      	subs	r2, r3, #1
 8002baa:	4b10      	ldr	r3, [pc, #64]	; (8002bec <main+0x160>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	da03      	bge.n	8002bba <main+0x12e>
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	f063 0303 	orn	r3, r3, #3
 8002bb8:	3301      	adds	r3, #1
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fae6 	bl	8001190 <neopixel_setPixelColour>
	neopixel_setPixelColour(i%4,color);
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <main+0x160>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	da03      	bge.n	8002bd6 <main+0x14a>
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	f063 0303 	orn	r3, r3, #3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe fad8 	bl	8001190 <neopixel_setPixelColour>
  }
 8002be0:	e762      	b.n	8002aa8 <main+0x1c>
 8002be2:	bf00      	nop
 8002be4:	20000380 	.word	0x20000380
 8002be8:	000249f0 	.word	0x000249f0
 8002bec:	80000003 	.word	0x80000003

08002bf0 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8002bfa:	bf00      	nop
}
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop

08002c08 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8002c0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop

08002c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c22:	e003      	b.n	8002c2c <LoopCopyDataInit>

08002c24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c2a:	3104      	adds	r1, #4

08002c2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c2c:	480b      	ldr	r0, [pc, #44]	; (8002c5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c34:	d3f6      	bcc.n	8002c24 <CopyDataInit>
  ldr  r2, =_sbss
 8002c36:	4a0b      	ldr	r2, [pc, #44]	; (8002c64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c38:	e002      	b.n	8002c40 <LoopFillZerobss>

08002c3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c3c:	f842 3b04 	str.w	r3, [r2], #4

08002c40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c44:	d3f9      	bcc.n	8002c3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c46:	f000 f84b 	bl	8002ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c4a:	f000 f8fb 	bl	8002e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c4e:	f7ff ff1d 	bl	8002a8c <main>
  bx  lr    
 8002c52:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c54:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8002c58:	0800301c 	.word	0x0800301c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c60:	20000028 	.word	0x20000028
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8002c64:	20000028 	.word	0x20000028
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c68:	20000400 	.word	0x20000400

08002c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c6c:	e7fe      	b.n	8002c6c <ADC_IRQHandler>
	...

08002c70 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop

08002c80 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8002c84:	e7fe      	b.n	8002c84 <HardFault_Handler+0x4>
 8002c86:	bf00      	nop

08002c88 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8002c8c:	e7fe      	b.n	8002c8c <MemManage_Handler+0x4>
 8002c8e:	bf00      	nop

08002c90 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8002c94:	e7fe      	b.n	8002c94 <BusFault_Handler+0x4>
 8002c96:	bf00      	nop

08002c98 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8002c9c:	e7fe      	b.n	8002c9c <UsageFault_Handler+0x4>
 8002c9e:	bf00      	nop

08002ca0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop

08002cb0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop

08002cc0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop

08002cd0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop

08002ce0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ce4:	4a16      	ldr	r2, [pc, #88]	; (8002d40 <SystemInit+0x60>)
 8002ce6:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <SystemInit+0x60>)
 8002ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002cf4:	4a13      	ldr	r2, [pc, #76]	; (8002d44 <SystemInit+0x64>)
 8002cf6:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <SystemInit+0x64>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <SystemInit+0x64>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002d06:	4a0f      	ldr	r2, [pc, #60]	; (8002d44 <SystemInit+0x64>)
 8002d08:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <SystemInit+0x64>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d14:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002d16:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <SystemInit+0x64>)
 8002d18:	4a0b      	ldr	r2, [pc, #44]	; (8002d48 <SystemInit+0x68>)
 8002d1a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002d1c:	4a09      	ldr	r2, [pc, #36]	; (8002d44 <SystemInit+0x64>)
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <SystemInit+0x64>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <SystemInit+0x64>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002d2e:	f000 f80d 	bl	8002d4c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d32:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <SystemInit+0x60>)
 8002d34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d38:	609a      	str	r2, [r3, #8]
#endif
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	e000ed00 	.word	0xe000ed00
 8002d44:	40023800 	.word	0x40023800
 8002d48:	24003010 	.word	0x24003010

08002d4c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	2300      	movs	r3, #0
 8002d58:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002d5a:	4a36      	ldr	r2, [pc, #216]	; (8002e34 <SetSysClock+0xe8>)
 8002d5c:	4b35      	ldr	r3, [pc, #212]	; (8002e34 <SetSysClock+0xe8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d64:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002d66:	4b33      	ldr	r3, [pc, #204]	; (8002e34 <SetSysClock+0xe8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3301      	adds	r3, #1
 8002d74:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d103      	bne.n	8002d84 <SetSysClock+0x38>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002d82:	d1f0      	bne.n	8002d66 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002d84:	4b2b      	ldr	r3, [pc, #172]	; (8002e34 <SetSysClock+0xe8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002d90:	2301      	movs	r3, #1
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	e001      	b.n	8002d9a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002d96:	2300      	movs	r3, #0
 8002d98:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d142      	bne.n	8002e26 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002da0:	4a24      	ldr	r2, [pc, #144]	; (8002e34 <SetSysClock+0xe8>)
 8002da2:	4b24      	ldr	r3, [pc, #144]	; (8002e34 <SetSysClock+0xe8>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002daa:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8002dac:	4a22      	ldr	r2, [pc, #136]	; (8002e38 <SetSysClock+0xec>)
 8002dae:	4b22      	ldr	r3, [pc, #136]	; (8002e38 <SetSysClock+0xec>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002db6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002db8:	4a1e      	ldr	r2, [pc, #120]	; (8002e34 <SetSysClock+0xe8>)
 8002dba:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <SetSysClock+0xe8>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002dc0:	4a1c      	ldr	r2, [pc, #112]	; (8002e34 <SetSysClock+0xe8>)
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <SetSysClock+0xe8>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dca:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002dcc:	4a19      	ldr	r2, [pc, #100]	; (8002e34 <SetSysClock+0xe8>)
 8002dce:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <SetSysClock+0xe8>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002dd6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002dd8:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <SetSysClock+0xe8>)
 8002dda:	4a18      	ldr	r2, [pc, #96]	; (8002e3c <SetSysClock+0xf0>)
 8002ddc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002dde:	4a15      	ldr	r2, [pc, #84]	; (8002e34 <SetSysClock+0xe8>)
 8002de0:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <SetSysClock+0xe8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002de8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002dea:	bf00      	nop
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <SetSysClock+0xe8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f9      	beq.n	8002dec <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <SetSysClock+0xf4>)
 8002dfa:	f240 6205 	movw	r2, #1541	; 0x605
 8002dfe:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002e00:	4a0c      	ldr	r2, [pc, #48]	; (8002e34 <SetSysClock+0xe8>)
 8002e02:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <SetSysClock+0xe8>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f023 0303 	bic.w	r3, r3, #3
 8002e0a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002e0c:	4a09      	ldr	r2, [pc, #36]	; (8002e34 <SetSysClock+0xe8>)
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <SetSysClock+0xe8>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f043 0302 	orr.w	r3, r3, #2
 8002e16:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002e18:	bf00      	nop
 8002e1a:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <SetSysClock+0xe8>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d1f9      	bne.n	8002e1a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40023800 	.word	0x40023800
 8002e38:	40007000 	.word	0x40007000
 8002e3c:	07405408 	.word	0x07405408
 8002e40:	40023c00 	.word	0x40023c00

08002e44 <__libc_init_array>:
 8002e44:	b570      	push	{r4, r5, r6, lr}
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <__libc_init_array+0x3c>)
 8002e48:	4c0e      	ldr	r4, [pc, #56]	; (8002e84 <__libc_init_array+0x40>)
 8002e4a:	1ae4      	subs	r4, r4, r3
 8002e4c:	10a4      	asrs	r4, r4, #2
 8002e4e:	2500      	movs	r5, #0
 8002e50:	461e      	mov	r6, r3
 8002e52:	42a5      	cmp	r5, r4
 8002e54:	d004      	beq.n	8002e60 <__libc_init_array+0x1c>
 8002e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e5a:	4798      	blx	r3
 8002e5c:	3501      	adds	r5, #1
 8002e5e:	e7f8      	b.n	8002e52 <__libc_init_array+0xe>
 8002e60:	f000 f816 	bl	8002e90 <_init>
 8002e64:	4c08      	ldr	r4, [pc, #32]	; (8002e88 <__libc_init_array+0x44>)
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <__libc_init_array+0x48>)
 8002e68:	1ae4      	subs	r4, r4, r3
 8002e6a:	10a4      	asrs	r4, r4, #2
 8002e6c:	2500      	movs	r5, #0
 8002e6e:	461e      	mov	r6, r3
 8002e70:	42a5      	cmp	r5, r4
 8002e72:	d004      	beq.n	8002e7e <__libc_init_array+0x3a>
 8002e74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e78:	4798      	blx	r3
 8002e7a:	3501      	adds	r5, #1
 8002e7c:	e7f8      	b.n	8002e70 <__libc_init_array+0x2c>
 8002e7e:	bd70      	pop	{r4, r5, r6, pc}
 8002e80:	08003014 	.word	0x08003014
 8002e84:	08003014 	.word	0x08003014
 8002e88:	08003018 	.word	0x08003018
 8002e8c:	08003014 	.word	0x08003014

08002e90 <_init>:
 8002e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e92:	bf00      	nop
 8002e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e96:	bc08      	pop	{r3}
 8002e98:	469e      	mov	lr, r3
 8002e9a:	4770      	bx	lr

08002e9c <_fini>:
 8002e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9e:	bf00      	nop
 8002ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea2:	bc08      	pop	{r3}
 8002ea4:	469e      	mov	lr, r3
 8002ea6:	4770      	bx	lr
